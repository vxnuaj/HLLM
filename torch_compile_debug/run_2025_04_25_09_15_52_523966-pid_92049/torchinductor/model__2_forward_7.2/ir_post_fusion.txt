op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 512})]
op20.unmet_dependencies = []
op20.met_dependencies = [MemoryDep('primals_15', c0, {c0: 512})]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cpu', torch.bool, size=[1, 1, 1, 512], stride=[512, 512, 512, 1])
    buf20.users = [
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op20.group.device = cpu
op20.group.iteration = ((512,), ())
op20.sizes = ([512], [])
primals_15_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 512, 512], stride=[262144, 262144, 512, 1])
buf20_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 1, 512], stride=[512, 512, 512, 1])
class op20_loop_body:
    var_ranges = {p0: 512}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_15', get_index)
        to_dtype = ops.to_dtype(load, torch.int64, src_dtype = torch.bool)
        constant = ops.constant(0, torch.int64)
        eq = ops.eq(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf20', get_index_1, eq, None)
        return store


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 512})]
op54.unmet_dependencies = []
op54.met_dependencies = [MemoryDep('primals_34', c0, {c0: 512})]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cpu', torch.bool, size=[1, 1, 1, 512], stride=[512, 512, 512, 1])
    buf54.users = [
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op54.group.device = cpu
op54.group.iteration = ((512,), ())
op54.sizes = ([512], [])
primals_34_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 512, 512], stride=[262144, 262144, 512, 1])
buf54_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 1, 512], stride=[512, 512, 512, 1])
class op54_loop_body:
    var_ranges = {p0: 512}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_34', get_index)
        to_dtype = ops.to_dtype(load, torch.int64, src_dtype = torch.bool)
        constant = ops.constant(0, torch.int64)
        eq = ops.eq(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf54', get_index_1, eq, None)
        return store


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 512})]
op88.unmet_dependencies = []
op88.met_dependencies = [MemoryDep('primals_53', c0, {c0: 512})]
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cpu', torch.bool, size=[1, 1, 1, 512], stride=[512, 512, 512, 1])
    buf88.users = [
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op88.group.device = cpu
op88.group.iteration = ((512,), ())
op88.sizes = ([512], [])
primals_53_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 512, 512], stride=[262144, 262144, 512, 1])
buf88_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 1, 512], stride=[512, 512, 512, 1])
class op88_loop_body:
    var_ranges = {p0: 512}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_53', get_index)
        to_dtype = ops.to_dtype(load, torch.int64, src_dtype = torch.bool)
        constant = ops.constant(0, torch.int64)
        eq = ops.eq(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf88', get_index_1, eq, None)
        return store


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 512})]
op122.unmet_dependencies = []
op122.met_dependencies = [MemoryDep('primals_72', c0, {c0: 512})]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cpu', torch.bool, size=[1, 1, 1, 512], stride=[512, 512, 512, 1])
    buf122.users = [
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op122.group.device = cpu
op122.group.iteration = ((512,), ())
op122.sizes = ([512], [])
primals_72_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 512, 512], stride=[262144, 262144, 512, 1])
buf122_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 1, 512], stride=[512, 512, 512, 1])
class op122_loop_body:
    var_ranges = {p0: 512}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_72', get_index)
        to_dtype = ops.to_dtype(load, torch.int64, src_dtype = torch.bool)
        constant = ops.constant(0, torch.int64)
        eq = ops.eq(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf122', get_index_1, eq, None)
        return store


op0_op1_op2_op3: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op0_op1_op2_op3.writes = 
    [   MemoryDep('buf0', c0, {c0: 4096}),
        MemoryDep('buf1', c0, {c0: 16}),
        MemoryDep('buf2', c0, {c0: 16}),
        MemoryDep('buf3', c0, {c0: 4096})]
op0_op1_op2_op3.unmet_dependencies = []
op0_op1_op2_op3.met_dependencies = 
    [   MemoryDep('primals_1', c1 + 256*tmp0, {c0: 16, c1: 256}),
        MemoryDep('primals_2', c0, {c0: 16}),
        MemoryDep('primals_3', c1 + 130816, {c0: 16, c1: 256}),
        MemoryDep('primals_4', c1, {c0: 16, c1: 256})]
op0_op1_op2_op3.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf0.users = [
        NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
    buf1.users = [NodeUser(node=SchedulerNode(name='op2'), can_inplace=True, is_weak=False)]
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
    buf2.users = [
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf3.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op0_op1_op2_op3.snodes[0] =
op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 4096})]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('primals_1', c1 + 256*tmp0, {c0: 16, c1: 256}),
        MemoryDep('primals_2', c0, {c0: 16})]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf0.users = [
        NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op0.group.device = cpu
op0.group.iteration = ((16, 256), ())
op0.sizes = ([16, 256], [])
primals_2_layout = FixedLayout('cpu', torch.int64, size=[16, 1], stride=[1, 1])
primals_1_layout = FixedLayout('cpu', torch.float32, size=[10000, 256], stride=[256, 1])
buf0_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
class op0_loop_body:
    var_ranges = {p0: 16, p1: 256}
    index0 = p0
    index1 = 256*indirect0 + p1
    index2 = 256*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_2', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1', get_index_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf0', get_index_2, load_1, None)
        return store
op0_op1_op2_op3.snodes[1] =
op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 16})]
op1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 4096})]
op1.met_dependencies = [MemoryDep('primals_3', c1 + 130816, {c0: 16, c1: 256})]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
    buf1.users = [NodeUser(node=SchedulerNode(name='op2'), can_inplace=True, is_weak=False)]
]
op1.group.device = cpu
op1.group.iteration = ((16,), (256,))
op1.sizes = ([16], [256])
buf0_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
primals_3_layout = FixedLayout('cpu', torch.float32, size=[1, 512, 256], stride=[131072, 256, 1])
buf1_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
class op1_loop_body:
    var_ranges = {p0: 16, p1: 256}
    index0 = 256*p0 + p1
    index1 = p1 + 130816
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_3', get_index_1)
        add = ops.add(load, load_1)
        mul = ops.mul(add, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1', get_index_2, reduction)
        return store_reduction
op0_op1_op2_op3.snodes[2] =
op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 16})]
op2.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 16})]
op2.met_dependencies = []
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
    buf2.users = [
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2.group.device = cpu
op2.group.iteration = ((16,), ())
op2.sizes = ([16], [])
buf1_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
buf2_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
class op2_loop_body:
    var_ranges = {p0: 16}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.1920928955078125e-07, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2', get_index_1, rsqrt, None)
        return store
op0_op1_op2_op3.snodes[3] =
op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 4096})]
op3.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 4096}), MemoryDep('buf2', c0, {c0: 16})]
op3.met_dependencies = 
    [   MemoryDep('primals_3', c1 + 130816, {c0: 16, c1: 256}),
        MemoryDep('primals_4', c1, {c0: 16, c1: 256})]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf3.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op3.group.device = cpu
op3.group.iteration = ((16, 256), ())
op3.sizes = ([16, 256], [])
buf0_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
primals_3_layout = FixedLayout('cpu', torch.float32, size=[1, 512, 256], stride=[131072, 256, 1])
buf2_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
primals_4_layout = FixedLayout('cpu', torch.float32, size=[256], stride=[1])
buf3_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
class op3_loop_body:
    var_ranges = {p0: 16, p1: 256}
    index0 = 256*p0 + p1
    index1 = p1 + 130816
    index2 = p0
    index3 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_3', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf2', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('primals_4', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf3', get_index_4, mul_1, None)
        return store


op5: ExternKernelSchedulerNode(ExternKernelOut)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op5.met_dependencies = [StarDep(name='primals_7', mode=None), StarDep(name='primals_8', mode=None)]
op5.outputs = [
    buf5: ExternKernelOut
    buf5.layout = FixedLayout('cpu', torch.float32, size=[16, 32], stride=[32, 1])
    buf5.users = [NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op5.node.kernel = extern_kernels.addmm


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', 16416*c0 + c1, {c0: 16, c1: 32})]
op8.unmet_dependencies = [MemoryDep('buf5', c0, {c0: 512})]
op8.met_dependencies = []
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 32], stride=[16416, 32, 1])
    buf8.aliases = ['buf9']
    buf8.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op8.group.device = cpu
op8.group.iteration = ((16, 32), ())
op8.sizes = ([16, 32], [])
buf5_layout = FixedLayout('cpu', torch.float32, size=[16, 32], stride=[32, 1])
buf8_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 32], stride=[16416, 32, 1])
class op8_loop_body:
    var_ranges = {p0: 16, p1: 32}
    index0 = 32*p0 + p1
    index1 = 16416*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf8', get_index_1, load, None)
        return store


op4: ExternKernelSchedulerNode(ExternKernelOut)
op4.writes = [StarDep(name='buf4', mode=None)]
op4.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op4.met_dependencies = [StarDep(name='primals_5', mode=None), StarDep(name='primals_6', mode=None)]
op4.outputs = [
    buf4: ExternKernelOut
    buf4.layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
    buf4.users = [
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
    ]
]
op4.node.kernel = extern_kernels.addmm


op13_op14: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op13_op14.writes = [MemoryDep('buf13', 2*c0, {c0: 2048}), MemoryDep('buf14', 2*c0, {c0: 2048})]
op13_op14.unmet_dependencies = [MemoryDep('buf4', 2*c0 + 1, {c0: 2048}), MemoryDep('buf4', 2*c0, {c0: 2048})]
op13_op14.met_dependencies = 
    [   MemoryDep('primals_13', 2*c1 + 32, {c0: 128, c1: 16}),
        MemoryDep('primals_14', 2*c1 + 32, {c0: 128, c1: 16})]
op13_op14.outputs = [
    buf13: ComputedBuffer
    buf13.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 1, 16, 1], stride=[256, 32, 32, 2, 1])
    buf13.aliases = ['buf15']
    buf13.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf14: ComputedBuffer
    buf14.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 1, 16, 1], stride=[256, 32, 32, 2, 1])
    buf14.aliases = ['buf15']
    buf14.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op13_op14.snodes[0] =
op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', 2*c0, {c0: 2048})]
op13.unmet_dependencies = [MemoryDep('buf4', 2*c0 + 1, {c0: 2048}), MemoryDep('buf4', 2*c0, {c0: 2048})]
op13.met_dependencies = 
    [   MemoryDep('primals_13', 2*c1 + 32, {c0: 128, c1: 16}),
        MemoryDep('primals_14', 2*c1 + 32, {c0: 128, c1: 16})]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 1, 16, 1], stride=[256, 32, 32, 2, 1])
    buf13.aliases = ['buf15']
    buf13.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op13.group.device = cpu
op13.group.iteration = ((128, 16), ())
op13.sizes = ([128, 16], [])
buf4_layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
primals_13_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf4_layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
primals_14_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf13_layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 1, 16, 1], stride=[256, 32, 32, 2, 1])
class op13_loop_body:
    var_ranges = {p0: 128, p1: 16}
    index0 = 32*p0 + 2*p1
    index1 = 2*p1 + 32
    index2 = 32*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf4', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_14', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        sub = ops.sub(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf13', get_index_4, sub, None)
        return store
op13_op14.snodes[1] =
op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', 2*c0, {c0: 2048})]
op14.unmet_dependencies = [MemoryDep('buf4', 2*c0 + 1, {c0: 2048}), MemoryDep('buf4', 2*c0, {c0: 2048})]
op14.met_dependencies = 
    [   MemoryDep('primals_13', 2*c1 + 32, {c0: 128, c1: 16}),
        MemoryDep('primals_14', 2*c1 + 32, {c0: 128, c1: 16})]
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 1, 16, 1], stride=[256, 32, 32, 2, 1])
    buf14.aliases = ['buf15']
    buf14.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op14.group.device = cpu
op14.group.iteration = ((128, 16), ())
op14.sizes = ([128, 16], [])
buf4_layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
primals_14_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf4_layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
primals_13_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf14_layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 1, 16, 1], stride=[256, 32, 32, 2, 1])
class op14_loop_body:
    var_ranges = {p0: 128, p1: 16}
    index0 = 32*p0 + 2*p1
    index1 = 2*p1 + 32
    index2 = 32*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_14', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf4', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_13', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf14', get_index_4, add, None)
        return store


op15: NopKernelSchedulerNode(ConcatKernel)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf13', mode=None), StarDep(name='buf14', mode=None)]
op15.met_dependencies = []
op15.outputs = [
    buf15: ConcatKernel
    buf15.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 16, 2], stride=[256, 32, 32, 2, 1])
    buf15.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]


op6: ExternKernelSchedulerNode(ExternKernelOut)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op6.met_dependencies = [StarDep(name='primals_10', mode=None), StarDep(name='primals_9', mode=None)]
op6.outputs = [
    buf6: ExternKernelOut
    buf6.layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
    buf6.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op6.node.kernel = extern_kernels.addmm


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', 131328*c0 + c1, {c0: 16, c1: 256})]
op11.unmet_dependencies = [MemoryDep('buf6', c0, {c0: 4096})]
op11.met_dependencies = []
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 256], stride=[131328, 256, 1])
    buf11.aliases = ['buf12']
    buf11.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op11.group.device = cpu
op11.group.iteration = ((16, 256), ())
op11.sizes = ([16, 256], [])
buf6_layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
buf11_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 256], stride=[131328, 256, 1])
class op11_loop_body:
    var_ranges = {p0: 16, p1: 256}
    index0 = 256*p0 + p1
    index1 = 131328*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf11', get_index_1, load, None)
        return store


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', 16416*c0 + c1, {c0: 16, c1: 16384})]
op7.unmet_dependencies = []
op7.met_dependencies = [MemoryDep('primals_11', c0, {c0: 262144})]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = NonOwningLayout('cpu', torch.float32, size=[16, 512, 32], stride=[16416, 32, 1])
    buf7.aliases = ['buf9']
    buf7.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op7.group.device = cpu
op7.group.iteration = ((16, 16384), ())
op7.sizes = ([16, 16384], [])
primals_11_layout = FixedLayout('cpu', torch.float16, size=[16, 512, 32], stride=[16384, 32, 1])
buf7_layout = NonOwningLayout('cpu', torch.float32, size=[16, 512, 32], stride=[16416, 32, 1])
class op7_loop_body:
    var_ranges = {p0: 16, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = 16416*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_11', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf7', get_index_1, to_dtype, None)
        return store


op9: NopKernelSchedulerNode(ConcatKernel)
op9.writes = [StarDep(name='buf9', mode=None)]
op9.unmet_dependencies = [StarDep(name='buf7', mode=None), StarDep(name='buf8', mode=None)]
op9.met_dependencies = []
op9.outputs = [
    buf9: ConcatKernel
    buf9.layout = FixedLayout('cpu', torch.float32, size=[16, 513, 32], stride=[16416, 32, 1])
    buf9.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]


op16_op17: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op16_op17.writes = [MemoryDep('buf16', 2*c0, {c0: 131072}), MemoryDep('buf17', 2*c0, {c0: 131072})]
op16_op17.unmet_dependencies = 
    [   MemoryDep('buf9', 16416*c0 + 2*c1 + 32, {c0: 16, c1: 8192}),
        MemoryDep('buf9', 16416*c0 + 2*c1 + 33, {c0: 16, c1: 8192})]
op16_op17.met_dependencies = 
    [   MemoryDep('primals_13', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_14', 2*c1, {c0: 16, c1: 8192})]
op16_op17.outputs = [
    buf16: ComputedBuffer
    buf16.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf16.aliases = ['buf18']
    buf16.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
    ]
    buf17: ComputedBuffer
    buf17.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf17.aliases = ['buf18']
    buf17.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
    ]
]
op16_op17.snodes[0] =
op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', 2*c0, {c0: 131072})]
op16.unmet_dependencies = 
    [   MemoryDep('buf9', 16416*c0 + 2*c1 + 32, {c0: 16, c1: 8192}),
        MemoryDep('buf9', 16416*c0 + 2*c1 + 33, {c0: 16, c1: 8192})]
op16.met_dependencies = 
    [   MemoryDep('primals_13', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_14', 2*c1, {c0: 16, c1: 8192})]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf16.aliases = ['buf18']
    buf16.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
    ]
]
op16.group.device = cpu
op16.group.iteration = ((16, 8192), ())
op16.sizes = ([16, 8192], [])
buf9_layout = FixedLayout('cpu', torch.float32, size=[16, 513, 32], stride=[16416, 32, 1])
primals_13_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf9_layout = FixedLayout('cpu', torch.float32, size=[16, 513, 32], stride=[16416, 32, 1])
primals_14_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf16_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
class op16_loop_body:
    var_ranges = {p0: 16, p1: 8192}
    index0 = 16416*p0 + 2*p1 + 32
    index1 = 2*p1
    index2 = 16416*p0 + 2*p1 + 33
    index3 = 16384*p0 + 2*p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf9', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf9', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_14', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        sub = ops.sub(mul, mul_1)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf16', get_index_4, sub, None)
        return store
op16_op17.snodes[1] =
op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', 2*c0, {c0: 131072})]
op17.unmet_dependencies = 
    [   MemoryDep('buf9', 16416*c0 + 2*c1 + 32, {c0: 16, c1: 8192}),
        MemoryDep('buf9', 16416*c0 + 2*c1 + 33, {c0: 16, c1: 8192})]
op17.met_dependencies = 
    [   MemoryDep('primals_13', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_14', 2*c1, {c0: 16, c1: 8192})]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf17.aliases = ['buf18']
    buf17.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
    ]
]
op17.group.device = cpu
op17.group.iteration = ((16, 8192), ())
op17.sizes = ([16, 8192], [])
buf9_layout = FixedLayout('cpu', torch.float32, size=[16, 513, 32], stride=[16416, 32, 1])
primals_14_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf9_layout = FixedLayout('cpu', torch.float32, size=[16, 513, 32], stride=[16416, 32, 1])
primals_13_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf17_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
class op17_loop_body:
    var_ranges = {p0: 16, p1: 8192}
    index0 = 16416*p0 + 2*p1 + 32
    index1 = 2*p1
    index2 = 16416*p0 + 2*p1 + 33
    index3 = 16384*p0 + 2*p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf9', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_14', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf9', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_13', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf17', get_index_4, add, None)
        return store


op18: NopKernelSchedulerNode(ConcatKernel)
op18.writes = [StarDep(name='buf18', mode=None)]
op18.unmet_dependencies = [StarDep(name='buf16', mode=None), StarDep(name='buf17', mode=None)]
op18.met_dependencies = []
op18.outputs = [
    buf18: ConcatKernel
    buf18.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
    buf18.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
    ]
]


op19_op21_op22_op23_op24: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op19_op21_op22_op23_op24.writes = 
    [   MemoryDep('buf19', c0, {c0: 65536}),
        MemoryDep('buf21', c0, {c0: 128}),
        MemoryDep('buf22', c0, {c0: 65536}),
        MemoryDep('buf23', c0, {c0: 128}),
        MemoryDep('buf24', c0, {c0: 65536})]
op19_op21_op22_op23_op24.unmet_dependencies = 
    [   MemoryDep('buf15', 32*c0 + c2, {c0: 128, c1: 512, c2: 32}),
        MemoryDep('buf18', c1 + 16384*((c0//8)), {c0: 128, c1: 16384}),
        MemoryDep('buf20', c1, {c0: 128, c1: 512})]
op19_op21_op22_op23_op24.met_dependencies = []
op19_op21_op22_op23_op24.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cpu', torch.float32, size=[128, 1, 512], stride=[512, 512, 1])
    buf19.users = [
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False),
    ]
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
    buf21.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 65536, 1])
    buf22.users = [
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=True, is_weak=False),
    ]
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
    buf23.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 512, 1])
    buf24.users = [
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op19_op21_op22_op23_op24.snodes[0] =
op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 65536})]
op19.unmet_dependencies = 
    [   MemoryDep('buf15', 32*c0 + c2, {c0: 128, c1: 512, c2: 32}),
        MemoryDep('buf18', c1 + 16384*((c0//8)), {c0: 128, c1: 16384})]
op19.met_dependencies = []
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cpu', torch.float32, size=[128, 1, 512], stride=[512, 512, 1])
    buf19.users = [
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False),
    ]
]
op19.group.device = cpu
op19.group.iteration = ((128, 512), (32,))
op19.sizes = ([128, 512], [32])
buf15_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 16, 2], stride=[256, 32, 32, 2, 1])
buf18_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
buf19_layout = FixedLayout('cpu', torch.float32, size=[128, 1, 512], stride=[512, 512, 1])
class op19_loop_body:
    var_ranges = {p0: 128, p1: 512, p2: 32}
    index0 = 32*p0 + p2
    index1 = 32*p1 + p2 + 16384*((p0//8))
    index2 = 512*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf18', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf19', get_index_2, reduction)
        return store_reduction
op19_op21_op22_op23_op24.snodes[1] =
op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 128})]
op21.unmet_dependencies = 
    [   MemoryDep('buf19', c0, {c0: 65536}),
        MemoryDep('buf20', c1, {c0: 128, c1: 512})]
op21.met_dependencies = []
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
    buf21.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cpu
op21.group.iteration = ((128,), (512,))
op21.sizes = ([128], [512])
buf20_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 1, 512], stride=[512, 512, 512, 1])
buf19_layout = FixedLayout('cpu', torch.float32, size=[128, 1, 512], stride=[512, 512, 1])
buf21_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
class op21_loop_body:
    var_ranges = {p0: 128, p1: 512}
    index0 = p1
    index1 = 512*p0 + p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf19', get_index_1)
        constant = ops.constant(0.17677669529663687, torch.float32)
        mul = ops.mul(load_1, constant)
        constant_1 = ops.constant(-inf, torch.float32)
        where = ops.where(load, constant_1, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf21', get_index_2, reduction)
        return store_reduction
op19_op21_op22_op23_op24.snodes[2] =
op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 65536})]
op22.unmet_dependencies = 
    [   MemoryDep('buf19', c0, {c0: 65536}),
        MemoryDep('buf20', c1, {c0: 128, c1: 512}),
        MemoryDep('buf21', c0, {c0: 128})]
op22.met_dependencies = []
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 65536, 1])
    buf22.users = [
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=True, is_weak=False),
    ]
]
op22.group.device = cpu
op22.group.iteration = ((128, 512), ())
op22.sizes = ([128, 512], [])
buf20_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 1, 512], stride=[512, 512, 512, 1])
buf19_layout = FixedLayout('cpu', torch.float32, size=[128, 1, 512], stride=[512, 512, 1])
buf21_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
buf22_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 65536, 1])
class op22_loop_body:
    var_ranges = {p0: 128, p1: 512}
    index0 = p1
    index1 = 512*p0 + p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf19', get_index_1)
        constant = ops.constant(0.17677669529663687, torch.float32)
        mul = ops.mul(load_1, constant)
        constant_1 = ops.constant(-inf, torch.float32)
        where = ops.where(load, constant_1, mul)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf21', get_index_2)
        sub = ops.sub(where, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf22', get_index_3, exp, None)
        return store
op19_op21_op22_op23_op24.snodes[3] =
op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 128})]
op23.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 65536})]
op23.met_dependencies = []
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
    buf23.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op23.group.device = cpu
op23.group.iteration = ((128,), (512,))
op23.sizes = ([128], [512])
buf22_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 65536, 1])
buf23_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
class op23_loop_body:
    var_ranges = {p0: 128, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf23', get_index_1, reduction)
        return store_reduction
op19_op21_op22_op23_op24.snodes[4] =
op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 65536})]
op24.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 65536}), MemoryDep('buf23', c0, {c0: 128})]
op24.met_dependencies = []
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 512, 1])
    buf24.users = [
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op24.group.device = cpu
op24.group.iteration = ((128, 512), ())
op24.sizes = ([128, 512], [])
buf22_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 65536, 1])
buf23_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
buf24_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 512, 1])
class op24_loop_body:
    var_ranges = {p0: 128, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf23', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf24', get_index_2, truediv, None)
        return store


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', 16416*c0 + c1, {c0: 16, c1: 16384})]
op41.unmet_dependencies = []
op41.met_dependencies = [MemoryDep('primals_30', c0, {c0: 262144})]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = NonOwningLayout('cpu', torch.float32, size=[16, 512, 32], stride=[16416, 32, 1])
    buf41.aliases = ['buf43']
    buf41.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op41.group.device = cpu
op41.group.iteration = ((16, 16384), ())
op41.sizes = ([16, 16384], [])
primals_30_layout = FixedLayout('cpu', torch.float16, size=[16, 512, 32], stride=[16384, 32, 1])
buf41_layout = NonOwningLayout('cpu', torch.float32, size=[16, 512, 32], stride=[16416, 32, 1])
class op41_loop_body:
    var_ranges = {p0: 16, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = 16416*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_30', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf41', get_index_1, to_dtype, None)
        return store


op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', 16416*c0 + c1, {c0: 16, c1: 16384})]
op75.unmet_dependencies = []
op75.met_dependencies = [MemoryDep('primals_49', c0, {c0: 262144})]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = NonOwningLayout('cpu', torch.float32, size=[16, 512, 32], stride=[16416, 32, 1])
    buf75.aliases = ['buf77']
    buf75.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op75.group.device = cpu
op75.group.iteration = ((16, 16384), ())
op75.sizes = ([16, 16384], [])
primals_49_layout = FixedLayout('cpu', torch.float16, size=[16, 512, 32], stride=[16384, 32, 1])
buf75_layout = NonOwningLayout('cpu', torch.float32, size=[16, 512, 32], stride=[16416, 32, 1])
class op75_loop_body:
    var_ranges = {p0: 16, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = 16416*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_49', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf75', get_index_1, to_dtype, None)
        return store


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', 16416*c0 + c1, {c0: 16, c1: 16384})]
op109.unmet_dependencies = []
op109.met_dependencies = [MemoryDep('primals_68', c0, {c0: 262144})]
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = NonOwningLayout('cpu', torch.float32, size=[16, 512, 32], stride=[16416, 32, 1])
    buf109.aliases = ['buf111']
    buf109.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op109.group.device = cpu
op109.group.iteration = ((16, 16384), ())
op109.sizes = ([16, 16384], [])
primals_68_layout = FixedLayout('cpu', torch.float16, size=[16, 512, 32], stride=[16384, 32, 1])
buf109_layout = NonOwningLayout('cpu', torch.float32, size=[16, 512, 32], stride=[16416, 32, 1])
class op109_loop_body:
    var_ranges = {p0: 16, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = 16416*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_68', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf109', get_index_1, to_dtype, None)
        return store


op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 2097152})]
op148.unmet_dependencies = [MemoryDep('buf18', 16384*c0 + c2 + 32*c3, {c0: 16, c1: 8, c2: 32, c3: 512})]
op148.met_dependencies = []
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 32, 512], stride=[131072, 16384, 512, 1])
    buf148.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op148.group.device = cpu
op148.group.iteration = ((16, 8, 32, 512), ())
op148.sizes = ([16, 8, 32, 512], [])
buf18_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
buf148_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 32, 512], stride=[131072, 16384, 512, 1])
class op148_loop_body:
    var_ranges = {p0: 16, p1: 8, p2: 32, p3: 512}
    index0 = 16384*p0 + p2 + 32*p3
    index1 = 131072*p0 + 16384*p1 + 512*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf148', get_index_1, load, None)
        return store


op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', 131328*c0 + c1, {c0: 16, c1: 131072})]
op10.unmet_dependencies = []
op10.met_dependencies = [MemoryDep('primals_12', c0, {c0: 2097152})]
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = NonOwningLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131328, 256, 1])
    buf10.aliases = ['buf12']
    buf10.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op10.group.device = cpu
op10.group.iteration = ((16, 131072), ())
op10.sizes = ([16, 131072], [])
primals_12_layout = FixedLayout('cpu', torch.float16, size=[16, 512, 256], stride=[131072, 256, 1])
buf10_layout = NonOwningLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131328, 256, 1])
class op10_loop_body:
    var_ranges = {p0: 16, p1: 131072}
    index0 = 131072*p0 + p1
    index1 = 131328*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_12', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf10', get_index_1, to_dtype, None)
        return store


op12: NopKernelSchedulerNode(ConcatKernel)
op12.writes = [StarDep(name='buf12', mode=None)]
op12.unmet_dependencies = [StarDep(name='buf10', mode=None), StarDep(name='buf11', mode=None)]
op12.met_dependencies = []
op12.outputs = [
    buf12: ConcatKernel
    buf12.layout = FixedLayout('cpu', torch.float32, size=[16, 513, 256], stride=[131328, 256, 1])
    buf12.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 4096})]
op25.unmet_dependencies = 
    [   MemoryDep('buf12', c1 + 32*c2 + 131328*((c0//8)) + 131328*(((c1 + 32*c2 + 16384*(ModularIndexing(c0, 1, 8)))//131072)) + 16384*(ModularIndexing(c0, 1, 8)) + 256, {c0: 128, c1: 32, c2: 512}),
        MemoryDep('buf24', 512*c0 + c2, {c0: 128, c1: 32, c2: 512})]
op25.met_dependencies = []
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cpu', torch.float32, size=[128, 1, 32], stride=[32, 32, 1])
    buf25.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False)]
]
op25.group.device = cpu
op25.group.iteration = ((128, 32), (512,))
op25.sizes = ([128, 32], [512])
buf24_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 512, 1])
buf12_layout = FixedLayout('cpu', torch.float32, size=[16, 513, 256], stride=[131328, 256, 1])
buf25_layout = FixedLayout('cpu', torch.float32, size=[128, 1, 32], stride=[32, 32, 1])
class op25_loop_body:
    var_ranges = {p0: 128, p1: 32, p2: 512}
    index0 = 512*p0 + p2
    index1 = p1 + 32*p2 + 131328*((p0//8)) + 131328*(((p1 + 32*p2 + 16384*(ModularIndexing(p0, 1, 8)))//131072)) + 16384*(ModularIndexing(p0, 1, 8)) + 256
    index2 = 32*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf24', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf12', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf25', get_index_2, reduction)
        return store_reduction


op26_op27_op28_op29: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op26_op27_op28_op29.writes = 
    [   MemoryDep('buf26', c0, {c0: 4096}),
        MemoryDep('buf27', c0, {c0: 16}),
        MemoryDep('buf28', c0, {c0: 16}),
        MemoryDep('buf29', c0, {c0: 4096})]
op26_op27_op28_op29.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 4096}), MemoryDep('buf25', c0, {c0: 4096})]
op26_op27_op28_op29.met_dependencies = 
    [   MemoryDep('primals_16', c1, {c0: 16, c1: 256}),
        MemoryDep('primals_3', c1 + 130816, {c0: 16, c1: 256})]
op26_op27_op28_op29.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf26.users = [
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
    buf27.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False)]
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
    buf28.users = [
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf29.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op26_op27_op28_op29.snodes[0] =
op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 4096})]
op26.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 4096}), MemoryDep('buf25', c0, {c0: 4096})]
op26.met_dependencies = [MemoryDep('primals_3', c1 + 130816, {c0: 16, c1: 256})]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf26.users = [
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op26.group.device = cpu
op26.group.iteration = ((16, 256), ())
op26.sizes = ([16, 256], [])
buf25_layout = FixedLayout('cpu', torch.float32, size=[128, 1, 32], stride=[32, 32, 1])
buf0_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
primals_3_layout = FixedLayout('cpu', torch.float32, size=[1, 512, 256], stride=[131072, 256, 1])
buf26_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
class op26_loop_body:
    var_ranges = {p0: 16, p1: 256}
    index0 = 256*p0 + p1
    index1 = p1 + 130816
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf0', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_3', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf26', get_index_3, add_1, None)
        return store
op26_op27_op28_op29.snodes[1] =
op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 16})]
op27.unmet_dependencies = [MemoryDep('buf26', c0, {c0: 4096})]
op27.met_dependencies = []
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
    buf27.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False)]
]
op27.group.device = cpu
op27.group.iteration = ((16,), (256,))
op27.sizes = ([16], [256])
buf26_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
buf27_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
class op27_loop_body:
    var_ranges = {p0: 16, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf27', get_index_1, reduction)
        return store_reduction
op26_op27_op28_op29.snodes[2] =
op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 16})]
op28.unmet_dependencies = [MemoryDep('buf27', c0, {c0: 16})]
op28.met_dependencies = []
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
    buf28.users = [
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op28.group.device = cpu
op28.group.iteration = ((16,), ())
op28.sizes = ([16], [])
buf27_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
buf28_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
class op28_loop_body:
    var_ranges = {p0: 16}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.1920928955078125e-07, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf28', get_index_1, rsqrt, None)
        return store
op26_op27_op28_op29.snodes[3] =
op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 4096})]
op29.unmet_dependencies = [MemoryDep('buf26', c0, {c0: 4096}), MemoryDep('buf28', c0, {c0: 16})]
op29.met_dependencies = [MemoryDep('primals_16', c1, {c0: 16, c1: 256})]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf29.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op29.group.device = cpu
op29.group.iteration = ((16, 256), ())
op29.sizes = ([16, 256], [])
buf26_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
buf28_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
primals_16_layout = FixedLayout('cpu', torch.float32, size=[256], stride=[1])
buf29_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
class op29_loop_body:
    var_ranges = {p0: 16, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf28', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_16', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf29', get_index_3, mul_1, None)
        return store


op30: ExternKernelSchedulerNode(ExternKernelOut)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op30.met_dependencies = [StarDep(name='primals_17', mode=None), StarDep(name='primals_18', mode=None)]
op30.outputs = [
    buf30: ExternKernelOut
    buf30.layout = FixedLayout('cpu', torch.float32, size=[16, 682], stride=[682, 1])
    buf30.users = [
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op30.node.kernel = extern_kernels.addmm


op31: ExternKernelSchedulerNode(ExternKernelOut)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op31.met_dependencies = [StarDep(name='primals_19', mode=None), StarDep(name='primals_20', mode=None)]
op31.outputs = [
    buf31: ExternKernelOut
    buf31.layout = FixedLayout('cpu', torch.float32, size=[16, 682], stride=[682, 1])
    buf31.users = [
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op31.node.kernel = extern_kernels.addmm


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 10912})]
op32.unmet_dependencies = [MemoryDep('buf30', c0, {c0: 10912}), MemoryDep('buf31', c0, {c0: 10912})]
op32.met_dependencies = []
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 682], stride=[682, 682, 1])
    buf32.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op32.group.device = cpu
op32.group.iteration = ((10912,), ())
op32.sizes = ([10912], [])
buf30_layout = FixedLayout('cpu', torch.float32, size=[16, 682], stride=[682, 1])
buf31_layout = FixedLayout('cpu', torch.float32, size=[16, 682], stride=[682, 1])
buf32_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 682], stride=[682, 682, 1])
class op32_loop_body:
    var_ranges = {p0: 10912}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf30', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf31', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf32', get_index_3, mul_1, None)
        return store


op33: ExternKernelSchedulerNode(ExternKernelOut)
op33.writes = [StarDep(name='buf33', mode=None)]
op33.unmet_dependencies = [StarDep(name='buf32', mode=None)]
op33.met_dependencies = [StarDep(name='primals_21', mode=None), StarDep(name='primals_22', mode=None)]
op33.outputs = [
    buf33: ExternKernelOut
    buf33.layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
    buf33.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=True, is_weak=False)]
]
op33.node.kernel = extern_kernels.addmm


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 4096})]
op34.unmet_dependencies = [MemoryDep('buf29', c0, {c0: 4096}), MemoryDep('buf33', c0, {c0: 4096})]
op34.met_dependencies = []
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf34.users = [
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op34.group.device = cpu
op34.group.iteration = ((4096,), ())
op34.sizes = ([4096], [])
buf33_layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
buf29_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
buf34_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
class op34_loop_body:
    var_ranges = {p0: 4096}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf29', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf34', get_index_2, add, None)
        return store


op35_op36_op37: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op35_op36_op37.writes = 
    [   MemoryDep('buf35', c0, {c0: 16}),
        MemoryDep('buf36', c0, {c0: 16}),
        MemoryDep('buf37', c0, {c0: 4096})]
op35_op36_op37.unmet_dependencies = [MemoryDep('buf34', c0, {c0: 4096})]
op35_op36_op37.met_dependencies = [MemoryDep('primals_23', c1, {c0: 16, c1: 256})]
op35_op36_op37.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False)]
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
    buf36.users = [
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf37.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op35_op36_op37.snodes[0] =
op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 16})]
op35.unmet_dependencies = [MemoryDep('buf34', c0, {c0: 4096})]
op35.met_dependencies = []
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False)]
]
op35.group.device = cpu
op35.group.iteration = ((16,), (256,))
op35.sizes = ([16], [256])
buf34_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
buf35_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
class op35_loop_body:
    var_ranges = {p0: 16, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf35', get_index_1, reduction)
        return store_reduction
op35_op36_op37.snodes[1] =
op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 16})]
op36.unmet_dependencies = [MemoryDep('buf35', c0, {c0: 16})]
op36.met_dependencies = []
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
    buf36.users = [
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op36.group.device = cpu
op36.group.iteration = ((16,), ())
op36.sizes = ([16], [])
buf35_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
buf36_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
class op36_loop_body:
    var_ranges = {p0: 16}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.1920928955078125e-07, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf36', get_index_1, rsqrt, None)
        return store
op35_op36_op37.snodes[2] =
op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 4096})]
op37.unmet_dependencies = [MemoryDep('buf34', c0, {c0: 4096}), MemoryDep('buf36', c0, {c0: 16})]
op37.met_dependencies = [MemoryDep('primals_23', c1, {c0: 16, c1: 256})]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf37.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op37.group.device = cpu
op37.group.iteration = ((16, 256), ())
op37.sizes = ([16, 256], [])
buf34_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
buf36_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
primals_23_layout = FixedLayout('cpu', torch.float32, size=[256], stride=[1])
buf37_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
class op37_loop_body:
    var_ranges = {p0: 16, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf36', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_23', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf37', get_index_3, mul_1, None)
        return store


op39: ExternKernelSchedulerNode(ExternKernelOut)
op39.writes = [StarDep(name='buf39', mode=None)]
op39.unmet_dependencies = [StarDep(name='buf37', mode=None)]
op39.met_dependencies = [StarDep(name='primals_26', mode=None), StarDep(name='primals_27', mode=None)]
op39.outputs = [
    buf39: ExternKernelOut
    buf39.layout = FixedLayout('cpu', torch.float32, size=[16, 32], stride=[32, 1])
    buf39.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
]
op39.node.kernel = extern_kernels.addmm


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', 16416*c0 + c1, {c0: 16, c1: 32})]
op42.unmet_dependencies = [MemoryDep('buf39', c0, {c0: 512})]
op42.met_dependencies = []
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 32], stride=[16416, 32, 1])
    buf42.aliases = ['buf43']
    buf42.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op42.group.device = cpu
op42.group.iteration = ((16, 32), ())
op42.sizes = ([16, 32], [])
buf39_layout = FixedLayout('cpu', torch.float32, size=[16, 32], stride=[32, 1])
buf42_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 32], stride=[16416, 32, 1])
class op42_loop_body:
    var_ranges = {p0: 16, p1: 32}
    index0 = 32*p0 + p1
    index1 = 16416*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf42', get_index_1, load, None)
        return store


op43: NopKernelSchedulerNode(ConcatKernel)
op43.writes = [StarDep(name='buf43', mode=None)]
op43.unmet_dependencies = [StarDep(name='buf41', mode=None), StarDep(name='buf42', mode=None)]
op43.met_dependencies = []
op43.outputs = [
    buf43: ConcatKernel
    buf43.layout = FixedLayout('cpu', torch.float32, size=[16, 513, 32], stride=[16416, 32, 1])
    buf43.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]


op38: ExternKernelSchedulerNode(ExternKernelOut)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf37', mode=None)]
op38.met_dependencies = [StarDep(name='primals_24', mode=None), StarDep(name='primals_25', mode=None)]
op38.outputs = [
    buf38: ExternKernelOut
    buf38.layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
    buf38.users = [
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
    ]
]
op38.node.kernel = extern_kernels.addmm


op47_op48: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op47_op48.writes = [MemoryDep('buf47', 2*c0, {c0: 2048}), MemoryDep('buf48', 2*c0, {c0: 2048})]
op47_op48.unmet_dependencies = [MemoryDep('buf38', 2*c0 + 1, {c0: 2048}), MemoryDep('buf38', 2*c0, {c0: 2048})]
op47_op48.met_dependencies = 
    [   MemoryDep('primals_32', 2*c1 + 32, {c0: 128, c1: 16}),
        MemoryDep('primals_33', 2*c1 + 32, {c0: 128, c1: 16})]
op47_op48.outputs = [
    buf47: ComputedBuffer
    buf47.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 1, 16, 1], stride=[256, 32, 32, 2, 1])
    buf47.aliases = ['buf49']
    buf47.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf48: ComputedBuffer
    buf48.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 1, 16, 1], stride=[256, 32, 32, 2, 1])
    buf48.aliases = ['buf49']
    buf48.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op47_op48.snodes[0] =
op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', 2*c0, {c0: 2048})]
op47.unmet_dependencies = [MemoryDep('buf38', 2*c0 + 1, {c0: 2048}), MemoryDep('buf38', 2*c0, {c0: 2048})]
op47.met_dependencies = 
    [   MemoryDep('primals_32', 2*c1 + 32, {c0: 128, c1: 16}),
        MemoryDep('primals_33', 2*c1 + 32, {c0: 128, c1: 16})]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 1, 16, 1], stride=[256, 32, 32, 2, 1])
    buf47.aliases = ['buf49']
    buf47.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op47.group.device = cpu
op47.group.iteration = ((128, 16), ())
op47.sizes = ([128, 16], [])
buf38_layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
primals_32_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf38_layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
primals_33_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf47_layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 1, 16, 1], stride=[256, 32, 32, 2, 1])
class op47_loop_body:
    var_ranges = {p0: 128, p1: 16}
    index0 = 32*p0 + 2*p1
    index1 = 2*p1 + 32
    index2 = 32*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_32', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf38', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_33', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        sub = ops.sub(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf47', get_index_4, sub, None)
        return store
op47_op48.snodes[1] =
op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', 2*c0, {c0: 2048})]
op48.unmet_dependencies = [MemoryDep('buf38', 2*c0 + 1, {c0: 2048}), MemoryDep('buf38', 2*c0, {c0: 2048})]
op48.met_dependencies = 
    [   MemoryDep('primals_32', 2*c1 + 32, {c0: 128, c1: 16}),
        MemoryDep('primals_33', 2*c1 + 32, {c0: 128, c1: 16})]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 1, 16, 1], stride=[256, 32, 32, 2, 1])
    buf48.aliases = ['buf49']
    buf48.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op48.group.device = cpu
op48.group.iteration = ((128, 16), ())
op48.sizes = ([128, 16], [])
buf38_layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
primals_33_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf38_layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
primals_32_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf48_layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 1, 16, 1], stride=[256, 32, 32, 2, 1])
class op48_loop_body:
    var_ranges = {p0: 128, p1: 16}
    index0 = 32*p0 + 2*p1
    index1 = 2*p1 + 32
    index2 = 32*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_33', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf38', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_32', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf48', get_index_4, add, None)
        return store


op49: NopKernelSchedulerNode(ConcatKernel)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf47', mode=None), StarDep(name='buf48', mode=None)]
op49.met_dependencies = []
op49.outputs = [
    buf49: ConcatKernel
    buf49.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 16, 2], stride=[256, 32, 32, 2, 1])
    buf49.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]


op40: ExternKernelSchedulerNode(ExternKernelOut)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf37', mode=None)]
op40.met_dependencies = [StarDep(name='primals_28', mode=None), StarDep(name='primals_29', mode=None)]
op40.outputs = [
    buf40: ExternKernelOut
    buf40.layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
    buf40.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op40.node.kernel = extern_kernels.addmm


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', 131328*c0 + c1, {c0: 16, c1: 256})]
op45.unmet_dependencies = [MemoryDep('buf40', c0, {c0: 4096})]
op45.met_dependencies = []
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 256], stride=[131328, 256, 1])
    buf45.aliases = ['buf46']
    buf45.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op45.group.device = cpu
op45.group.iteration = ((16, 256), ())
op45.sizes = ([16, 256], [])
buf40_layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
buf45_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 256], stride=[131328, 256, 1])
class op45_loop_body:
    var_ranges = {p0: 16, p1: 256}
    index0 = 256*p0 + p1
    index1 = 131328*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf45', get_index_1, load, None)
        return store


op50_op51: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op50_op51.writes = [MemoryDep('buf50', 2*c0, {c0: 131072}), MemoryDep('buf51', 2*c0, {c0: 131072})]
op50_op51.unmet_dependencies = 
    [   MemoryDep('buf43', 16416*c0 + 2*c1 + 32, {c0: 16, c1: 8192}),
        MemoryDep('buf43', 16416*c0 + 2*c1 + 33, {c0: 16, c1: 8192})]
op50_op51.met_dependencies = 
    [   MemoryDep('primals_32', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_33', 2*c1, {c0: 16, c1: 8192})]
op50_op51.outputs = [
    buf50: ComputedBuffer
    buf50.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf50.aliases = ['buf52']
    buf50.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
    ]
    buf51: ComputedBuffer
    buf51.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf51.aliases = ['buf52']
    buf51.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
    ]
]
op50_op51.snodes[0] =
op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', 2*c0, {c0: 131072})]
op50.unmet_dependencies = 
    [   MemoryDep('buf43', 16416*c0 + 2*c1 + 32, {c0: 16, c1: 8192}),
        MemoryDep('buf43', 16416*c0 + 2*c1 + 33, {c0: 16, c1: 8192})]
op50.met_dependencies = 
    [   MemoryDep('primals_32', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_33', 2*c1, {c0: 16, c1: 8192})]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf50.aliases = ['buf52']
    buf50.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
    ]
]
op50.group.device = cpu
op50.group.iteration = ((16, 8192), ())
op50.sizes = ([16, 8192], [])
buf43_layout = FixedLayout('cpu', torch.float32, size=[16, 513, 32], stride=[16416, 32, 1])
primals_32_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf43_layout = FixedLayout('cpu', torch.float32, size=[16, 513, 32], stride=[16416, 32, 1])
primals_33_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf50_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
class op50_loop_body:
    var_ranges = {p0: 16, p1: 8192}
    index0 = 16416*p0 + 2*p1 + 32
    index1 = 2*p1
    index2 = 16416*p0 + 2*p1 + 33
    index3 = 16384*p0 + 2*p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_32', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf43', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_33', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        sub = ops.sub(mul, mul_1)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf50', get_index_4, sub, None)
        return store
op50_op51.snodes[1] =
op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', 2*c0, {c0: 131072})]
op51.unmet_dependencies = 
    [   MemoryDep('buf43', 16416*c0 + 2*c1 + 32, {c0: 16, c1: 8192}),
        MemoryDep('buf43', 16416*c0 + 2*c1 + 33, {c0: 16, c1: 8192})]
op51.met_dependencies = 
    [   MemoryDep('primals_32', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_33', 2*c1, {c0: 16, c1: 8192})]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf51.aliases = ['buf52']
    buf51.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
    ]
]
op51.group.device = cpu
op51.group.iteration = ((16, 8192), ())
op51.sizes = ([16, 8192], [])
buf43_layout = FixedLayout('cpu', torch.float32, size=[16, 513, 32], stride=[16416, 32, 1])
primals_33_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf43_layout = FixedLayout('cpu', torch.float32, size=[16, 513, 32], stride=[16416, 32, 1])
primals_32_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf51_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
class op51_loop_body:
    var_ranges = {p0: 16, p1: 8192}
    index0 = 16416*p0 + 2*p1 + 32
    index1 = 2*p1
    index2 = 16416*p0 + 2*p1 + 33
    index3 = 16384*p0 + 2*p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_33', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf43', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_32', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf51', get_index_4, add, None)
        return store


op52: NopKernelSchedulerNode(ConcatKernel)
op52.writes = [StarDep(name='buf52', mode=None)]
op52.unmet_dependencies = [StarDep(name='buf50', mode=None), StarDep(name='buf51', mode=None)]
op52.met_dependencies = []
op52.outputs = [
    buf52: ConcatKernel
    buf52.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
    buf52.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
    ]
]


op53_op55_op56_op57_op58: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op53_op55_op56_op57_op58.writes = 
    [   MemoryDep('buf53', c0, {c0: 65536}),
        MemoryDep('buf55', c0, {c0: 128}),
        MemoryDep('buf56', c0, {c0: 65536}),
        MemoryDep('buf57', c0, {c0: 128}),
        MemoryDep('buf58', c0, {c0: 65536})]
op53_op55_op56_op57_op58.unmet_dependencies = 
    [   MemoryDep('buf49', 32*c0 + c2, {c0: 128, c1: 512, c2: 32}),
        MemoryDep('buf52', c1 + 16384*((c0//8)), {c0: 128, c1: 16384}),
        MemoryDep('buf54', c1, {c0: 128, c1: 512})]
op53_op55_op56_op57_op58.met_dependencies = []
op53_op55_op56_op57_op58.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cpu', torch.float32, size=[128, 1, 512], stride=[512, 512, 1])
    buf53.users = [
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False),
    ]
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
    buf55.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 65536, 1])
    buf56.users = [
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
    ]
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 512, 1])
    buf58.users = [
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op53_op55_op56_op57_op58.snodes[0] =
op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 65536})]
op53.unmet_dependencies = 
    [   MemoryDep('buf49', 32*c0 + c2, {c0: 128, c1: 512, c2: 32}),
        MemoryDep('buf52', c1 + 16384*((c0//8)), {c0: 128, c1: 16384})]
op53.met_dependencies = []
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cpu', torch.float32, size=[128, 1, 512], stride=[512, 512, 1])
    buf53.users = [
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False),
    ]
]
op53.group.device = cpu
op53.group.iteration = ((128, 512), (32,))
op53.sizes = ([128, 512], [32])
buf49_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 16, 2], stride=[256, 32, 32, 2, 1])
buf52_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
buf53_layout = FixedLayout('cpu', torch.float32, size=[128, 1, 512], stride=[512, 512, 1])
class op53_loop_body:
    var_ranges = {p0: 128, p1: 512, p2: 32}
    index0 = 32*p0 + p2
    index1 = 32*p1 + p2 + 16384*((p0//8))
    index2 = 512*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf52', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf53', get_index_2, reduction)
        return store_reduction
op53_op55_op56_op57_op58.snodes[1] =
op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 128})]
op55.unmet_dependencies = 
    [   MemoryDep('buf53', c0, {c0: 65536}),
        MemoryDep('buf54', c1, {c0: 128, c1: 512})]
op55.met_dependencies = []
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
    buf55.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op55.group.device = cpu
op55.group.iteration = ((128,), (512,))
op55.sizes = ([128], [512])
buf54_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 1, 512], stride=[512, 512, 512, 1])
buf53_layout = FixedLayout('cpu', torch.float32, size=[128, 1, 512], stride=[512, 512, 1])
buf55_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
class op55_loop_body:
    var_ranges = {p0: 128, p1: 512}
    index0 = p1
    index1 = 512*p0 + p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf53', get_index_1)
        constant = ops.constant(0.17677669529663687, torch.float32)
        mul = ops.mul(load_1, constant)
        constant_1 = ops.constant(-inf, torch.float32)
        where = ops.where(load, constant_1, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf55', get_index_2, reduction)
        return store_reduction
op53_op55_op56_op57_op58.snodes[2] =
op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 65536})]
op56.unmet_dependencies = 
    [   MemoryDep('buf53', c0, {c0: 65536}),
        MemoryDep('buf54', c1, {c0: 128, c1: 512}),
        MemoryDep('buf55', c0, {c0: 128})]
op56.met_dependencies = []
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 65536, 1])
    buf56.users = [
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
    ]
]
op56.group.device = cpu
op56.group.iteration = ((128, 512), ())
op56.sizes = ([128, 512], [])
buf54_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 1, 512], stride=[512, 512, 512, 1])
buf53_layout = FixedLayout('cpu', torch.float32, size=[128, 1, 512], stride=[512, 512, 1])
buf55_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
buf56_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 65536, 1])
class op56_loop_body:
    var_ranges = {p0: 128, p1: 512}
    index0 = p1
    index1 = 512*p0 + p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf53', get_index_1)
        constant = ops.constant(0.17677669529663687, torch.float32)
        mul = ops.mul(load_1, constant)
        constant_1 = ops.constant(-inf, torch.float32)
        where = ops.where(load, constant_1, mul)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf55', get_index_2)
        sub = ops.sub(where, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf56', get_index_3, exp, None)
        return store
op53_op55_op56_op57_op58.snodes[3] =
op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 128})]
op57.unmet_dependencies = [MemoryDep('buf56', c0, {c0: 65536})]
op57.met_dependencies = []
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op57.group.device = cpu
op57.group.iteration = ((128,), (512,))
op57.sizes = ([128], [512])
buf56_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 65536, 1])
buf57_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
class op57_loop_body:
    var_ranges = {p0: 128, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf57', get_index_1, reduction)
        return store_reduction
op53_op55_op56_op57_op58.snodes[4] =
op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 65536})]
op58.unmet_dependencies = [MemoryDep('buf56', c0, {c0: 65536}), MemoryDep('buf57', c0, {c0: 128})]
op58.met_dependencies = []
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 512, 1])
    buf58.users = [
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op58.group.device = cpu
op58.group.iteration = ((128, 512), ())
op58.sizes = ([128, 512], [])
buf56_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 65536, 1])
buf57_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
buf58_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 512, 1])
class op58_loop_body:
    var_ranges = {p0: 128, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf57', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf58', get_index_2, truediv, None)
        return store


op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 2097152})]
op146.unmet_dependencies = [MemoryDep('buf52', 16384*c0 + c2 + 32*c3, {c0: 16, c1: 8, c2: 32, c3: 512})]
op146.met_dependencies = []
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 32, 512], stride=[131072, 16384, 512, 1])
    buf146.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op146.group.device = cpu
op146.group.iteration = ((16, 8, 32, 512), ())
op146.sizes = ([16, 8, 32, 512], [])
buf52_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
buf146_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 32, 512], stride=[131072, 16384, 512, 1])
class op146_loop_body:
    var_ranges = {p0: 16, p1: 8, p2: 32, p3: 512}
    index0 = 16384*p0 + p2 + 32*p3
    index1 = 131072*p0 + 16384*p1 + 512*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf146', get_index_1, load, None)
        return store


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', 131328*c0 + c1, {c0: 16, c1: 131072})]
op44.unmet_dependencies = []
op44.met_dependencies = [MemoryDep('primals_31', c0, {c0: 2097152})]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = NonOwningLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131328, 256, 1])
    buf44.aliases = ['buf46']
    buf44.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op44.group.device = cpu
op44.group.iteration = ((16, 131072), ())
op44.sizes = ([16, 131072], [])
primals_31_layout = FixedLayout('cpu', torch.float16, size=[16, 512, 256], stride=[131072, 256, 1])
buf44_layout = NonOwningLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131328, 256, 1])
class op44_loop_body:
    var_ranges = {p0: 16, p1: 131072}
    index0 = 131072*p0 + p1
    index1 = 131328*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_31', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf44', get_index_1, to_dtype, None)
        return store


op46: NopKernelSchedulerNode(ConcatKernel)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf44', mode=None), StarDep(name='buf45', mode=None)]
op46.met_dependencies = []
op46.outputs = [
    buf46: ConcatKernel
    buf46.layout = FixedLayout('cpu', torch.float32, size=[16, 513, 256], stride=[131328, 256, 1])
    buf46.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 4096})]
op59.unmet_dependencies = 
    [   MemoryDep('buf46', c1 + 32*c2 + 131328*((c0//8)) + 131328*(((c1 + 32*c2 + 16384*(ModularIndexing(c0, 1, 8)))//131072)) + 16384*(ModularIndexing(c0, 1, 8)) + 256, {c0: 128, c1: 32, c2: 512}),
        MemoryDep('buf58', 512*c0 + c2, {c0: 128, c1: 32, c2: 512})]
op59.met_dependencies = []
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cpu', torch.float32, size=[128, 1, 32], stride=[32, 32, 1])
    buf59.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False)]
]
op59.group.device = cpu
op59.group.iteration = ((128, 32), (512,))
op59.sizes = ([128, 32], [512])
buf58_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 512, 1])
buf46_layout = FixedLayout('cpu', torch.float32, size=[16, 513, 256], stride=[131328, 256, 1])
buf59_layout = FixedLayout('cpu', torch.float32, size=[128, 1, 32], stride=[32, 32, 1])
class op59_loop_body:
    var_ranges = {p0: 128, p1: 32, p2: 512}
    index0 = 512*p0 + p2
    index1 = p1 + 32*p2 + 131328*((p0//8)) + 131328*(((p1 + 32*p2 + 16384*(ModularIndexing(p0, 1, 8)))//131072)) + 16384*(ModularIndexing(p0, 1, 8)) + 256
    index2 = 32*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf46', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf59', get_index_2, reduction)
        return store_reduction


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 4096})]
op60.unmet_dependencies = [MemoryDep('buf34', c0, {c0: 4096}), MemoryDep('buf59', c0, {c0: 4096})]
op60.met_dependencies = []
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf60.users = [
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op60.group.device = cpu
op60.group.iteration = ((4096,), ())
op60.sizes = ([4096], [])
buf59_layout = FixedLayout('cpu', torch.float32, size=[128, 1, 32], stride=[32, 32, 1])
buf34_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
buf60_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
class op60_loop_body:
    var_ranges = {p0: 4096}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf34', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf60', get_index_2, add, None)
        return store


op61_op62_op63: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op61_op62_op63.writes = 
    [   MemoryDep('buf61', c0, {c0: 16}),
        MemoryDep('buf62', c0, {c0: 16}),
        MemoryDep('buf63', c0, {c0: 4096})]
op61_op62_op63.unmet_dependencies = [MemoryDep('buf60', c0, {c0: 4096})]
op61_op62_op63.met_dependencies = [MemoryDep('primals_35', c1, {c0: 16, c1: 256})]
op61_op62_op63.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
    buf61.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False)]
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
    buf62.users = [
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf63.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op61_op62_op63.snodes[0] =
op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 16})]
op61.unmet_dependencies = [MemoryDep('buf60', c0, {c0: 4096})]
op61.met_dependencies = []
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
    buf61.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False)]
]
op61.group.device = cpu
op61.group.iteration = ((16,), (256,))
op61.sizes = ([16], [256])
buf60_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
buf61_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
class op61_loop_body:
    var_ranges = {p0: 16, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf61', get_index_1, reduction)
        return store_reduction
op61_op62_op63.snodes[1] =
op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 16})]
op62.unmet_dependencies = [MemoryDep('buf61', c0, {c0: 16})]
op62.met_dependencies = []
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
    buf62.users = [
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op62.group.device = cpu
op62.group.iteration = ((16,), ())
op62.sizes = ([16], [])
buf61_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
buf62_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
class op62_loop_body:
    var_ranges = {p0: 16}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.1920928955078125e-07, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf62', get_index_1, rsqrt, None)
        return store
op61_op62_op63.snodes[2] =
op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 4096})]
op63.unmet_dependencies = [MemoryDep('buf60', c0, {c0: 4096}), MemoryDep('buf62', c0, {c0: 16})]
op63.met_dependencies = [MemoryDep('primals_35', c1, {c0: 16, c1: 256})]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf63.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op63.group.device = cpu
op63.group.iteration = ((16, 256), ())
op63.sizes = ([16, 256], [])
buf60_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
buf62_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
primals_35_layout = FixedLayout('cpu', torch.float32, size=[256], stride=[1])
buf63_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
class op63_loop_body:
    var_ranges = {p0: 16, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf62', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_35', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf63', get_index_3, mul_1, None)
        return store


op64: ExternKernelSchedulerNode(ExternKernelOut)
op64.writes = [StarDep(name='buf64', mode=None)]
op64.unmet_dependencies = [StarDep(name='buf63', mode=None)]
op64.met_dependencies = [StarDep(name='primals_36', mode=None), StarDep(name='primals_37', mode=None)]
op64.outputs = [
    buf64: ExternKernelOut
    buf64.layout = FixedLayout('cpu', torch.float32, size=[16, 682], stride=[682, 1])
    buf64.users = [
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op64.node.kernel = extern_kernels.addmm


op65: ExternKernelSchedulerNode(ExternKernelOut)
op65.writes = [StarDep(name='buf65', mode=None)]
op65.unmet_dependencies = [StarDep(name='buf63', mode=None)]
op65.met_dependencies = [StarDep(name='primals_38', mode=None), StarDep(name='primals_39', mode=None)]
op65.outputs = [
    buf65: ExternKernelOut
    buf65.layout = FixedLayout('cpu', torch.float32, size=[16, 682], stride=[682, 1])
    buf65.users = [
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op65.node.kernel = extern_kernels.addmm


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 10912})]
op66.unmet_dependencies = [MemoryDep('buf64', c0, {c0: 10912}), MemoryDep('buf65', c0, {c0: 10912})]
op66.met_dependencies = []
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 682], stride=[682, 682, 1])
    buf66.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op66.group.device = cpu
op66.group.iteration = ((10912,), ())
op66.sizes = ([10912], [])
buf64_layout = FixedLayout('cpu', torch.float32, size=[16, 682], stride=[682, 1])
buf65_layout = FixedLayout('cpu', torch.float32, size=[16, 682], stride=[682, 1])
buf66_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 682], stride=[682, 682, 1])
class op66_loop_body:
    var_ranges = {p0: 10912}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf64', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf65', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf66', get_index_3, mul_1, None)
        return store


op67: ExternKernelSchedulerNode(ExternKernelOut)
op67.writes = [StarDep(name='buf67', mode=None)]
op67.unmet_dependencies = [StarDep(name='buf66', mode=None)]
op67.met_dependencies = [StarDep(name='primals_40', mode=None), StarDep(name='primals_41', mode=None)]
op67.outputs = [
    buf67: ExternKernelOut
    buf67.layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
    buf67.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False)]
]
op67.node.kernel = extern_kernels.addmm


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 4096})]
op68.unmet_dependencies = [MemoryDep('buf63', c0, {c0: 4096}), MemoryDep('buf67', c0, {c0: 4096})]
op68.met_dependencies = []
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf68.users = [
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op68.group.device = cpu
op68.group.iteration = ((4096,), ())
op68.sizes = ([4096], [])
buf67_layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
buf63_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
buf68_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
class op68_loop_body:
    var_ranges = {p0: 4096}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf63', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf68', get_index_2, add, None)
        return store


op69_op70_op71: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op69_op70_op71.writes = 
    [   MemoryDep('buf69', c0, {c0: 16}),
        MemoryDep('buf70', c0, {c0: 16}),
        MemoryDep('buf71', c0, {c0: 4096})]
op69_op70_op71.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 4096})]
op69_op70_op71.met_dependencies = [MemoryDep('primals_42', c1, {c0: 16, c1: 256})]
op69_op70_op71.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
    buf69.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False)]
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
    buf70.users = [
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf71.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op69_op70_op71.snodes[0] =
op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 16})]
op69.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 4096})]
op69.met_dependencies = []
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
    buf69.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False)]
]
op69.group.device = cpu
op69.group.iteration = ((16,), (256,))
op69.sizes = ([16], [256])
buf68_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
buf69_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
class op69_loop_body:
    var_ranges = {p0: 16, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf69', get_index_1, reduction)
        return store_reduction
op69_op70_op71.snodes[1] =
op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 16})]
op70.unmet_dependencies = [MemoryDep('buf69', c0, {c0: 16})]
op70.met_dependencies = []
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
    buf70.users = [
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op70.group.device = cpu
op70.group.iteration = ((16,), ())
op70.sizes = ([16], [])
buf69_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
buf70_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
class op70_loop_body:
    var_ranges = {p0: 16}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.1920928955078125e-07, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf70', get_index_1, rsqrt, None)
        return store
op69_op70_op71.snodes[2] =
op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 4096})]
op71.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 4096}), MemoryDep('buf70', c0, {c0: 16})]
op71.met_dependencies = [MemoryDep('primals_42', c1, {c0: 16, c1: 256})]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf71.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op71.group.device = cpu
op71.group.iteration = ((16, 256), ())
op71.sizes = ([16, 256], [])
buf68_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
buf70_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
primals_42_layout = FixedLayout('cpu', torch.float32, size=[256], stride=[1])
buf71_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
class op71_loop_body:
    var_ranges = {p0: 16, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf70', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_42', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf71', get_index_3, mul_1, None)
        return store


op73: ExternKernelSchedulerNode(ExternKernelOut)
op73.writes = [StarDep(name='buf73', mode=None)]
op73.unmet_dependencies = [StarDep(name='buf71', mode=None)]
op73.met_dependencies = [StarDep(name='primals_45', mode=None), StarDep(name='primals_46', mode=None)]
op73.outputs = [
    buf73: ExternKernelOut
    buf73.layout = FixedLayout('cpu', torch.float32, size=[16, 32], stride=[32, 1])
    buf73.users = [NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False)]
]
op73.node.kernel = extern_kernels.addmm


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', 16416*c0 + c1, {c0: 16, c1: 32})]
op76.unmet_dependencies = [MemoryDep('buf73', c0, {c0: 512})]
op76.met_dependencies = []
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 32], stride=[16416, 32, 1])
    buf76.aliases = ['buf77']
    buf76.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op76.group.device = cpu
op76.group.iteration = ((16, 32), ())
op76.sizes = ([16, 32], [])
buf73_layout = FixedLayout('cpu', torch.float32, size=[16, 32], stride=[32, 1])
buf76_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 32], stride=[16416, 32, 1])
class op76_loop_body:
    var_ranges = {p0: 16, p1: 32}
    index0 = 32*p0 + p1
    index1 = 16416*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf76', get_index_1, load, None)
        return store


op77: NopKernelSchedulerNode(ConcatKernel)
op77.writes = [StarDep(name='buf77', mode=None)]
op77.unmet_dependencies = [StarDep(name='buf75', mode=None), StarDep(name='buf76', mode=None)]
op77.met_dependencies = []
op77.outputs = [
    buf77: ConcatKernel
    buf77.layout = FixedLayout('cpu', torch.float32, size=[16, 513, 32], stride=[16416, 32, 1])
    buf77.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]


op72: ExternKernelSchedulerNode(ExternKernelOut)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf71', mode=None)]
op72.met_dependencies = [StarDep(name='primals_43', mode=None), StarDep(name='primals_44', mode=None)]
op72.outputs = [
    buf72: ExternKernelOut
    buf72.layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
    buf72.users = [
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
    ]
]
op72.node.kernel = extern_kernels.addmm


op81_op82: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op81_op82.writes = [MemoryDep('buf81', 2*c0, {c0: 2048}), MemoryDep('buf82', 2*c0, {c0: 2048})]
op81_op82.unmet_dependencies = [MemoryDep('buf72', 2*c0 + 1, {c0: 2048}), MemoryDep('buf72', 2*c0, {c0: 2048})]
op81_op82.met_dependencies = 
    [   MemoryDep('primals_51', 2*c1 + 32, {c0: 128, c1: 16}),
        MemoryDep('primals_52', 2*c1 + 32, {c0: 128, c1: 16})]
op81_op82.outputs = [
    buf81: ComputedBuffer
    buf81.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 1, 16, 1], stride=[256, 32, 32, 2, 1])
    buf81.aliases = ['buf83']
    buf81.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf82: ComputedBuffer
    buf82.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 1, 16, 1], stride=[256, 32, 32, 2, 1])
    buf82.aliases = ['buf83']
    buf82.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op81_op82.snodes[0] =
op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', 2*c0, {c0: 2048})]
op81.unmet_dependencies = [MemoryDep('buf72', 2*c0 + 1, {c0: 2048}), MemoryDep('buf72', 2*c0, {c0: 2048})]
op81.met_dependencies = 
    [   MemoryDep('primals_51', 2*c1 + 32, {c0: 128, c1: 16}),
        MemoryDep('primals_52', 2*c1 + 32, {c0: 128, c1: 16})]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 1, 16, 1], stride=[256, 32, 32, 2, 1])
    buf81.aliases = ['buf83']
    buf81.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op81.group.device = cpu
op81.group.iteration = ((128, 16), ())
op81.sizes = ([128, 16], [])
buf72_layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
primals_51_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf72_layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
primals_52_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf81_layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 1, 16, 1], stride=[256, 32, 32, 2, 1])
class op81_loop_body:
    var_ranges = {p0: 128, p1: 16}
    index0 = 32*p0 + 2*p1
    index1 = 2*p1 + 32
    index2 = 32*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_51', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf72', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_52', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        sub = ops.sub(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf81', get_index_4, sub, None)
        return store
op81_op82.snodes[1] =
op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', 2*c0, {c0: 2048})]
op82.unmet_dependencies = [MemoryDep('buf72', 2*c0 + 1, {c0: 2048}), MemoryDep('buf72', 2*c0, {c0: 2048})]
op82.met_dependencies = 
    [   MemoryDep('primals_51', 2*c1 + 32, {c0: 128, c1: 16}),
        MemoryDep('primals_52', 2*c1 + 32, {c0: 128, c1: 16})]
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 1, 16, 1], stride=[256, 32, 32, 2, 1])
    buf82.aliases = ['buf83']
    buf82.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op82.group.device = cpu
op82.group.iteration = ((128, 16), ())
op82.sizes = ([128, 16], [])
buf72_layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
primals_52_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf72_layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
primals_51_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf82_layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 1, 16, 1], stride=[256, 32, 32, 2, 1])
class op82_loop_body:
    var_ranges = {p0: 128, p1: 16}
    index0 = 32*p0 + 2*p1
    index1 = 2*p1 + 32
    index2 = 32*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_52', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf72', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_51', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf82', get_index_4, add, None)
        return store


op83: NopKernelSchedulerNode(ConcatKernel)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf81', mode=None), StarDep(name='buf82', mode=None)]
op83.met_dependencies = []
op83.outputs = [
    buf83: ConcatKernel
    buf83.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 16, 2], stride=[256, 32, 32, 2, 1])
    buf83.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]


op74: ExternKernelSchedulerNode(ExternKernelOut)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = [StarDep(name='buf71', mode=None)]
op74.met_dependencies = [StarDep(name='primals_47', mode=None), StarDep(name='primals_48', mode=None)]
op74.outputs = [
    buf74: ExternKernelOut
    buf74.layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
    buf74.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op74.node.kernel = extern_kernels.addmm


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', 131328*c0 + c1, {c0: 16, c1: 256})]
op79.unmet_dependencies = [MemoryDep('buf74', c0, {c0: 4096})]
op79.met_dependencies = []
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 256], stride=[131328, 256, 1])
    buf79.aliases = ['buf80']
    buf79.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op79.group.device = cpu
op79.group.iteration = ((16, 256), ())
op79.sizes = ([16, 256], [])
buf74_layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
buf79_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 256], stride=[131328, 256, 1])
class op79_loop_body:
    var_ranges = {p0: 16, p1: 256}
    index0 = 256*p0 + p1
    index1 = 131328*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf79', get_index_1, load, None)
        return store


op84_op85: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op84_op85.writes = [MemoryDep('buf84', 2*c0, {c0: 131072}), MemoryDep('buf85', 2*c0, {c0: 131072})]
op84_op85.unmet_dependencies = 
    [   MemoryDep('buf77', 16416*c0 + 2*c1 + 32, {c0: 16, c1: 8192}),
        MemoryDep('buf77', 16416*c0 + 2*c1 + 33, {c0: 16, c1: 8192})]
op84_op85.met_dependencies = 
    [   MemoryDep('primals_51', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_52', 2*c1, {c0: 16, c1: 8192})]
op84_op85.outputs = [
    buf84: ComputedBuffer
    buf84.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf84.aliases = ['buf86']
    buf84.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
    ]
    buf85: ComputedBuffer
    buf85.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf85.aliases = ['buf86']
    buf85.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
    ]
]
op84_op85.snodes[0] =
op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', 2*c0, {c0: 131072})]
op84.unmet_dependencies = 
    [   MemoryDep('buf77', 16416*c0 + 2*c1 + 32, {c0: 16, c1: 8192}),
        MemoryDep('buf77', 16416*c0 + 2*c1 + 33, {c0: 16, c1: 8192})]
op84.met_dependencies = 
    [   MemoryDep('primals_51', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_52', 2*c1, {c0: 16, c1: 8192})]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf84.aliases = ['buf86']
    buf84.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
    ]
]
op84.group.device = cpu
op84.group.iteration = ((16, 8192), ())
op84.sizes = ([16, 8192], [])
buf77_layout = FixedLayout('cpu', torch.float32, size=[16, 513, 32], stride=[16416, 32, 1])
primals_51_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf77_layout = FixedLayout('cpu', torch.float32, size=[16, 513, 32], stride=[16416, 32, 1])
primals_52_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf84_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
class op84_loop_body:
    var_ranges = {p0: 16, p1: 8192}
    index0 = 16416*p0 + 2*p1 + 32
    index1 = 2*p1
    index2 = 16416*p0 + 2*p1 + 33
    index3 = 16384*p0 + 2*p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_51', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf77', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_52', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        sub = ops.sub(mul, mul_1)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf84', get_index_4, sub, None)
        return store
op84_op85.snodes[1] =
op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', 2*c0, {c0: 131072})]
op85.unmet_dependencies = 
    [   MemoryDep('buf77', 16416*c0 + 2*c1 + 32, {c0: 16, c1: 8192}),
        MemoryDep('buf77', 16416*c0 + 2*c1 + 33, {c0: 16, c1: 8192})]
op85.met_dependencies = 
    [   MemoryDep('primals_51', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_52', 2*c1, {c0: 16, c1: 8192})]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf85.aliases = ['buf86']
    buf85.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
    ]
]
op85.group.device = cpu
op85.group.iteration = ((16, 8192), ())
op85.sizes = ([16, 8192], [])
buf77_layout = FixedLayout('cpu', torch.float32, size=[16, 513, 32], stride=[16416, 32, 1])
primals_52_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf77_layout = FixedLayout('cpu', torch.float32, size=[16, 513, 32], stride=[16416, 32, 1])
primals_51_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf85_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
class op85_loop_body:
    var_ranges = {p0: 16, p1: 8192}
    index0 = 16416*p0 + 2*p1 + 32
    index1 = 2*p1
    index2 = 16416*p0 + 2*p1 + 33
    index3 = 16384*p0 + 2*p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_52', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf77', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_51', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf85', get_index_4, add, None)
        return store


op86: NopKernelSchedulerNode(ConcatKernel)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf84', mode=None), StarDep(name='buf85', mode=None)]
op86.met_dependencies = []
op86.outputs = [
    buf86: ConcatKernel
    buf86.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
    buf86.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
    ]
]


op87_op89_op90_op91_op92: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op87_op89_op90_op91_op92.writes = 
    [   MemoryDep('buf87', c0, {c0: 65536}),
        MemoryDep('buf89', c0, {c0: 128}),
        MemoryDep('buf90', c0, {c0: 65536}),
        MemoryDep('buf91', c0, {c0: 128}),
        MemoryDep('buf92', c0, {c0: 65536})]
op87_op89_op90_op91_op92.unmet_dependencies = 
    [   MemoryDep('buf83', 32*c0 + c2, {c0: 128, c1: 512, c2: 32}),
        MemoryDep('buf86', c1 + 16384*((c0//8)), {c0: 128, c1: 16384}),
        MemoryDep('buf88', c1, {c0: 128, c1: 512})]
op87_op89_op90_op91_op92.met_dependencies = []
op87_op89_op90_op91_op92.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cpu', torch.float32, size=[128, 1, 512], stride=[512, 512, 1])
    buf87.users = [
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=True, is_weak=False),
    ]
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
    buf89.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 65536, 1])
    buf90.users = [
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
    ]
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
    buf91.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 512, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op87_op89_op90_op91_op92.snodes[0] =
op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 65536})]
op87.unmet_dependencies = 
    [   MemoryDep('buf83', 32*c0 + c2, {c0: 128, c1: 512, c2: 32}),
        MemoryDep('buf86', c1 + 16384*((c0//8)), {c0: 128, c1: 16384})]
op87.met_dependencies = []
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cpu', torch.float32, size=[128, 1, 512], stride=[512, 512, 1])
    buf87.users = [
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=True, is_weak=False),
    ]
]
op87.group.device = cpu
op87.group.iteration = ((128, 512), (32,))
op87.sizes = ([128, 512], [32])
buf83_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 16, 2], stride=[256, 32, 32, 2, 1])
buf86_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
buf87_layout = FixedLayout('cpu', torch.float32, size=[128, 1, 512], stride=[512, 512, 1])
class op87_loop_body:
    var_ranges = {p0: 128, p1: 512, p2: 32}
    index0 = 32*p0 + p2
    index1 = 32*p1 + p2 + 16384*((p0//8))
    index2 = 512*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf86', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf87', get_index_2, reduction)
        return store_reduction
op87_op89_op90_op91_op92.snodes[1] =
op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 128})]
op89.unmet_dependencies = 
    [   MemoryDep('buf87', c0, {c0: 65536}),
        MemoryDep('buf88', c1, {c0: 128, c1: 512})]
op89.met_dependencies = []
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
    buf89.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op89.group.device = cpu
op89.group.iteration = ((128,), (512,))
op89.sizes = ([128], [512])
buf88_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 1, 512], stride=[512, 512, 512, 1])
buf87_layout = FixedLayout('cpu', torch.float32, size=[128, 1, 512], stride=[512, 512, 1])
buf89_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
class op89_loop_body:
    var_ranges = {p0: 128, p1: 512}
    index0 = p1
    index1 = 512*p0 + p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf87', get_index_1)
        constant = ops.constant(0.17677669529663687, torch.float32)
        mul = ops.mul(load_1, constant)
        constant_1 = ops.constant(-inf, torch.float32)
        where = ops.where(load, constant_1, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf89', get_index_2, reduction)
        return store_reduction
op87_op89_op90_op91_op92.snodes[2] =
op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 65536})]
op90.unmet_dependencies = 
    [   MemoryDep('buf87', c0, {c0: 65536}),
        MemoryDep('buf88', c1, {c0: 128, c1: 512}),
        MemoryDep('buf89', c0, {c0: 128})]
op90.met_dependencies = []
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 65536, 1])
    buf90.users = [
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
    ]
]
op90.group.device = cpu
op90.group.iteration = ((128, 512), ())
op90.sizes = ([128, 512], [])
buf88_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 1, 512], stride=[512, 512, 512, 1])
buf87_layout = FixedLayout('cpu', torch.float32, size=[128, 1, 512], stride=[512, 512, 1])
buf89_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
buf90_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 65536, 1])
class op90_loop_body:
    var_ranges = {p0: 128, p1: 512}
    index0 = p1
    index1 = 512*p0 + p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf87', get_index_1)
        constant = ops.constant(0.17677669529663687, torch.float32)
        mul = ops.mul(load_1, constant)
        constant_1 = ops.constant(-inf, torch.float32)
        where = ops.where(load, constant_1, mul)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf89', get_index_2)
        sub = ops.sub(where, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf90', get_index_3, exp, None)
        return store
op87_op89_op90_op91_op92.snodes[3] =
op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 128})]
op91.unmet_dependencies = [MemoryDep('buf90', c0, {c0: 65536})]
op91.met_dependencies = []
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
    buf91.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op91.group.device = cpu
op91.group.iteration = ((128,), (512,))
op91.sizes = ([128], [512])
buf90_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 65536, 1])
buf91_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
class op91_loop_body:
    var_ranges = {p0: 128, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf91', get_index_1, reduction)
        return store_reduction
op87_op89_op90_op91_op92.snodes[4] =
op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 65536})]
op92.unmet_dependencies = [MemoryDep('buf90', c0, {c0: 65536}), MemoryDep('buf91', c0, {c0: 128})]
op92.met_dependencies = []
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 512, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op92.group.device = cpu
op92.group.iteration = ((128, 512), ())
op92.sizes = ([128, 512], [])
buf90_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 65536, 1])
buf91_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
buf92_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 512, 1])
class op92_loop_body:
    var_ranges = {p0: 128, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf91', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf92', get_index_2, truediv, None)
        return store


op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 2097152})]
op144.unmet_dependencies = [MemoryDep('buf86', 16384*c0 + c2 + 32*c3, {c0: 16, c1: 8, c2: 32, c3: 512})]
op144.met_dependencies = []
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 32, 512], stride=[131072, 16384, 512, 1])
    buf144.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op144.group.device = cpu
op144.group.iteration = ((16, 8, 32, 512), ())
op144.sizes = ([16, 8, 32, 512], [])
buf86_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
buf144_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 32, 512], stride=[131072, 16384, 512, 1])
class op144_loop_body:
    var_ranges = {p0: 16, p1: 8, p2: 32, p3: 512}
    index0 = 16384*p0 + p2 + 32*p3
    index1 = 131072*p0 + 16384*p1 + 512*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf144', get_index_1, load, None)
        return store


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', 131328*c0 + c1, {c0: 16, c1: 131072})]
op78.unmet_dependencies = []
op78.met_dependencies = [MemoryDep('primals_50', c0, {c0: 2097152})]
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = NonOwningLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131328, 256, 1])
    buf78.aliases = ['buf80']
    buf78.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op78.group.device = cpu
op78.group.iteration = ((16, 131072), ())
op78.sizes = ([16, 131072], [])
primals_50_layout = FixedLayout('cpu', torch.float16, size=[16, 512, 256], stride=[131072, 256, 1])
buf78_layout = NonOwningLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131328, 256, 1])
class op78_loop_body:
    var_ranges = {p0: 16, p1: 131072}
    index0 = 131072*p0 + p1
    index1 = 131328*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_50', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf78', get_index_1, to_dtype, None)
        return store


op80: NopKernelSchedulerNode(ConcatKernel)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf78', mode=None), StarDep(name='buf79', mode=None)]
op80.met_dependencies = []
op80.outputs = [
    buf80: ConcatKernel
    buf80.layout = FixedLayout('cpu', torch.float32, size=[16, 513, 256], stride=[131328, 256, 1])
    buf80.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 4096})]
op93.unmet_dependencies = 
    [   MemoryDep('buf80', c1 + 32*c2 + 131328*((c0//8)) + 131328*(((c1 + 32*c2 + 16384*(ModularIndexing(c0, 1, 8)))//131072)) + 16384*(ModularIndexing(c0, 1, 8)) + 256, {c0: 128, c1: 32, c2: 512}),
        MemoryDep('buf92', 512*c0 + c2, {c0: 128, c1: 32, c2: 512})]
op93.met_dependencies = []
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cpu', torch.float32, size=[128, 1, 32], stride=[32, 32, 1])
    buf93.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False)]
]
op93.group.device = cpu
op93.group.iteration = ((128, 32), (512,))
op93.sizes = ([128, 32], [512])
buf92_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 512, 1])
buf80_layout = FixedLayout('cpu', torch.float32, size=[16, 513, 256], stride=[131328, 256, 1])
buf93_layout = FixedLayout('cpu', torch.float32, size=[128, 1, 32], stride=[32, 32, 1])
class op93_loop_body:
    var_ranges = {p0: 128, p1: 32, p2: 512}
    index0 = 512*p0 + p2
    index1 = p1 + 32*p2 + 131328*((p0//8)) + 131328*(((p1 + 32*p2 + 16384*(ModularIndexing(p0, 1, 8)))//131072)) + 16384*(ModularIndexing(p0, 1, 8)) + 256
    index2 = 32*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf80', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf93', get_index_2, reduction)
        return store_reduction


op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 4096})]
op94.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 4096}), MemoryDep('buf93', c0, {c0: 4096})]
op94.met_dependencies = []
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf94.users = [
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op94.group.device = cpu
op94.group.iteration = ((4096,), ())
op94.sizes = ([4096], [])
buf93_layout = FixedLayout('cpu', torch.float32, size=[128, 1, 32], stride=[32, 32, 1])
buf68_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
buf94_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
class op94_loop_body:
    var_ranges = {p0: 4096}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf68', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf94', get_index_2, add, None)
        return store


op95_op96_op97: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op95_op96_op97.writes = 
    [   MemoryDep('buf95', c0, {c0: 16}),
        MemoryDep('buf96', c0, {c0: 16}),
        MemoryDep('buf97', c0, {c0: 4096})]
op95_op96_op97.unmet_dependencies = [MemoryDep('buf94', c0, {c0: 4096})]
op95_op96_op97.met_dependencies = [MemoryDep('primals_54', c1, {c0: 16, c1: 256})]
op95_op96_op97.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
    buf95.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False)]
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
    buf96.users = [
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf97.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op95_op96_op97.snodes[0] =
op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 16})]
op95.unmet_dependencies = [MemoryDep('buf94', c0, {c0: 4096})]
op95.met_dependencies = []
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
    buf95.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False)]
]
op95.group.device = cpu
op95.group.iteration = ((16,), (256,))
op95.sizes = ([16], [256])
buf94_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
buf95_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
class op95_loop_body:
    var_ranges = {p0: 16, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf95', get_index_1, reduction)
        return store_reduction
op95_op96_op97.snodes[1] =
op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 16})]
op96.unmet_dependencies = [MemoryDep('buf95', c0, {c0: 16})]
op96.met_dependencies = []
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
    buf96.users = [
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op96.group.device = cpu
op96.group.iteration = ((16,), ())
op96.sizes = ([16], [])
buf95_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
buf96_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
class op96_loop_body:
    var_ranges = {p0: 16}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.1920928955078125e-07, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf96', get_index_1, rsqrt, None)
        return store
op95_op96_op97.snodes[2] =
op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 4096})]
op97.unmet_dependencies = [MemoryDep('buf94', c0, {c0: 4096}), MemoryDep('buf96', c0, {c0: 16})]
op97.met_dependencies = [MemoryDep('primals_54', c1, {c0: 16, c1: 256})]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf97.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op97.group.device = cpu
op97.group.iteration = ((16, 256), ())
op97.sizes = ([16, 256], [])
buf94_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
buf96_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
primals_54_layout = FixedLayout('cpu', torch.float32, size=[256], stride=[1])
buf97_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
class op97_loop_body:
    var_ranges = {p0: 16, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf96', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_54', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf97', get_index_3, mul_1, None)
        return store


op98: ExternKernelSchedulerNode(ExternKernelOut)
op98.writes = [StarDep(name='buf98', mode=None)]
op98.unmet_dependencies = [StarDep(name='buf97', mode=None)]
op98.met_dependencies = [StarDep(name='primals_55', mode=None), StarDep(name='primals_56', mode=None)]
op98.outputs = [
    buf98: ExternKernelOut
    buf98.layout = FixedLayout('cpu', torch.float32, size=[16, 682], stride=[682, 1])
    buf98.users = [
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op98.node.kernel = extern_kernels.addmm


op99: ExternKernelSchedulerNode(ExternKernelOut)
op99.writes = [StarDep(name='buf99', mode=None)]
op99.unmet_dependencies = [StarDep(name='buf97', mode=None)]
op99.met_dependencies = [StarDep(name='primals_57', mode=None), StarDep(name='primals_58', mode=None)]
op99.outputs = [
    buf99: ExternKernelOut
    buf99.layout = FixedLayout('cpu', torch.float32, size=[16, 682], stride=[682, 1])
    buf99.users = [
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op99.node.kernel = extern_kernels.addmm


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 10912})]
op100.unmet_dependencies = [MemoryDep('buf98', c0, {c0: 10912}), MemoryDep('buf99', c0, {c0: 10912})]
op100.met_dependencies = []
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 682], stride=[682, 682, 1])
    buf100.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op100.group.device = cpu
op100.group.iteration = ((10912,), ())
op100.sizes = ([10912], [])
buf98_layout = FixedLayout('cpu', torch.float32, size=[16, 682], stride=[682, 1])
buf99_layout = FixedLayout('cpu', torch.float32, size=[16, 682], stride=[682, 1])
buf100_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 682], stride=[682, 682, 1])
class op100_loop_body:
    var_ranges = {p0: 10912}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf98', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf99', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf100', get_index_3, mul_1, None)
        return store


op101: ExternKernelSchedulerNode(ExternKernelOut)
op101.writes = [StarDep(name='buf101', mode=None)]
op101.unmet_dependencies = [StarDep(name='buf100', mode=None)]
op101.met_dependencies = [StarDep(name='primals_59', mode=None), StarDep(name='primals_60', mode=None)]
op101.outputs = [
    buf101: ExternKernelOut
    buf101.layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
    buf101.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False)]
]
op101.node.kernel = extern_kernels.addmm


op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 4096})]
op102.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 4096}), MemoryDep('buf97', c0, {c0: 4096})]
op102.met_dependencies = []
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf102.users = [
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op102.group.device = cpu
op102.group.iteration = ((4096,), ())
op102.sizes = ([4096], [])
buf101_layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
buf97_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
buf102_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
class op102_loop_body:
    var_ranges = {p0: 4096}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf97', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf102', get_index_2, add, None)
        return store


op103_op104_op105: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op103_op104_op105.writes = 
    [   MemoryDep('buf103', c0, {c0: 16}),
        MemoryDep('buf104', c0, {c0: 16}),
        MemoryDep('buf105', c0, {c0: 4096})]
op103_op104_op105.unmet_dependencies = [MemoryDep('buf102', c0, {c0: 4096})]
op103_op104_op105.met_dependencies = [MemoryDep('primals_61', c1, {c0: 16, c1: 256})]
op103_op104_op105.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
    buf103.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False)]
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
    buf104.users = [
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf105.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op103_op104_op105.snodes[0] =
op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 16})]
op103.unmet_dependencies = [MemoryDep('buf102', c0, {c0: 4096})]
op103.met_dependencies = []
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
    buf103.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False)]
]
op103.group.device = cpu
op103.group.iteration = ((16,), (256,))
op103.sizes = ([16], [256])
buf102_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
buf103_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
class op103_loop_body:
    var_ranges = {p0: 16, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf103', get_index_1, reduction)
        return store_reduction
op103_op104_op105.snodes[1] =
op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 16})]
op104.unmet_dependencies = [MemoryDep('buf103', c0, {c0: 16})]
op104.met_dependencies = []
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
    buf104.users = [
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op104.group.device = cpu
op104.group.iteration = ((16,), ())
op104.sizes = ([16], [])
buf103_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
buf104_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
class op104_loop_body:
    var_ranges = {p0: 16}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.1920928955078125e-07, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf104', get_index_1, rsqrt, None)
        return store
op103_op104_op105.snodes[2] =
op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 4096})]
op105.unmet_dependencies = [MemoryDep('buf102', c0, {c0: 4096}), MemoryDep('buf104', c0, {c0: 16})]
op105.met_dependencies = [MemoryDep('primals_61', c1, {c0: 16, c1: 256})]
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf105.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op105.group.device = cpu
op105.group.iteration = ((16, 256), ())
op105.sizes = ([16, 256], [])
buf102_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
buf104_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
primals_61_layout = FixedLayout('cpu', torch.float32, size=[256], stride=[1])
buf105_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
class op105_loop_body:
    var_ranges = {p0: 16, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf104', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_61', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf105', get_index_3, mul_1, None)
        return store


op107: ExternKernelSchedulerNode(ExternKernelOut)
op107.writes = [StarDep(name='buf107', mode=None)]
op107.unmet_dependencies = [StarDep(name='buf105', mode=None)]
op107.met_dependencies = [StarDep(name='primals_64', mode=None), StarDep(name='primals_65', mode=None)]
op107.outputs = [
    buf107: ExternKernelOut
    buf107.layout = FixedLayout('cpu', torch.float32, size=[16, 32], stride=[32, 1])
    buf107.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op107.node.kernel = extern_kernels.addmm


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', 16416*c0 + c1, {c0: 16, c1: 32})]
op110.unmet_dependencies = [MemoryDep('buf107', c0, {c0: 512})]
op110.met_dependencies = []
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 32], stride=[16416, 32, 1])
    buf110.aliases = ['buf111']
    buf110.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op110.group.device = cpu
op110.group.iteration = ((16, 32), ())
op110.sizes = ([16, 32], [])
buf107_layout = FixedLayout('cpu', torch.float32, size=[16, 32], stride=[32, 1])
buf110_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 32], stride=[16416, 32, 1])
class op110_loop_body:
    var_ranges = {p0: 16, p1: 32}
    index0 = 32*p0 + p1
    index1 = 16416*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf107', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf110', get_index_1, load, None)
        return store


op111: NopKernelSchedulerNode(ConcatKernel)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf109', mode=None), StarDep(name='buf110', mode=None)]
op111.met_dependencies = []
op111.outputs = [
    buf111: ConcatKernel
    buf111.layout = FixedLayout('cpu', torch.float32, size=[16, 513, 32], stride=[16416, 32, 1])
    buf111.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]


op106: ExternKernelSchedulerNode(ExternKernelOut)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf105', mode=None)]
op106.met_dependencies = [StarDep(name='primals_62', mode=None), StarDep(name='primals_63', mode=None)]
op106.outputs = [
    buf106: ExternKernelOut
    buf106.layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
    buf106.users = [
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
    ]
]
op106.node.kernel = extern_kernels.addmm


op115_op116: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op115_op116.writes = [MemoryDep('buf115', 2*c0, {c0: 2048}), MemoryDep('buf116', 2*c0, {c0: 2048})]
op115_op116.unmet_dependencies = 
    [   MemoryDep('buf106', 2*c0 + 1, {c0: 2048}),
        MemoryDep('buf106', 2*c0, {c0: 2048})]
op115_op116.met_dependencies = 
    [   MemoryDep('primals_70', 2*c1 + 32, {c0: 128, c1: 16}),
        MemoryDep('primals_71', 2*c1 + 32, {c0: 128, c1: 16})]
op115_op116.outputs = [
    buf115: ComputedBuffer
    buf115.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 1, 16, 1], stride=[256, 32, 32, 2, 1])
    buf115.aliases = ['buf117']
    buf115.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf116: ComputedBuffer
    buf116.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 1, 16, 1], stride=[256, 32, 32, 2, 1])
    buf116.aliases = ['buf117']
    buf116.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op115_op116.snodes[0] =
op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', 2*c0, {c0: 2048})]
op115.unmet_dependencies = 
    [   MemoryDep('buf106', 2*c0 + 1, {c0: 2048}),
        MemoryDep('buf106', 2*c0, {c0: 2048})]
op115.met_dependencies = 
    [   MemoryDep('primals_70', 2*c1 + 32, {c0: 128, c1: 16}),
        MemoryDep('primals_71', 2*c1 + 32, {c0: 128, c1: 16})]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 1, 16, 1], stride=[256, 32, 32, 2, 1])
    buf115.aliases = ['buf117']
    buf115.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op115.group.device = cpu
op115.group.iteration = ((128, 16), ())
op115.sizes = ([128, 16], [])
buf106_layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
primals_70_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf106_layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
primals_71_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf115_layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 1, 16, 1], stride=[256, 32, 32, 2, 1])
class op115_loop_body:
    var_ranges = {p0: 128, p1: 16}
    index0 = 32*p0 + 2*p1
    index1 = 2*p1 + 32
    index2 = 32*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_70', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf106', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_71', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        sub = ops.sub(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf115', get_index_4, sub, None)
        return store
op115_op116.snodes[1] =
op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', 2*c0, {c0: 2048})]
op116.unmet_dependencies = 
    [   MemoryDep('buf106', 2*c0 + 1, {c0: 2048}),
        MemoryDep('buf106', 2*c0, {c0: 2048})]
op116.met_dependencies = 
    [   MemoryDep('primals_70', 2*c1 + 32, {c0: 128, c1: 16}),
        MemoryDep('primals_71', 2*c1 + 32, {c0: 128, c1: 16})]
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 1, 16, 1], stride=[256, 32, 32, 2, 1])
    buf116.aliases = ['buf117']
    buf116.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op116.group.device = cpu
op116.group.iteration = ((128, 16), ())
op116.sizes = ([128, 16], [])
buf106_layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
primals_71_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf106_layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
primals_70_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf116_layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 1, 16, 1], stride=[256, 32, 32, 2, 1])
class op116_loop_body:
    var_ranges = {p0: 128, p1: 16}
    index0 = 32*p0 + 2*p1
    index1 = 2*p1 + 32
    index2 = 32*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_71', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf106', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_70', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf116', get_index_4, add, None)
        return store


op117: NopKernelSchedulerNode(ConcatKernel)
op117.writes = [StarDep(name='buf117', mode=None)]
op117.unmet_dependencies = [StarDep(name='buf115', mode=None), StarDep(name='buf116', mode=None)]
op117.met_dependencies = []
op117.outputs = [
    buf117: ConcatKernel
    buf117.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 16, 2], stride=[256, 32, 32, 2, 1])
    buf117.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]


op108: ExternKernelSchedulerNode(ExternKernelOut)
op108.writes = [StarDep(name='buf108', mode=None)]
op108.unmet_dependencies = [StarDep(name='buf105', mode=None)]
op108.met_dependencies = [StarDep(name='primals_66', mode=None), StarDep(name='primals_67', mode=None)]
op108.outputs = [
    buf108: ExternKernelOut
    buf108.layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
    buf108.users = [NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op108.node.kernel = extern_kernels.addmm


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', 131328*c0 + c1, {c0: 16, c1: 256})]
op113.unmet_dependencies = [MemoryDep('buf108', c0, {c0: 4096})]
op113.met_dependencies = []
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 256], stride=[131328, 256, 1])
    buf113.aliases = ['buf114']
    buf113.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op113.group.device = cpu
op113.group.iteration = ((16, 256), ())
op113.sizes = ([16, 256], [])
buf108_layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
buf113_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 256], stride=[131328, 256, 1])
class op113_loop_body:
    var_ranges = {p0: 16, p1: 256}
    index0 = 256*p0 + p1
    index1 = 131328*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf113', get_index_1, load, None)
        return store


op118_op119: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op118_op119.writes = 
    [   MemoryDep('buf118', 2*c0, {c0: 131072}),
        MemoryDep('buf119', 2*c0, {c0: 131072})]
op118_op119.unmet_dependencies = 
    [   MemoryDep('buf111', 16416*c0 + 2*c1 + 32, {c0: 16, c1: 8192}),
        MemoryDep('buf111', 16416*c0 + 2*c1 + 33, {c0: 16, c1: 8192})]
op118_op119.met_dependencies = 
    [   MemoryDep('primals_70', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_71', 2*c1, {c0: 16, c1: 8192})]
op118_op119.outputs = [
    buf118: ComputedBuffer
    buf118.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf118.aliases = ['buf120']
    buf118.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
    buf119: ComputedBuffer
    buf119.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf119.aliases = ['buf120']
    buf119.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
]
op118_op119.snodes[0] =
op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', 2*c0, {c0: 131072})]
op118.unmet_dependencies = 
    [   MemoryDep('buf111', 16416*c0 + 2*c1 + 32, {c0: 16, c1: 8192}),
        MemoryDep('buf111', 16416*c0 + 2*c1 + 33, {c0: 16, c1: 8192})]
op118.met_dependencies = 
    [   MemoryDep('primals_70', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_71', 2*c1, {c0: 16, c1: 8192})]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf118.aliases = ['buf120']
    buf118.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
]
op118.group.device = cpu
op118.group.iteration = ((16, 8192), ())
op118.sizes = ([16, 8192], [])
buf111_layout = FixedLayout('cpu', torch.float32, size=[16, 513, 32], stride=[16416, 32, 1])
primals_70_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf111_layout = FixedLayout('cpu', torch.float32, size=[16, 513, 32], stride=[16416, 32, 1])
primals_71_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf118_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
class op118_loop_body:
    var_ranges = {p0: 16, p1: 8192}
    index0 = 16416*p0 + 2*p1 + 32
    index1 = 2*p1
    index2 = 16416*p0 + 2*p1 + 33
    index3 = 16384*p0 + 2*p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_70', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf111', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_71', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        sub = ops.sub(mul, mul_1)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf118', get_index_4, sub, None)
        return store
op118_op119.snodes[1] =
op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', 2*c0, {c0: 131072})]
op119.unmet_dependencies = 
    [   MemoryDep('buf111', 16416*c0 + 2*c1 + 32, {c0: 16, c1: 8192}),
        MemoryDep('buf111', 16416*c0 + 2*c1 + 33, {c0: 16, c1: 8192})]
op119.met_dependencies = 
    [   MemoryDep('primals_70', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_71', 2*c1, {c0: 16, c1: 8192})]
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf119.aliases = ['buf120']
    buf119.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
]
op119.group.device = cpu
op119.group.iteration = ((16, 8192), ())
op119.sizes = ([16, 8192], [])
buf111_layout = FixedLayout('cpu', torch.float32, size=[16, 513, 32], stride=[16416, 32, 1])
primals_71_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf111_layout = FixedLayout('cpu', torch.float32, size=[16, 513, 32], stride=[16416, 32, 1])
primals_70_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf119_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
class op119_loop_body:
    var_ranges = {p0: 16, p1: 8192}
    index0 = 16416*p0 + 2*p1 + 32
    index1 = 2*p1
    index2 = 16416*p0 + 2*p1 + 33
    index3 = 16384*p0 + 2*p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_71', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf111', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_70', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf119', get_index_4, add, None)
        return store


op120: NopKernelSchedulerNode(ConcatKernel)
op120.writes = [StarDep(name='buf120', mode=None)]
op120.unmet_dependencies = [StarDep(name='buf118', mode=None), StarDep(name='buf119', mode=None)]
op120.met_dependencies = []
op120.outputs = [
    buf120: ConcatKernel
    buf120.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
    buf120.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
]


op121_op123_op124_op125_op126: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op121_op123_op124_op125_op126.writes = 
    [   MemoryDep('buf121', c0, {c0: 65536}),
        MemoryDep('buf123', c0, {c0: 128}),
        MemoryDep('buf124', c0, {c0: 65536}),
        MemoryDep('buf125', c0, {c0: 128}),
        MemoryDep('buf126', c0, {c0: 65536})]
op121_op123_op124_op125_op126.unmet_dependencies = 
    [   MemoryDep('buf117', 32*c0 + c2, {c0: 128, c1: 512, c2: 32}),
        MemoryDep('buf120', c1 + 16384*((c0//8)), {c0: 128, c1: 16384}),
        MemoryDep('buf122', c1, {c0: 128, c1: 512})]
op121_op123_op124_op125_op126.met_dependencies = []
op121_op123_op124_op125_op126.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cpu', torch.float32, size=[128, 1, 512], stride=[512, 512, 1])
    buf121.users = [
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False),
    ]
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
    buf123.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 65536, 1])
    buf124.users = [
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False),
    ]
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
    buf125.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 512, 1])
    buf126.users = [
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op121_op123_op124_op125_op126.snodes[0] =
op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 65536})]
op121.unmet_dependencies = 
    [   MemoryDep('buf117', 32*c0 + c2, {c0: 128, c1: 512, c2: 32}),
        MemoryDep('buf120', c1 + 16384*((c0//8)), {c0: 128, c1: 16384})]
op121.met_dependencies = []
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cpu', torch.float32, size=[128, 1, 512], stride=[512, 512, 1])
    buf121.users = [
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False),
    ]
]
op121.group.device = cpu
op121.group.iteration = ((128, 512), (32,))
op121.sizes = ([128, 512], [32])
buf117_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 16, 2], stride=[256, 32, 32, 2, 1])
buf120_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
buf121_layout = FixedLayout('cpu', torch.float32, size=[128, 1, 512], stride=[512, 512, 1])
class op121_loop_body:
    var_ranges = {p0: 128, p1: 512, p2: 32}
    index0 = 32*p0 + p2
    index1 = 32*p1 + p2 + 16384*((p0//8))
    index2 = 512*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf120', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf121', get_index_2, reduction)
        return store_reduction
op121_op123_op124_op125_op126.snodes[1] =
op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 128})]
op123.unmet_dependencies = 
    [   MemoryDep('buf121', c0, {c0: 65536}),
        MemoryDep('buf122', c1, {c0: 128, c1: 512})]
op123.met_dependencies = []
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
    buf123.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op123.group.device = cpu
op123.group.iteration = ((128,), (512,))
op123.sizes = ([128], [512])
buf122_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 1, 512], stride=[512, 512, 512, 1])
buf121_layout = FixedLayout('cpu', torch.float32, size=[128, 1, 512], stride=[512, 512, 1])
buf123_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
class op123_loop_body:
    var_ranges = {p0: 128, p1: 512}
    index0 = p1
    index1 = 512*p0 + p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf121', get_index_1)
        constant = ops.constant(0.17677669529663687, torch.float32)
        mul = ops.mul(load_1, constant)
        constant_1 = ops.constant(-inf, torch.float32)
        where = ops.where(load, constant_1, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf123', get_index_2, reduction)
        return store_reduction
op121_op123_op124_op125_op126.snodes[2] =
op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 65536})]
op124.unmet_dependencies = 
    [   MemoryDep('buf121', c0, {c0: 65536}),
        MemoryDep('buf122', c1, {c0: 128, c1: 512}),
        MemoryDep('buf123', c0, {c0: 128})]
op124.met_dependencies = []
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 65536, 1])
    buf124.users = [
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False),
    ]
]
op124.group.device = cpu
op124.group.iteration = ((128, 512), ())
op124.sizes = ([128, 512], [])
buf122_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 1, 512], stride=[512, 512, 512, 1])
buf121_layout = FixedLayout('cpu', torch.float32, size=[128, 1, 512], stride=[512, 512, 1])
buf123_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
buf124_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 65536, 1])
class op124_loop_body:
    var_ranges = {p0: 128, p1: 512}
    index0 = p1
    index1 = 512*p0 + p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf121', get_index_1)
        constant = ops.constant(0.17677669529663687, torch.float32)
        mul = ops.mul(load_1, constant)
        constant_1 = ops.constant(-inf, torch.float32)
        where = ops.where(load, constant_1, mul)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf123', get_index_2)
        sub = ops.sub(where, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf124', get_index_3, exp, None)
        return store
op121_op123_op124_op125_op126.snodes[3] =
op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 128})]
op125.unmet_dependencies = [MemoryDep('buf124', c0, {c0: 65536})]
op125.met_dependencies = []
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
    buf125.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op125.group.device = cpu
op125.group.iteration = ((128,), (512,))
op125.sizes = ([128], [512])
buf124_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 65536, 1])
buf125_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
class op125_loop_body:
    var_ranges = {p0: 128, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf125', get_index_1, reduction)
        return store_reduction
op121_op123_op124_op125_op126.snodes[4] =
op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 65536})]
op126.unmet_dependencies = [MemoryDep('buf124', c0, {c0: 65536}), MemoryDep('buf125', c0, {c0: 128})]
op126.met_dependencies = []
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 512, 1])
    buf126.users = [
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op126.group.device = cpu
op126.group.iteration = ((128, 512), ())
op126.sizes = ([128, 512], [])
buf124_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 65536, 1])
buf125_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 1], stride=[8, 1, 128, 128])
buf126_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 512, 1])
class op126_loop_body:
    var_ranges = {p0: 128, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf125', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf126', get_index_2, truediv, None)
        return store


op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 2097152})]
op142.unmet_dependencies = [MemoryDep('buf120', 16384*c0 + c2 + 32*c3, {c0: 16, c1: 8, c2: 32, c3: 512})]
op142.met_dependencies = []
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 32, 512], stride=[131072, 16384, 512, 1])
    buf142.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op142.group.device = cpu
op142.group.iteration = ((16, 8, 32, 512), ())
op142.sizes = ([16, 8, 32, 512], [])
buf120_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
buf142_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 32, 512], stride=[131072, 16384, 512, 1])
class op142_loop_body:
    var_ranges = {p0: 16, p1: 8, p2: 32, p3: 512}
    index0 = 16384*p0 + p2 + 32*p3
    index1 = 131072*p0 + 16384*p1 + 512*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf142', get_index_1, load, None)
        return store


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', 131328*c0 + c1, {c0: 16, c1: 131072})]
op112.unmet_dependencies = []
op112.met_dependencies = [MemoryDep('primals_69', c0, {c0: 2097152})]
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = NonOwningLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131328, 256, 1])
    buf112.aliases = ['buf114']
    buf112.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op112.group.device = cpu
op112.group.iteration = ((16, 131072), ())
op112.sizes = ([16, 131072], [])
primals_69_layout = FixedLayout('cpu', torch.float16, size=[16, 512, 256], stride=[131072, 256, 1])
buf112_layout = NonOwningLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131328, 256, 1])
class op112_loop_body:
    var_ranges = {p0: 16, p1: 131072}
    index0 = 131072*p0 + p1
    index1 = 131328*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_69', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf112', get_index_1, to_dtype, None)
        return store


op114: NopKernelSchedulerNode(ConcatKernel)
op114.writes = [StarDep(name='buf114', mode=None)]
op114.unmet_dependencies = [StarDep(name='buf112', mode=None), StarDep(name='buf113', mode=None)]
op114.met_dependencies = []
op114.outputs = [
    buf114: ConcatKernel
    buf114.layout = FixedLayout('cpu', torch.float32, size=[16, 513, 256], stride=[131328, 256, 1])
    buf114.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]


op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 4096})]
op127.unmet_dependencies = 
    [   MemoryDep('buf114', c1 + 32*c2 + 131328*((c0//8)) + 131328*(((c1 + 32*c2 + 16384*(ModularIndexing(c0, 1, 8)))//131072)) + 16384*(ModularIndexing(c0, 1, 8)) + 256, {c0: 128, c1: 32, c2: 512}),
        MemoryDep('buf126', 512*c0 + c2, {c0: 128, c1: 32, c2: 512})]
op127.met_dependencies = []
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cpu', torch.float32, size=[128, 1, 32], stride=[32, 32, 1])
    buf127.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False)]
]
op127.group.device = cpu
op127.group.iteration = ((128, 32), (512,))
op127.sizes = ([128, 32], [512])
buf126_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 1, 512], stride=[4096, 512, 512, 1])
buf114_layout = FixedLayout('cpu', torch.float32, size=[16, 513, 256], stride=[131328, 256, 1])
buf127_layout = FixedLayout('cpu', torch.float32, size=[128, 1, 32], stride=[32, 32, 1])
class op127_loop_body:
    var_ranges = {p0: 128, p1: 32, p2: 512}
    index0 = 512*p0 + p2
    index1 = p1 + 32*p2 + 131328*((p0//8)) + 131328*(((p1 + 32*p2 + 16384*(ModularIndexing(p0, 1, 8)))//131072)) + 16384*(ModularIndexing(p0, 1, 8)) + 256
    index2 = 32*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf114', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf127', get_index_2, reduction)
        return store_reduction


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 4096})]
op128.unmet_dependencies = [MemoryDep('buf102', c0, {c0: 4096}), MemoryDep('buf127', c0, {c0: 4096})]
op128.met_dependencies = []
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf128.users = [
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op128.group.device = cpu
op128.group.iteration = ((4096,), ())
op128.sizes = ([4096], [])
buf127_layout = FixedLayout('cpu', torch.float32, size=[128, 1, 32], stride=[32, 32, 1])
buf102_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
buf128_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
class op128_loop_body:
    var_ranges = {p0: 4096}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf102', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf128', get_index_2, add, None)
        return store


op129_op130_op131: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op129_op130_op131.writes = 
    [   MemoryDep('buf129', c0, {c0: 16}),
        MemoryDep('buf130', c0, {c0: 16}),
        MemoryDep('buf131', c0, {c0: 4096})]
op129_op130_op131.unmet_dependencies = [MemoryDep('buf128', c0, {c0: 4096})]
op129_op130_op131.met_dependencies = [MemoryDep('primals_73', c1, {c0: 16, c1: 256})]
op129_op130_op131.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
    buf129.users = [NodeUser(node=SchedulerNode(name='op130'), can_inplace=True, is_weak=False)]
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
    buf130.users = [
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf131.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op129_op130_op131.snodes[0] =
op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 16})]
op129.unmet_dependencies = [MemoryDep('buf128', c0, {c0: 4096})]
op129.met_dependencies = []
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
    buf129.users = [NodeUser(node=SchedulerNode(name='op130'), can_inplace=True, is_weak=False)]
]
op129.group.device = cpu
op129.group.iteration = ((16,), (256,))
op129.sizes = ([16], [256])
buf128_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
buf129_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
class op129_loop_body:
    var_ranges = {p0: 16, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf129', get_index_1, reduction)
        return store_reduction
op129_op130_op131.snodes[1] =
op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 16})]
op130.unmet_dependencies = [MemoryDep('buf129', c0, {c0: 16})]
op130.met_dependencies = []
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
    buf130.users = [
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op130.group.device = cpu
op130.group.iteration = ((16,), ())
op130.sizes = ([16], [])
buf129_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
buf130_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
class op130_loop_body:
    var_ranges = {p0: 16}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.1920928955078125e-07, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf130', get_index_1, rsqrt, None)
        return store
op129_op130_op131.snodes[2] =
op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 4096})]
op131.unmet_dependencies = [MemoryDep('buf128', c0, {c0: 4096}), MemoryDep('buf130', c0, {c0: 16})]
op131.met_dependencies = [MemoryDep('primals_73', c1, {c0: 16, c1: 256})]
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf131.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op131.group.device = cpu
op131.group.iteration = ((16, 256), ())
op131.sizes = ([16, 256], [])
buf128_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
buf130_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
primals_73_layout = FixedLayout('cpu', torch.float32, size=[256], stride=[1])
buf131_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
class op131_loop_body:
    var_ranges = {p0: 16, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf130', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_73', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf131', get_index_3, mul_1, None)
        return store


op132: ExternKernelSchedulerNode(ExternKernelOut)
op132.writes = [StarDep(name='buf132', mode=None)]
op132.unmet_dependencies = [StarDep(name='buf131', mode=None)]
op132.met_dependencies = [StarDep(name='primals_74', mode=None), StarDep(name='primals_75', mode=None)]
op132.outputs = [
    buf132: ExternKernelOut
    buf132.layout = FixedLayout('cpu', torch.float32, size=[16, 682], stride=[682, 1])
    buf132.users = [
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op132.node.kernel = extern_kernels.addmm


op133: ExternKernelSchedulerNode(ExternKernelOut)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf131', mode=None)]
op133.met_dependencies = [StarDep(name='primals_76', mode=None), StarDep(name='primals_77', mode=None)]
op133.outputs = [
    buf133: ExternKernelOut
    buf133.layout = FixedLayout('cpu', torch.float32, size=[16, 682], stride=[682, 1])
    buf133.users = [
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op133.node.kernel = extern_kernels.addmm


op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 10912})]
op134.unmet_dependencies = [MemoryDep('buf132', c0, {c0: 10912}), MemoryDep('buf133', c0, {c0: 10912})]
op134.met_dependencies = []
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 682], stride=[682, 682, 1])
    buf134.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op134.group.device = cpu
op134.group.iteration = ((10912,), ())
op134.sizes = ([10912], [])
buf132_layout = FixedLayout('cpu', torch.float32, size=[16, 682], stride=[682, 1])
buf133_layout = FixedLayout('cpu', torch.float32, size=[16, 682], stride=[682, 1])
buf134_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 682], stride=[682, 682, 1])
class op134_loop_body:
    var_ranges = {p0: 10912}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf132', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf133', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf134', get_index_3, mul_1, None)
        return store


op135: ExternKernelSchedulerNode(ExternKernelOut)
op135.writes = [StarDep(name='buf135', mode=None)]
op135.unmet_dependencies = [StarDep(name='buf134', mode=None)]
op135.met_dependencies = [StarDep(name='primals_78', mode=None), StarDep(name='primals_79', mode=None)]
op135.outputs = [
    buf135: ExternKernelOut
    buf135.layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
    buf135.users = [NodeUser(node=SchedulerNode(name='op136'), can_inplace=True, is_weak=False)]
]
op135.node.kernel = extern_kernels.addmm


op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', c0, {c0: 4096})]
op136.unmet_dependencies = [MemoryDep('buf131', c0, {c0: 4096}), MemoryDep('buf135', c0, {c0: 4096})]
op136.met_dependencies = []
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf136.users = [
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op136.group.device = cpu
op136.group.iteration = ((4096,), ())
op136.sizes = ([4096], [])
buf135_layout = FixedLayout('cpu', torch.float32, size=[16, 256], stride=[256, 1])
buf131_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
buf136_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
class op136_loop_body:
    var_ranges = {p0: 4096}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf131', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf136', get_index_2, add, None)
        return store


op137_op138_op139: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op137_op138_op139.writes = 
    [   MemoryDep('buf137', c0, {c0: 16}),
        MemoryDep('buf138', c0, {c0: 16}),
        MemoryDep('buf139', c0, {c0: 4096})]
op137_op138_op139.unmet_dependencies = [MemoryDep('buf136', c0, {c0: 4096})]
op137_op138_op139.met_dependencies = [MemoryDep('primals_80', c1, {c0: 16, c1: 256})]
op137_op138_op139.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
    buf137.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=True, is_weak=False)]
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
    buf138.users = [
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf139.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op137_op138_op139.snodes[0] =
op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 16})]
op137.unmet_dependencies = [MemoryDep('buf136', c0, {c0: 4096})]
op137.met_dependencies = []
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
    buf137.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=True, is_weak=False)]
]
op137.group.device = cpu
op137.group.iteration = ((16,), (256,))
op137.sizes = ([16], [256])
buf136_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
buf137_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
class op137_loop_body:
    var_ranges = {p0: 16, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf137', get_index_1, reduction)
        return store_reduction
op137_op138_op139.snodes[1] =
op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 16})]
op138.unmet_dependencies = [MemoryDep('buf137', c0, {c0: 16})]
op138.met_dependencies = []
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
    buf138.users = [
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op138.group.device = cpu
op138.group.iteration = ((16,), ())
op138.sizes = ([16], [])
buf137_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
buf138_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
class op138_loop_body:
    var_ranges = {p0: 16}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.1920928955078125e-07, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf138', get_index_1, rsqrt, None)
        return store
op137_op138_op139.snodes[2] =
op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 4096})]
op139.unmet_dependencies = [MemoryDep('buf136', c0, {c0: 4096}), MemoryDep('buf138', c0, {c0: 16})]
op139.met_dependencies = [MemoryDep('primals_80', c1, {c0: 16, c1: 256})]
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
    buf139.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op139.group.device = cpu
op139.group.iteration = ((16, 256), ())
op139.sizes = ([16, 256], [])
buf136_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
buf138_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 1, 1])
primals_80_layout = FixedLayout('cpu', torch.float32, size=[256], stride=[1])
buf139_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 256], stride=[256, 256, 1])
class op139_loop_body:
    var_ranges = {p0: 16, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf138', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_80', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf139', get_index_3, mul_1, None)
        return store


op140: ExternKernelSchedulerNode(ExternKernelOut)
op140.writes = [StarDep(name='buf140', mode=None)]
op140.unmet_dependencies = [StarDep(name='buf139', mode=None)]
op140.met_dependencies = [StarDep(name='primals_1', mode=None), StarDep(name='primals_81', mode=None)]
op140.outputs = [
    buf140: ExternKernelOut
    buf140.layout = FixedLayout('cpu', torch.float32, size=[16, 10000], stride=[10000, 1])
    buf140.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op140.node.kernel = extern_kernels.addmm


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 2097152})]
op141.unmet_dependencies = [MemoryDep('buf114', 131328*c0 + c1 + 256, {c0: 16, c1: 131072})]
op141.met_dependencies = []
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 32], stride=[131072, 16384, 32, 1])
    buf141.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op141.group.device = cpu
op141.group.iteration = ((16, 131072), ())
op141.sizes = ([16, 131072], [])
buf114_layout = FixedLayout('cpu', torch.float32, size=[16, 513, 256], stride=[131328, 256, 1])
buf141_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 32], stride=[131072, 16384, 32, 1])
class op141_loop_body:
    var_ranges = {p0: 16, p1: 131072}
    index0 = 131328*p0 + p1 + 256
    index1 = 131072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf141', get_index_1, load, None)
        return store


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 2097152})]
op143.unmet_dependencies = [MemoryDep('buf80', 131328*c0 + c1 + 256, {c0: 16, c1: 131072})]
op143.met_dependencies = []
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 32], stride=[131072, 16384, 32, 1])
    buf143.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op143.group.device = cpu
op143.group.iteration = ((16, 131072), ())
op143.sizes = ([16, 131072], [])
buf80_layout = FixedLayout('cpu', torch.float32, size=[16, 513, 256], stride=[131328, 256, 1])
buf143_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 32], stride=[131072, 16384, 32, 1])
class op143_loop_body:
    var_ranges = {p0: 16, p1: 131072}
    index0 = 131328*p0 + p1 + 256
    index1 = 131072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf143', get_index_1, load, None)
        return store


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 2097152})]
op145.unmet_dependencies = [MemoryDep('buf46', 131328*c0 + c1 + 256, {c0: 16, c1: 131072})]
op145.met_dependencies = []
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 32], stride=[131072, 16384, 32, 1])
    buf145.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op145.group.device = cpu
op145.group.iteration = ((16, 131072), ())
op145.sizes = ([16, 131072], [])
buf46_layout = FixedLayout('cpu', torch.float32, size=[16, 513, 256], stride=[131328, 256, 1])
buf145_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 32], stride=[131072, 16384, 32, 1])
class op145_loop_body:
    var_ranges = {p0: 16, p1: 131072}
    index0 = 131328*p0 + p1 + 256
    index1 = 131072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf145', get_index_1, load, None)
        return store


op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 2097152})]
op147.unmet_dependencies = [MemoryDep('buf12', 131328*c0 + c1 + 256, {c0: 16, c1: 131072})]
op147.met_dependencies = []
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 32], stride=[131072, 16384, 32, 1])
    buf147.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op147.group.device = cpu
op147.group.iteration = ((16, 131072), ())
op147.sizes = ([16, 131072], [])
buf12_layout = FixedLayout('cpu', torch.float32, size=[16, 513, 256], stride=[131328, 256, 1])
buf147_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 32], stride=[131072, 16384, 32, 1])
class op147_loop_body:
    var_ranges = {p0: 16, p1: 131072}
    index0 = 131328*p0 + p1 + 256
    index1 = 131072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf12', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf147', get_index_1, load, None)
        return store


