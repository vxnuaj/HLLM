op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 2097152})]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('primals_1', c1 + 256*tmp0, {c0: 8192, c1: 256}),
        MemoryDep('primals_2', c0, {c0: 8192})]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf0.users = [
        NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op0.group.device = cpu
op0.group.iteration = ((8192, 256), ())
op0.sizes = ([8192, 256], [])
primals_2_layout = FixedLayout('cpu', torch.int64, size=[16, 512], stride=[512, 1])
primals_1_layout = FixedLayout('cpu', torch.float32, size=[10000, 256], stride=[256, 1])
buf0_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op0_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = p0
    index1 = 256*indirect0 + p1
    index2 = 256*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_2', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1', get_index_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf0', get_index_2, load_1, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 8192})]
op1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 2097152})]
op1.met_dependencies = [MemoryDep('primals_3', c1, {c0: 16, c1: 131072})]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf1.users = [NodeUser(node=SchedulerNode(name='op2'), can_inplace=True, is_weak=False)]
]
op1.group.device = cpu
op1.group.iteration = ((16, 512), (256,))
op1.sizes = ([16, 512], [256])
buf0_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
primals_3_layout = FixedLayout('cpu', torch.float32, size=[1, 512, 256], stride=[131072, 256, 1])
buf1_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op1_loop_body:
    var_ranges = {p0: 16, p1: 512, p2: 256}
    index0 = 131072*p0 + 256*p1 + p2
    index1 = 256*p1 + p2
    index2 = 512*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_3', get_index_1)
        add = ops.add(load, load_1)
        mul = ops.mul(add, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1', get_index_2, reduction)
        return store_reduction


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 8192})]
op2.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 8192})]
op2.met_dependencies = []
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
    buf2.users = [
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2.group.device = cpu
op2.group.iteration = ((8192,), ())
op2.sizes = ([8192], [])
buf1_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf2_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
class op2_loop_body:
    var_ranges = {p0: 8192}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.1920928955078125e-07, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2', get_index_1, rsqrt, None)
        return store


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 2097152})]
op3.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 2097152}), MemoryDep('buf2', c0, {c0: 8192})]
op3.met_dependencies = 
    [   MemoryDep('primals_3', c1, {c0: 16, c1: 131072}),
        MemoryDep('primals_4', c1, {c0: 8192, c1: 256})]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf3.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op3.group.device = cpu
op3.group.iteration = ((16, 512, 256), ())
op3.sizes = ([16, 512, 256], [])
buf0_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
primals_3_layout = FixedLayout('cpu', torch.float32, size=[1, 512, 256], stride=[131072, 256, 1])
buf2_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
primals_4_layout = FixedLayout('cpu', torch.float32, size=[256], stride=[1])
buf3_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op3_loop_body:
    var_ranges = {p0: 16, p1: 512, p2: 256}
    index0 = 131072*p0 + 256*p1 + p2
    index1 = 256*p1 + p2
    index2 = 512*p0 + p1
    index3 = p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_3', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf2', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('primals_4', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf3', get_index_4, mul_1, None)
        return store


op4: ExternKernelSchedulerNode(ExternKernelOut)
op4.writes = [StarDep(name='buf4', mode=None)]
op4.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op4.met_dependencies = [StarDep(name='primals_5', mode=None), StarDep(name='primals_6', mode=None)]
op4.outputs = [
    buf4: ExternKernelOut
    buf4.layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
    buf4.users = [
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
    ]
]
op4.node.kernel = extern_kernels.addmm


op5: ExternKernelSchedulerNode(ExternKernelOut)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op5.met_dependencies = [StarDep(name='primals_7', mode=None), StarDep(name='primals_8', mode=None)]
op5.outputs = [
    buf5: ExternKernelOut
    buf5.layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
    buf5.users = [
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
]
op5.node.kernel = extern_kernels.addmm


op6: ExternKernelSchedulerNode(ExternKernelOut)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op6.met_dependencies = [StarDep(name='primals_10', mode=None), StarDep(name='primals_9', mode=None)]
op6.outputs = [
    buf6: ExternKernelOut
    buf6.layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
    buf6.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op6.node.kernel = extern_kernels.addmm


op7_op8: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op7_op8.writes = [MemoryDep('buf7', 2*c0, {c0: 1048576}), MemoryDep('buf8', 2*c0, {c0: 1048576})]
op7_op8.unmet_dependencies = 
    [   MemoryDep('buf4', 2*c0 + 1, {c0: 1048576}),
        MemoryDep('buf4', 2*c0, {c0: 1048576})]
op7_op8.met_dependencies = 
    [   MemoryDep('primals_11', 2*c1, {c0: 128, c1: 8192}),
        MemoryDep('primals_12', 2*c1, {c0: 128, c1: 8192})]
op7_op8.outputs = [
    buf7: ComputedBuffer
    buf7.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
    buf7.aliases = ['buf9']
    buf7.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf8: ComputedBuffer
    buf8.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
    buf8.aliases = ['buf9']
    buf8.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op7_op8.snodes[0] =
op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', 2*c0, {c0: 1048576})]
op7.unmet_dependencies = 
    [   MemoryDep('buf4', 2*c0 + 1, {c0: 1048576}),
        MemoryDep('buf4', 2*c0, {c0: 1048576})]
op7.met_dependencies = 
    [   MemoryDep('primals_11', 2*c1, {c0: 128, c1: 8192}),
        MemoryDep('primals_12', 2*c1, {c0: 128, c1: 8192})]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
    buf7.aliases = ['buf9']
    buf7.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op7.group.device = cpu
op7.group.iteration = ((128, 8192), ())
op7.sizes = ([128, 8192], [])
buf4_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_11_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf4_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_12_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf7_layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
class op7_loop_body:
    var_ranges = {p0: 128, p1: 8192}
    index0 = 16384*p0 + 2*p1
    index1 = 2*p1
    index2 = 16384*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_11', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf4', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_12', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        sub = ops.sub(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf7', get_index_4, sub, None)
        return store
op7_op8.snodes[1] =
op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', 2*c0, {c0: 1048576})]
op8.unmet_dependencies = 
    [   MemoryDep('buf4', 2*c0 + 1, {c0: 1048576}),
        MemoryDep('buf4', 2*c0, {c0: 1048576})]
op8.met_dependencies = 
    [   MemoryDep('primals_11', 2*c1, {c0: 128, c1: 8192}),
        MemoryDep('primals_12', 2*c1, {c0: 128, c1: 8192})]
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
    buf8.aliases = ['buf9']
    buf8.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op8.group.device = cpu
op8.group.iteration = ((128, 8192), ())
op8.sizes = ([128, 8192], [])
buf4_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_12_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf4_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_11_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf8_layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
class op8_loop_body:
    var_ranges = {p0: 128, p1: 8192}
    index0 = 16384*p0 + 2*p1
    index1 = 2*p1
    index2 = 16384*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_12', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf4', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_11', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf8', get_index_4, add, None)
        return store


op9: NopKernelSchedulerNode(ConcatKernel)
op9.writes = [StarDep(name='buf9', mode=None)]
op9.unmet_dependencies = [StarDep(name='buf7', mode=None), StarDep(name='buf8', mode=None)]
op9.met_dependencies = []
op9.outputs = [
    buf9: ConcatKernel
    buf9.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 16, 2], stride=[131072, 16384, 32, 2, 1])
    buf9.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]


op10_op11: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op10_op11.writes = [MemoryDep('buf10', 2*c0, {c0: 131072}), MemoryDep('buf11', 2*c0, {c0: 131072})]
op10_op11.unmet_dependencies = 
    [   MemoryDep('buf5', 2*c0 + 1, {c0: 131072}),
        MemoryDep('buf5', 2*c0, {c0: 131072})]
op10_op11.met_dependencies = 
    [   MemoryDep('primals_11', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_12', 2*c1, {c0: 16, c1: 8192})]
op10_op11.outputs = [
    buf10: ComputedBuffer
    buf10.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf10.aliases = ['buf12']
    buf10.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
    ]
    buf11: ComputedBuffer
    buf11.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf11.aliases = ['buf12']
    buf11.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
    ]
]
op10_op11.snodes[0] =
op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', 2*c0, {c0: 131072})]
op10.unmet_dependencies = 
    [   MemoryDep('buf5', 2*c0 + 1, {c0: 131072}),
        MemoryDep('buf5', 2*c0, {c0: 131072})]
op10.met_dependencies = 
    [   MemoryDep('primals_11', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_12', 2*c1, {c0: 16, c1: 8192})]
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf10.aliases = ['buf12']
    buf10.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
    ]
]
op10.group.device = cpu
op10.group.iteration = ((16, 8192), ())
op10.sizes = ([16, 8192], [])
buf5_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_11_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf5_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_12_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf10_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
class op10_loop_body:
    var_ranges = {p0: 16, p1: 8192}
    index0 = 16384*p0 + 2*p1
    index1 = 2*p1
    index2 = 16384*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_11', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf5', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_12', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        sub = ops.sub(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf10', get_index_4, sub, None)
        return store
op10_op11.snodes[1] =
op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', 2*c0, {c0: 131072})]
op11.unmet_dependencies = 
    [   MemoryDep('buf5', 2*c0 + 1, {c0: 131072}),
        MemoryDep('buf5', 2*c0, {c0: 131072})]
op11.met_dependencies = 
    [   MemoryDep('primals_11', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_12', 2*c1, {c0: 16, c1: 8192})]
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf11.aliases = ['buf12']
    buf11.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
    ]
]
op11.group.device = cpu
op11.group.iteration = ((16, 8192), ())
op11.sizes = ([16, 8192], [])
buf5_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_12_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf5_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_11_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf11_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
class op11_loop_body:
    var_ranges = {p0: 16, p1: 8192}
    index0 = 16384*p0 + 2*p1
    index1 = 2*p1
    index2 = 16384*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_12', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf5', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_11', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf11', get_index_4, add, None)
        return store


op12: NopKernelSchedulerNode(ConcatKernel)
op12.writes = [StarDep(name='buf12', mode=None)]
op12.unmet_dependencies = [StarDep(name='buf10', mode=None), StarDep(name='buf11', mode=None)]
op12.met_dependencies = []
op12.outputs = [
    buf12: ConcatKernel
    buf12.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
    buf12.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
    ]
]


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 2097152})]
op13.unmet_dependencies = [MemoryDep('buf12', 16384*c0 + c2 + 32*c3, {c0: 16, c1: 8, c2: 32, c3: 512})]
op13.met_dependencies = []
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 32, 512], stride=[131072, 16384, 512, 1])
    buf13.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op13.group.device = cpu
op13.group.iteration = ((16, 8, 32, 512), ())
op13.sizes = ([16, 8, 32, 512], [])
buf12_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
buf13_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 32, 512], stride=[131072, 16384, 512, 1])
class op13_loop_body:
    var_ranges = {p0: 16, p1: 8, p2: 32, p3: 512}
    index0 = 16384*p0 + p2 + 32*p3
    index1 = 131072*p0 + 16384*p1 + 512*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf12', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf13', get_index_1, load, None)
        return store


op14: ExternKernelSchedulerNode(ExternKernelOut)
op14.writes = [StarDep(name='buf14', mode=None)]
op14.unmet_dependencies = [StarDep(name='buf13', mode=None), StarDep(name='buf9', mode=None)]
op14.met_dependencies = []
op14.outputs = [
    buf14: ExternKernelOut
    buf14.layout = FixedLayout('cpu', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf14.users = [
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=True, is_weak=False),
    ]
]
op14.node.kernel = extern_kernels.bmm


op15_op16: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode)
op15_op16.writes = [MemoryDep('buf15', c0, {c0: 65536}), MemoryDep('buf16', c0, {c0: 33554432})]
op15_op16.unmet_dependencies = [MemoryDep('buf14', c0, {c0: 33554432})]
op15_op16.met_dependencies = [MemoryDep('primals_13', c1, {c0: 128, c1: 262144})]
op15_op16.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
    buf15.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
    buf16.users = [
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False),
    ]
]
op15_op16.snodes[0] =
op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 65536})]
op15.unmet_dependencies = [MemoryDep('buf14', c0, {c0: 33554432})]
op15.met_dependencies = [MemoryDep('primals_13', c1, {c0: 128, c1: 262144})]
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
    buf15.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op15.group.device = cpu
op15.group.iteration = ((128, 512), (512,))
op15.sizes = ([128, 512], [512])
primals_13_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 512, 512], stride=[262144, 262144, 512, 1])
buf14_layout = FixedLayout('cpu', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf15_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
class op15_loop_body:
    var_ranges = {p0: 128, p1: 512, p2: 512}
    index0 = 512*p1 + p2
    index1 = 262144*p0 + 512*p1 + p2
    index2 = 512*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_13', get_index)
        to_dtype = ops.to_dtype(load, torch.int64, src_dtype = torch.bool)
        constant = ops.constant(0, torch.int64)
        eq = ops.eq(to_dtype, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf14', get_index_1)
        constant_1 = ops.constant(0.17677669529663687, torch.float32)
        mul = ops.mul(load_1, constant_1)
        constant_2 = ops.constant(-inf, torch.float32)
        where = ops.where(eq, constant_2, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf15', get_index_2, reduction)
        return store_reduction
op15_op16.snodes[1] =
op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 33554432})]
op16.unmet_dependencies = [MemoryDep('buf14', c0, {c0: 33554432}), MemoryDep('buf15', c0, {c0: 65536})]
op16.met_dependencies = [MemoryDep('primals_13', c1, {c0: 128, c1: 262144})]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
    buf16.users = [
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False),
    ]
]
op16.group.device = cpu
op16.group.iteration = ((128, 512, 512), ())
op16.sizes = ([128, 512, 512], [])
primals_13_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 512, 512], stride=[262144, 262144, 512, 1])
buf14_layout = FixedLayout('cpu', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf15_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
buf16_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
class op16_loop_body:
    var_ranges = {p0: 128, p1: 512, p2: 512}
    index0 = 512*p1 + p2
    index1 = 262144*p0 + 512*p1 + p2
    index2 = 512*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_13', get_index)
        to_dtype = ops.to_dtype(load, torch.int64, src_dtype = torch.bool)
        constant = ops.constant(0, torch.int64)
        eq = ops.eq(to_dtype, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf14', get_index_1)
        constant_1 = ops.constant(0.17677669529663687, torch.float32)
        mul = ops.mul(load_1, constant_1)
        constant_2 = ops.constant(-inf, torch.float32)
        where = ops.where(eq, constant_2, mul)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf15', get_index_2)
        sub = ops.sub(where, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf16', get_index_3, exp, None)
        return store


op17_op18: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode)
op17_op18.writes = [MemoryDep('buf17', c0, {c0: 65536}), MemoryDep('buf18', c0, {c0: 33554432})]
op17_op18.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 33554432})]
op17_op18.met_dependencies = []
op17_op18.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
    buf17.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
    buf18.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op17_op18.snodes[0] =
op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 65536})]
op17.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 33554432})]
op17.met_dependencies = []
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
    buf17.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op17.group.device = cpu
op17.group.iteration = ((65536,), (512,))
op17.sizes = ([65536], [512])
buf16_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
buf17_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
class op17_loop_body:
    var_ranges = {p0: 65536, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf17', get_index_1, reduction)
        return store_reduction
op17_op18.snodes[1] =
op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 33554432})]
op18.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 33554432}), MemoryDep('buf17', c0, {c0: 65536})]
op18.met_dependencies = []
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
    buf18.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op18.group.device = cpu
op18.group.iteration = ((65536, 512), ())
op18.sizes = ([65536, 512], [])
buf16_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
buf17_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
buf18_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
class op18_loop_body:
    var_ranges = {p0: 65536, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf17', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf18', get_index_2, truediv, None)
        return store


op19: ExternKernelSchedulerNode(ExternKernelOut)
op19.writes = [StarDep(name='buf19', mode=None)]
op19.unmet_dependencies = [StarDep(name='buf18', mode=None), StarDep(name='buf6', mode=None)]
op19.met_dependencies = []
op19.outputs = [
    buf19: ExternKernelOut
    buf19.layout = FixedLayout('cpu', torch.float32, size=[128, 512, 32], stride=[16384, 32, 1])
    buf19.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False)]
]
op19.node.kernel = extern_kernels.bmm


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 2097152})]
op20.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 2097152}), MemoryDep('buf19', c0, {c0: 2097152})]
op20.met_dependencies = [MemoryDep('primals_3', c1, {c0: 16, c1: 131072})]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf20.users = [
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op20.group.device = cpu
op20.group.iteration = ((16, 131072), ())
op20.sizes = ([16, 131072], [])
buf19_layout = FixedLayout('cpu', torch.float32, size=[128, 512, 32], stride=[16384, 32, 1])
buf0_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
primals_3_layout = FixedLayout('cpu', torch.float32, size=[1, 512, 256], stride=[131072, 256, 1])
buf20_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op20_loop_body:
    var_ranges = {p0: 16, p1: 131072}
    index0 = 131072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf0', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_3', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf20', get_index_3, add_1, None)
        return store


op21_op22_op23: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op21_op22_op23.writes = 
    [   MemoryDep('buf21', c0, {c0: 8192}),
        MemoryDep('buf22', c0, {c0: 8192}),
        MemoryDep('buf23', c0, {c0: 2097152})]
op21_op22_op23.unmet_dependencies = [MemoryDep('buf20', c0, {c0: 2097152})]
op21_op22_op23.met_dependencies = [MemoryDep('primals_14', c1, {c0: 8192, c1: 256})]
op21_op22_op23.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf21.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False)]
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
    buf22.users = [
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf23.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op21_op22_op23.snodes[0] =
op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 8192})]
op21.unmet_dependencies = [MemoryDep('buf20', c0, {c0: 2097152})]
op21.met_dependencies = []
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf21.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False)]
]
op21.group.device = cpu
op21.group.iteration = ((8192,), (256,))
op21.sizes = ([8192], [256])
buf20_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf21_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op21_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf21', get_index_1, reduction)
        return store_reduction
op21_op22_op23.snodes[1] =
op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 8192})]
op22.unmet_dependencies = [MemoryDep('buf21', c0, {c0: 8192})]
op22.met_dependencies = []
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
    buf22.users = [
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op22.group.device = cpu
op22.group.iteration = ((8192,), ())
op22.sizes = ([8192], [])
buf21_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf22_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
class op22_loop_body:
    var_ranges = {p0: 8192}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.1920928955078125e-07, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf22', get_index_1, rsqrt, None)
        return store
op21_op22_op23.snodes[2] =
op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 2097152})]
op23.unmet_dependencies = [MemoryDep('buf20', c0, {c0: 2097152}), MemoryDep('buf22', c0, {c0: 8192})]
op23.met_dependencies = [MemoryDep('primals_14', c1, {c0: 8192, c1: 256})]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf23.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op23.group.device = cpu
op23.group.iteration = ((8192, 256), ())
op23.sizes = ([8192, 256], [])
buf20_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf22_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
primals_14_layout = FixedLayout('cpu', torch.float32, size=[256], stride=[1])
buf23_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op23_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_14', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf23', get_index_3, mul_1, None)
        return store


op24: ExternKernelSchedulerNode(ExternKernelOut)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf23', mode=None)]
op24.met_dependencies = [StarDep(name='primals_15', mode=None), StarDep(name='primals_16', mode=None)]
op24.outputs = [
    buf24: ExternKernelOut
    buf24.layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
    buf24.users = [
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op24.node.kernel = extern_kernels.addmm


op25: ExternKernelSchedulerNode(ExternKernelOut)
op25.writes = [StarDep(name='buf25', mode=None)]
op25.unmet_dependencies = [StarDep(name='buf23', mode=None)]
op25.met_dependencies = [StarDep(name='primals_17', mode=None), StarDep(name='primals_18', mode=None)]
op25.outputs = [
    buf25: ExternKernelOut
    buf25.layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
    buf25.users = [
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op25.node.kernel = extern_kernels.addmm


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 5586944})]
op26.unmet_dependencies = [MemoryDep('buf24', c0, {c0: 5586944}), MemoryDep('buf25', c0, {c0: 5586944})]
op26.met_dependencies = []
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 682], stride=[349184, 682, 1])
    buf26.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op26.group.device = cpu
op26.group.iteration = ((5586944,), ())
op26.sizes = ([5586944], [])
buf24_layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
buf25_layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
buf26_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 682], stride=[349184, 682, 1])
class op26_loop_body:
    var_ranges = {p0: 5586944}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf24', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf25', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf26', get_index_3, mul_1, None)
        return store


op27: ExternKernelSchedulerNode(ExternKernelOut)
op27.writes = [StarDep(name='buf27', mode=None)]
op27.unmet_dependencies = [StarDep(name='buf26', mode=None)]
op27.met_dependencies = [StarDep(name='primals_19', mode=None), StarDep(name='primals_20', mode=None)]
op27.outputs = [
    buf27: ExternKernelOut
    buf27.layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
    buf27.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False)]
]
op27.node.kernel = extern_kernels.addmm


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 2097152})]
op28.unmet_dependencies = [MemoryDep('buf23', c0, {c0: 2097152}), MemoryDep('buf27', c0, {c0: 2097152})]
op28.met_dependencies = []
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf28.users = [
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op28.group.device = cpu
op28.group.iteration = ((2097152,), ())
op28.sizes = ([2097152], [])
buf27_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
buf23_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf28_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op28_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf23', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf28', get_index_2, add, None)
        return store


op29_op30_op31: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op29_op30_op31.writes = 
    [   MemoryDep('buf29', c0, {c0: 8192}),
        MemoryDep('buf30', c0, {c0: 8192}),
        MemoryDep('buf31', c0, {c0: 2097152})]
op29_op30_op31.unmet_dependencies = [MemoryDep('buf28', c0, {c0: 2097152})]
op29_op30_op31.met_dependencies = [MemoryDep('primals_21', c1, {c0: 8192, c1: 256})]
op29_op30_op31.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf29.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=True, is_weak=False)]
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
    buf30.users = [
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf31.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op29_op30_op31.snodes[0] =
op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 8192})]
op29.unmet_dependencies = [MemoryDep('buf28', c0, {c0: 2097152})]
op29.met_dependencies = []
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf29.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=True, is_weak=False)]
]
op29.group.device = cpu
op29.group.iteration = ((8192,), (256,))
op29.sizes = ([8192], [256])
buf28_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf29_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op29_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf29', get_index_1, reduction)
        return store_reduction
op29_op30_op31.snodes[1] =
op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 8192})]
op30.unmet_dependencies = [MemoryDep('buf29', c0, {c0: 8192})]
op30.met_dependencies = []
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
    buf30.users = [
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op30.group.device = cpu
op30.group.iteration = ((8192,), ())
op30.sizes = ([8192], [])
buf29_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf30_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
class op30_loop_body:
    var_ranges = {p0: 8192}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.1920928955078125e-07, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf30', get_index_1, rsqrt, None)
        return store
op29_op30_op31.snodes[2] =
op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 2097152})]
op31.unmet_dependencies = [MemoryDep('buf28', c0, {c0: 2097152}), MemoryDep('buf30', c0, {c0: 8192})]
op31.met_dependencies = [MemoryDep('primals_21', c1, {c0: 8192, c1: 256})]
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf31.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op31.group.device = cpu
op31.group.iteration = ((8192, 256), ())
op31.sizes = ([8192, 256], [])
buf28_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf30_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
primals_21_layout = FixedLayout('cpu', torch.float32, size=[256], stride=[1])
buf31_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op31_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf30', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_21', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf31', get_index_3, mul_1, None)
        return store


op32: ExternKernelSchedulerNode(ExternKernelOut)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op32.met_dependencies = [StarDep(name='primals_22', mode=None), StarDep(name='primals_23', mode=None)]
op32.outputs = [
    buf32: ExternKernelOut
    buf32.layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
    buf32.users = [
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
    ]
]
op32.node.kernel = extern_kernels.addmm


op33: ExternKernelSchedulerNode(ExternKernelOut)
op33.writes = [StarDep(name='buf33', mode=None)]
op33.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op33.met_dependencies = [StarDep(name='primals_24', mode=None), StarDep(name='primals_25', mode=None)]
op33.outputs = [
    buf33: ExternKernelOut
    buf33.layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
    buf33.users = [
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False),
    ]
]
op33.node.kernel = extern_kernels.addmm


op34: ExternKernelSchedulerNode(ExternKernelOut)
op34.writes = [StarDep(name='buf34', mode=None)]
op34.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op34.met_dependencies = [StarDep(name='primals_26', mode=None), StarDep(name='primals_27', mode=None)]
op34.outputs = [
    buf34: ExternKernelOut
    buf34.layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
    buf34.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op34.node.kernel = extern_kernels.addmm


op35_op36: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op35_op36.writes = 
    [   MemoryDep('buf35', 2*c0, {c0: 1048576}),
        MemoryDep('buf36', 2*c0, {c0: 1048576})]
op35_op36.unmet_dependencies = 
    [   MemoryDep('buf32', 2*c0 + 1, {c0: 1048576}),
        MemoryDep('buf32', 2*c0, {c0: 1048576})]
op35_op36.met_dependencies = 
    [   MemoryDep('primals_28', 2*c1, {c0: 128, c1: 8192}),
        MemoryDep('primals_29', 2*c1, {c0: 128, c1: 8192})]
op35_op36.outputs = [
    buf35: ComputedBuffer
    buf35.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
    buf35.aliases = ['buf37']
    buf35.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf36: ComputedBuffer
    buf36.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
    buf36.aliases = ['buf37']
    buf36.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op35_op36.snodes[0] =
op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', 2*c0, {c0: 1048576})]
op35.unmet_dependencies = 
    [   MemoryDep('buf32', 2*c0 + 1, {c0: 1048576}),
        MemoryDep('buf32', 2*c0, {c0: 1048576})]
op35.met_dependencies = 
    [   MemoryDep('primals_28', 2*c1, {c0: 128, c1: 8192}),
        MemoryDep('primals_29', 2*c1, {c0: 128, c1: 8192})]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
    buf35.aliases = ['buf37']
    buf35.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op35.group.device = cpu
op35.group.iteration = ((128, 8192), ())
op35.sizes = ([128, 8192], [])
buf32_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_28_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf32_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_29_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf35_layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
class op35_loop_body:
    var_ranges = {p0: 128, p1: 8192}
    index0 = 16384*p0 + 2*p1
    index1 = 2*p1
    index2 = 16384*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_28', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf32', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_29', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        sub = ops.sub(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf35', get_index_4, sub, None)
        return store
op35_op36.snodes[1] =
op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', 2*c0, {c0: 1048576})]
op36.unmet_dependencies = 
    [   MemoryDep('buf32', 2*c0 + 1, {c0: 1048576}),
        MemoryDep('buf32', 2*c0, {c0: 1048576})]
op36.met_dependencies = 
    [   MemoryDep('primals_28', 2*c1, {c0: 128, c1: 8192}),
        MemoryDep('primals_29', 2*c1, {c0: 128, c1: 8192})]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
    buf36.aliases = ['buf37']
    buf36.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op36.group.device = cpu
op36.group.iteration = ((128, 8192), ())
op36.sizes = ([128, 8192], [])
buf32_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_29_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf32_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_28_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf36_layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
class op36_loop_body:
    var_ranges = {p0: 128, p1: 8192}
    index0 = 16384*p0 + 2*p1
    index1 = 2*p1
    index2 = 16384*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_29', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf32', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_28', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf36', get_index_4, add, None)
        return store


op37: NopKernelSchedulerNode(ConcatKernel)
op37.writes = [StarDep(name='buf37', mode=None)]
op37.unmet_dependencies = [StarDep(name='buf35', mode=None), StarDep(name='buf36', mode=None)]
op37.met_dependencies = []
op37.outputs = [
    buf37: ConcatKernel
    buf37.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 16, 2], stride=[131072, 16384, 32, 2, 1])
    buf37.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]


op38_op39: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op38_op39.writes = [MemoryDep('buf38', 2*c0, {c0: 131072}), MemoryDep('buf39', 2*c0, {c0: 131072})]
op38_op39.unmet_dependencies = 
    [   MemoryDep('buf33', 2*c0 + 1, {c0: 131072}),
        MemoryDep('buf33', 2*c0, {c0: 131072})]
op38_op39.met_dependencies = 
    [   MemoryDep('primals_28', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_29', 2*c1, {c0: 16, c1: 8192})]
op38_op39.outputs = [
    buf38: ComputedBuffer
    buf38.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf38.aliases = ['buf40']
    buf38.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
    ]
    buf39: ComputedBuffer
    buf39.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf39.aliases = ['buf40']
    buf39.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
    ]
]
op38_op39.snodes[0] =
op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', 2*c0, {c0: 131072})]
op38.unmet_dependencies = 
    [   MemoryDep('buf33', 2*c0 + 1, {c0: 131072}),
        MemoryDep('buf33', 2*c0, {c0: 131072})]
op38.met_dependencies = 
    [   MemoryDep('primals_28', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_29', 2*c1, {c0: 16, c1: 8192})]
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf38.aliases = ['buf40']
    buf38.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
    ]
]
op38.group.device = cpu
op38.group.iteration = ((16, 8192), ())
op38.sizes = ([16, 8192], [])
buf33_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_28_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf33_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_29_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf38_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
class op38_loop_body:
    var_ranges = {p0: 16, p1: 8192}
    index0 = 16384*p0 + 2*p1
    index1 = 2*p1
    index2 = 16384*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_28', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf33', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_29', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        sub = ops.sub(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf38', get_index_4, sub, None)
        return store
op38_op39.snodes[1] =
op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', 2*c0, {c0: 131072})]
op39.unmet_dependencies = 
    [   MemoryDep('buf33', 2*c0 + 1, {c0: 131072}),
        MemoryDep('buf33', 2*c0, {c0: 131072})]
op39.met_dependencies = 
    [   MemoryDep('primals_28', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_29', 2*c1, {c0: 16, c1: 8192})]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf39.aliases = ['buf40']
    buf39.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
    ]
]
op39.group.device = cpu
op39.group.iteration = ((16, 8192), ())
op39.sizes = ([16, 8192], [])
buf33_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_29_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf33_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_28_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf39_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
class op39_loop_body:
    var_ranges = {p0: 16, p1: 8192}
    index0 = 16384*p0 + 2*p1
    index1 = 2*p1
    index2 = 16384*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_29', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf33', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_28', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf39', get_index_4, add, None)
        return store


op40: NopKernelSchedulerNode(ConcatKernel)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf38', mode=None), StarDep(name='buf39', mode=None)]
op40.met_dependencies = []
op40.outputs = [
    buf40: ConcatKernel
    buf40.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
    buf40.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
    ]
]


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 2097152})]
op41.unmet_dependencies = [MemoryDep('buf40', 16384*c0 + c2 + 32*c3, {c0: 16, c1: 8, c2: 32, c3: 512})]
op41.met_dependencies = []
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 32, 512], stride=[131072, 16384, 512, 1])
    buf41.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op41.group.device = cpu
op41.group.iteration = ((16, 8, 32, 512), ())
op41.sizes = ([16, 8, 32, 512], [])
buf40_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
buf41_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 32, 512], stride=[131072, 16384, 512, 1])
class op41_loop_body:
    var_ranges = {p0: 16, p1: 8, p2: 32, p3: 512}
    index0 = 16384*p0 + p2 + 32*p3
    index1 = 131072*p0 + 16384*p1 + 512*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf41', get_index_1, load, None)
        return store


op42: ExternKernelSchedulerNode(ExternKernelOut)
op42.writes = [StarDep(name='buf42', mode=None)]
op42.unmet_dependencies = [StarDep(name='buf37', mode=None), StarDep(name='buf41', mode=None)]
op42.met_dependencies = []
op42.outputs = [
    buf42: ExternKernelOut
    buf42.layout = FixedLayout('cpu', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf42.users = [
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=True, is_weak=False),
    ]
]
op42.node.kernel = extern_kernels.bmm


op43_op44: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode)
op43_op44.writes = [MemoryDep('buf43', c0, {c0: 65536}), MemoryDep('buf44', c0, {c0: 33554432})]
op43_op44.unmet_dependencies = [MemoryDep('buf42', c0, {c0: 33554432})]
op43_op44.met_dependencies = [MemoryDep('primals_30', c1, {c0: 128, c1: 262144})]
op43_op44.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
    buf43.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
    buf44.users = [
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False),
    ]
]
op43_op44.snodes[0] =
op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 65536})]
op43.unmet_dependencies = [MemoryDep('buf42', c0, {c0: 33554432})]
op43.met_dependencies = [MemoryDep('primals_30', c1, {c0: 128, c1: 262144})]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
    buf43.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op43.group.device = cpu
op43.group.iteration = ((128, 512), (512,))
op43.sizes = ([128, 512], [512])
primals_30_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 512, 512], stride=[262144, 262144, 512, 1])
buf42_layout = FixedLayout('cpu', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf43_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
class op43_loop_body:
    var_ranges = {p0: 128, p1: 512, p2: 512}
    index0 = 512*p1 + p2
    index1 = 262144*p0 + 512*p1 + p2
    index2 = 512*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_30', get_index)
        to_dtype = ops.to_dtype(load, torch.int64, src_dtype = torch.bool)
        constant = ops.constant(0, torch.int64)
        eq = ops.eq(to_dtype, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf42', get_index_1)
        constant_1 = ops.constant(0.17677669529663687, torch.float32)
        mul = ops.mul(load_1, constant_1)
        constant_2 = ops.constant(-inf, torch.float32)
        where = ops.where(eq, constant_2, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf43', get_index_2, reduction)
        return store_reduction
op43_op44.snodes[1] =
op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 33554432})]
op44.unmet_dependencies = [MemoryDep('buf42', c0, {c0: 33554432}), MemoryDep('buf43', c0, {c0: 65536})]
op44.met_dependencies = [MemoryDep('primals_30', c1, {c0: 128, c1: 262144})]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
    buf44.users = [
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False),
    ]
]
op44.group.device = cpu
op44.group.iteration = ((128, 512, 512), ())
op44.sizes = ([128, 512, 512], [])
primals_30_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 512, 512], stride=[262144, 262144, 512, 1])
buf42_layout = FixedLayout('cpu', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf43_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
buf44_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
class op44_loop_body:
    var_ranges = {p0: 128, p1: 512, p2: 512}
    index0 = 512*p1 + p2
    index1 = 262144*p0 + 512*p1 + p2
    index2 = 512*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_30', get_index)
        to_dtype = ops.to_dtype(load, torch.int64, src_dtype = torch.bool)
        constant = ops.constant(0, torch.int64)
        eq = ops.eq(to_dtype, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf42', get_index_1)
        constant_1 = ops.constant(0.17677669529663687, torch.float32)
        mul = ops.mul(load_1, constant_1)
        constant_2 = ops.constant(-inf, torch.float32)
        where = ops.where(eq, constant_2, mul)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf43', get_index_2)
        sub = ops.sub(where, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf44', get_index_3, exp, None)
        return store


op45_op46: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode)
op45_op46.writes = [MemoryDep('buf45', c0, {c0: 65536}), MemoryDep('buf46', c0, {c0: 33554432})]
op45_op46.unmet_dependencies = [MemoryDep('buf44', c0, {c0: 33554432})]
op45_op46.met_dependencies = []
op45_op46.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
    buf45.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
    buf46.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op45_op46.snodes[0] =
op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 65536})]
op45.unmet_dependencies = [MemoryDep('buf44', c0, {c0: 33554432})]
op45.met_dependencies = []
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
    buf45.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.group.device = cpu
op45.group.iteration = ((65536,), (512,))
op45.sizes = ([65536], [512])
buf44_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
buf45_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
class op45_loop_body:
    var_ranges = {p0: 65536, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf45', get_index_1, reduction)
        return store_reduction
op45_op46.snodes[1] =
op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 33554432})]
op46.unmet_dependencies = [MemoryDep('buf44', c0, {c0: 33554432}), MemoryDep('buf45', c0, {c0: 65536})]
op46.met_dependencies = []
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
    buf46.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op46.group.device = cpu
op46.group.iteration = ((65536, 512), ())
op46.sizes = ([65536, 512], [])
buf44_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
buf45_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
buf46_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
class op46_loop_body:
    var_ranges = {p0: 65536, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf45', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf46', get_index_2, truediv, None)
        return store


op47: ExternKernelSchedulerNode(ExternKernelOut)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf34', mode=None), StarDep(name='buf46', mode=None)]
op47.met_dependencies = []
op47.outputs = [
    buf47: ExternKernelOut
    buf47.layout = FixedLayout('cpu', torch.float32, size=[128, 512, 32], stride=[16384, 32, 1])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
]
op47.node.kernel = extern_kernels.bmm


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 2097152})]
op48.unmet_dependencies = [MemoryDep('buf28', c0, {c0: 2097152}), MemoryDep('buf47', c0, {c0: 2097152})]
op48.met_dependencies = []
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf48.users = [
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op48.group.device = cpu
op48.group.iteration = ((2097152,), ())
op48.sizes = ([2097152], [])
buf47_layout = FixedLayout('cpu', torch.float32, size=[128, 512, 32], stride=[16384, 32, 1])
buf28_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf48_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op48_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf28', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf48', get_index_2, add, None)
        return store


op49_op50_op51: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op49_op50_op51.writes = 
    [   MemoryDep('buf49', c0, {c0: 8192}),
        MemoryDep('buf50', c0, {c0: 8192}),
        MemoryDep('buf51', c0, {c0: 2097152})]
op49_op50_op51.unmet_dependencies = [MemoryDep('buf48', c0, {c0: 2097152})]
op49_op50_op51.met_dependencies = [MemoryDep('primals_31', c1, {c0: 8192, c1: 256})]
op49_op50_op51.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf49.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False)]
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
    buf50.users = [
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf51.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op49_op50_op51.snodes[0] =
op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 8192})]
op49.unmet_dependencies = [MemoryDep('buf48', c0, {c0: 2097152})]
op49.met_dependencies = []
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf49.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False)]
]
op49.group.device = cpu
op49.group.iteration = ((8192,), (256,))
op49.sizes = ([8192], [256])
buf48_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf49_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op49_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf48', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf49', get_index_1, reduction)
        return store_reduction
op49_op50_op51.snodes[1] =
op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 8192})]
op50.unmet_dependencies = [MemoryDep('buf49', c0, {c0: 8192})]
op50.met_dependencies = []
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
    buf50.users = [
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op50.group.device = cpu
op50.group.iteration = ((8192,), ())
op50.sizes = ([8192], [])
buf49_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf50_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
class op50_loop_body:
    var_ranges = {p0: 8192}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.1920928955078125e-07, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf50', get_index_1, rsqrt, None)
        return store
op49_op50_op51.snodes[2] =
op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 2097152})]
op51.unmet_dependencies = [MemoryDep('buf48', c0, {c0: 2097152}), MemoryDep('buf50', c0, {c0: 8192})]
op51.met_dependencies = [MemoryDep('primals_31', c1, {c0: 8192, c1: 256})]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf51.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op51.group.device = cpu
op51.group.iteration = ((8192, 256), ())
op51.sizes = ([8192, 256], [])
buf48_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf50_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
primals_31_layout = FixedLayout('cpu', torch.float32, size=[256], stride=[1])
buf51_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op51_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf48', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf50', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_31', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf51', get_index_3, mul_1, None)
        return store


op52: ExternKernelSchedulerNode(ExternKernelOut)
op52.writes = [StarDep(name='buf52', mode=None)]
op52.unmet_dependencies = [StarDep(name='buf51', mode=None)]
op52.met_dependencies = [StarDep(name='primals_32', mode=None), StarDep(name='primals_33', mode=None)]
op52.outputs = [
    buf52: ExternKernelOut
    buf52.layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
    buf52.users = [
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op52.node.kernel = extern_kernels.addmm


op53: ExternKernelSchedulerNode(ExternKernelOut)
op53.writes = [StarDep(name='buf53', mode=None)]
op53.unmet_dependencies = [StarDep(name='buf51', mode=None)]
op53.met_dependencies = [StarDep(name='primals_34', mode=None), StarDep(name='primals_35', mode=None)]
op53.outputs = [
    buf53: ExternKernelOut
    buf53.layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
    buf53.users = [
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op53.node.kernel = extern_kernels.addmm


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 5586944})]
op54.unmet_dependencies = [MemoryDep('buf52', c0, {c0: 5586944}), MemoryDep('buf53', c0, {c0: 5586944})]
op54.met_dependencies = []
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 682], stride=[349184, 682, 1])
    buf54.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op54.group.device = cpu
op54.group.iteration = ((5586944,), ())
op54.sizes = ([5586944], [])
buf52_layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
buf53_layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
buf54_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 682], stride=[349184, 682, 1])
class op54_loop_body:
    var_ranges = {p0: 5586944}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf52', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf53', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf54', get_index_3, mul_1, None)
        return store


op55: ExternKernelSchedulerNode(ExternKernelOut)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf54', mode=None)]
op55.met_dependencies = [StarDep(name='primals_36', mode=None), StarDep(name='primals_37', mode=None)]
op55.outputs = [
    buf55: ExternKernelOut
    buf55.layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
    buf55.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False)]
]
op55.node.kernel = extern_kernels.addmm


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 2097152})]
op56.unmet_dependencies = [MemoryDep('buf51', c0, {c0: 2097152}), MemoryDep('buf55', c0, {c0: 2097152})]
op56.met_dependencies = []
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf56.users = [
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op56.group.device = cpu
op56.group.iteration = ((2097152,), ())
op56.sizes = ([2097152], [])
buf55_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
buf51_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf56_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op56_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf51', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf56', get_index_2, add, None)
        return store


op57_op58_op59: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op57_op58_op59.writes = 
    [   MemoryDep('buf57', c0, {c0: 8192}),
        MemoryDep('buf58', c0, {c0: 8192}),
        MemoryDep('buf59', c0, {c0: 2097152})]
op57_op58_op59.unmet_dependencies = [MemoryDep('buf56', c0, {c0: 2097152})]
op57_op58_op59.met_dependencies = [MemoryDep('primals_38', c1, {c0: 8192, c1: 256})]
op57_op58_op59.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False)]
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
    buf58.users = [
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf59.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op57_op58_op59.snodes[0] =
op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 8192})]
op57.unmet_dependencies = [MemoryDep('buf56', c0, {c0: 2097152})]
op57.met_dependencies = []
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False)]
]
op57.group.device = cpu
op57.group.iteration = ((8192,), (256,))
op57.sizes = ([8192], [256])
buf56_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf57_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op57_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf57', get_index_1, reduction)
        return store_reduction
op57_op58_op59.snodes[1] =
op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 8192})]
op58.unmet_dependencies = [MemoryDep('buf57', c0, {c0: 8192})]
op58.met_dependencies = []
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
    buf58.users = [
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op58.group.device = cpu
op58.group.iteration = ((8192,), ())
op58.sizes = ([8192], [])
buf57_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf58_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
class op58_loop_body:
    var_ranges = {p0: 8192}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.1920928955078125e-07, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf58', get_index_1, rsqrt, None)
        return store
op57_op58_op59.snodes[2] =
op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 2097152})]
op59.unmet_dependencies = [MemoryDep('buf56', c0, {c0: 2097152}), MemoryDep('buf58', c0, {c0: 8192})]
op59.met_dependencies = [MemoryDep('primals_38', c1, {c0: 8192, c1: 256})]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf59.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op59.group.device = cpu
op59.group.iteration = ((8192, 256), ())
op59.sizes = ([8192, 256], [])
buf56_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf58_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
primals_38_layout = FixedLayout('cpu', torch.float32, size=[256], stride=[1])
buf59_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op59_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf58', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_38', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf59', get_index_3, mul_1, None)
        return store


op60: ExternKernelSchedulerNode(ExternKernelOut)
op60.writes = [StarDep(name='buf60', mode=None)]
op60.unmet_dependencies = [StarDep(name='buf59', mode=None)]
op60.met_dependencies = [StarDep(name='primals_39', mode=None), StarDep(name='primals_40', mode=None)]
op60.outputs = [
    buf60: ExternKernelOut
    buf60.layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
    buf60.users = [
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
    ]
]
op60.node.kernel = extern_kernels.addmm


op61: ExternKernelSchedulerNode(ExternKernelOut)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf59', mode=None)]
op61.met_dependencies = [StarDep(name='primals_41', mode=None), StarDep(name='primals_42', mode=None)]
op61.outputs = [
    buf61: ExternKernelOut
    buf61.layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
    buf61.users = [
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
    ]
]
op61.node.kernel = extern_kernels.addmm


op62: ExternKernelSchedulerNode(ExternKernelOut)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = [StarDep(name='buf59', mode=None)]
op62.met_dependencies = [StarDep(name='primals_43', mode=None), StarDep(name='primals_44', mode=None)]
op62.outputs = [
    buf62: ExternKernelOut
    buf62.layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
    buf62.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op62.node.kernel = extern_kernels.addmm


op63_op64: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op63_op64.writes = 
    [   MemoryDep('buf63', 2*c0, {c0: 1048576}),
        MemoryDep('buf64', 2*c0, {c0: 1048576})]
op63_op64.unmet_dependencies = 
    [   MemoryDep('buf60', 2*c0 + 1, {c0: 1048576}),
        MemoryDep('buf60', 2*c0, {c0: 1048576})]
op63_op64.met_dependencies = 
    [   MemoryDep('primals_45', 2*c1, {c0: 128, c1: 8192}),
        MemoryDep('primals_46', 2*c1, {c0: 128, c1: 8192})]
op63_op64.outputs = [
    buf63: ComputedBuffer
    buf63.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
    buf63.aliases = ['buf65']
    buf63.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf64: ComputedBuffer
    buf64.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
    buf64.aliases = ['buf65']
    buf64.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op63_op64.snodes[0] =
op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', 2*c0, {c0: 1048576})]
op63.unmet_dependencies = 
    [   MemoryDep('buf60', 2*c0 + 1, {c0: 1048576}),
        MemoryDep('buf60', 2*c0, {c0: 1048576})]
op63.met_dependencies = 
    [   MemoryDep('primals_45', 2*c1, {c0: 128, c1: 8192}),
        MemoryDep('primals_46', 2*c1, {c0: 128, c1: 8192})]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
    buf63.aliases = ['buf65']
    buf63.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op63.group.device = cpu
op63.group.iteration = ((128, 8192), ())
op63.sizes = ([128, 8192], [])
buf60_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_45_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf60_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_46_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf63_layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
class op63_loop_body:
    var_ranges = {p0: 128, p1: 8192}
    index0 = 16384*p0 + 2*p1
    index1 = 2*p1
    index2 = 16384*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_45', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf60', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_46', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        sub = ops.sub(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf63', get_index_4, sub, None)
        return store
op63_op64.snodes[1] =
op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', 2*c0, {c0: 1048576})]
op64.unmet_dependencies = 
    [   MemoryDep('buf60', 2*c0 + 1, {c0: 1048576}),
        MemoryDep('buf60', 2*c0, {c0: 1048576})]
op64.met_dependencies = 
    [   MemoryDep('primals_45', 2*c1, {c0: 128, c1: 8192}),
        MemoryDep('primals_46', 2*c1, {c0: 128, c1: 8192})]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
    buf64.aliases = ['buf65']
    buf64.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op64.group.device = cpu
op64.group.iteration = ((128, 8192), ())
op64.sizes = ([128, 8192], [])
buf60_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_46_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf60_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_45_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf64_layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
class op64_loop_body:
    var_ranges = {p0: 128, p1: 8192}
    index0 = 16384*p0 + 2*p1
    index1 = 2*p1
    index2 = 16384*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_46', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf60', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_45', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf64', get_index_4, add, None)
        return store


op65: NopKernelSchedulerNode(ConcatKernel)
op65.writes = [StarDep(name='buf65', mode=None)]
op65.unmet_dependencies = [StarDep(name='buf63', mode=None), StarDep(name='buf64', mode=None)]
op65.met_dependencies = []
op65.outputs = [
    buf65: ConcatKernel
    buf65.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 16, 2], stride=[131072, 16384, 32, 2, 1])
    buf65.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]


op66_op67: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op66_op67.writes = [MemoryDep('buf66', 2*c0, {c0: 131072}), MemoryDep('buf67', 2*c0, {c0: 131072})]
op66_op67.unmet_dependencies = 
    [   MemoryDep('buf61', 2*c0 + 1, {c0: 131072}),
        MemoryDep('buf61', 2*c0, {c0: 131072})]
op66_op67.met_dependencies = 
    [   MemoryDep('primals_45', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_46', 2*c1, {c0: 16, c1: 8192})]
op66_op67.outputs = [
    buf66: ComputedBuffer
    buf66.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf66.aliases = ['buf68']
    buf66.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
    ]
    buf67: ComputedBuffer
    buf67.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf67.aliases = ['buf68']
    buf67.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
    ]
]
op66_op67.snodes[0] =
op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', 2*c0, {c0: 131072})]
op66.unmet_dependencies = 
    [   MemoryDep('buf61', 2*c0 + 1, {c0: 131072}),
        MemoryDep('buf61', 2*c0, {c0: 131072})]
op66.met_dependencies = 
    [   MemoryDep('primals_45', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_46', 2*c1, {c0: 16, c1: 8192})]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf66.aliases = ['buf68']
    buf66.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
    ]
]
op66.group.device = cpu
op66.group.iteration = ((16, 8192), ())
op66.sizes = ([16, 8192], [])
buf61_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_45_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf61_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_46_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf66_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
class op66_loop_body:
    var_ranges = {p0: 16, p1: 8192}
    index0 = 16384*p0 + 2*p1
    index1 = 2*p1
    index2 = 16384*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_45', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf61', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_46', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        sub = ops.sub(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf66', get_index_4, sub, None)
        return store
op66_op67.snodes[1] =
op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', 2*c0, {c0: 131072})]
op67.unmet_dependencies = 
    [   MemoryDep('buf61', 2*c0 + 1, {c0: 131072}),
        MemoryDep('buf61', 2*c0, {c0: 131072})]
op67.met_dependencies = 
    [   MemoryDep('primals_45', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_46', 2*c1, {c0: 16, c1: 8192})]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf67.aliases = ['buf68']
    buf67.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
    ]
]
op67.group.device = cpu
op67.group.iteration = ((16, 8192), ())
op67.sizes = ([16, 8192], [])
buf61_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_46_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf61_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_45_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf67_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
class op67_loop_body:
    var_ranges = {p0: 16, p1: 8192}
    index0 = 16384*p0 + 2*p1
    index1 = 2*p1
    index2 = 16384*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_46', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf61', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_45', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf67', get_index_4, add, None)
        return store


op68: NopKernelSchedulerNode(ConcatKernel)
op68.writes = [StarDep(name='buf68', mode=None)]
op68.unmet_dependencies = [StarDep(name='buf66', mode=None), StarDep(name='buf67', mode=None)]
op68.met_dependencies = []
op68.outputs = [
    buf68: ConcatKernel
    buf68.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
    buf68.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
    ]
]


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 2097152})]
op69.unmet_dependencies = [MemoryDep('buf68', 16384*c0 + c2 + 32*c3, {c0: 16, c1: 8, c2: 32, c3: 512})]
op69.met_dependencies = []
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 32, 512], stride=[131072, 16384, 512, 1])
    buf69.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op69.group.device = cpu
op69.group.iteration = ((16, 8, 32, 512), ())
op69.sizes = ([16, 8, 32, 512], [])
buf68_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
buf69_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 32, 512], stride=[131072, 16384, 512, 1])
class op69_loop_body:
    var_ranges = {p0: 16, p1: 8, p2: 32, p3: 512}
    index0 = 16384*p0 + p2 + 32*p3
    index1 = 131072*p0 + 16384*p1 + 512*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf69', get_index_1, load, None)
        return store


op70: ExternKernelSchedulerNode(ExternKernelOut)
op70.writes = [StarDep(name='buf70', mode=None)]
op70.unmet_dependencies = [StarDep(name='buf65', mode=None), StarDep(name='buf69', mode=None)]
op70.met_dependencies = []
op70.outputs = [
    buf70: ExternKernelOut
    buf70.layout = FixedLayout('cpu', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf70.users = [
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=True, is_weak=False),
    ]
]
op70.node.kernel = extern_kernels.bmm


op71_op72: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode)
op71_op72.writes = [MemoryDep('buf71', c0, {c0: 65536}), MemoryDep('buf72', c0, {c0: 33554432})]
op71_op72.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 33554432})]
op71_op72.met_dependencies = [MemoryDep('primals_47', c1, {c0: 128, c1: 262144})]
op71_op72.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
    buf71.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
    buf72.users = [
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=True, is_weak=False),
    ]
]
op71_op72.snodes[0] =
op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 65536})]
op71.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 33554432})]
op71.met_dependencies = [MemoryDep('primals_47', c1, {c0: 128, c1: 262144})]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
    buf71.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op71.group.device = cpu
op71.group.iteration = ((128, 512), (512,))
op71.sizes = ([128, 512], [512])
primals_47_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 512, 512], stride=[262144, 262144, 512, 1])
buf70_layout = FixedLayout('cpu', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf71_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
class op71_loop_body:
    var_ranges = {p0: 128, p1: 512, p2: 512}
    index0 = 512*p1 + p2
    index1 = 262144*p0 + 512*p1 + p2
    index2 = 512*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_47', get_index)
        to_dtype = ops.to_dtype(load, torch.int64, src_dtype = torch.bool)
        constant = ops.constant(0, torch.int64)
        eq = ops.eq(to_dtype, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf70', get_index_1)
        constant_1 = ops.constant(0.17677669529663687, torch.float32)
        mul = ops.mul(load_1, constant_1)
        constant_2 = ops.constant(-inf, torch.float32)
        where = ops.where(eq, constant_2, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf71', get_index_2, reduction)
        return store_reduction
op71_op72.snodes[1] =
op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 33554432})]
op72.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 33554432}), MemoryDep('buf71', c0, {c0: 65536})]
op72.met_dependencies = [MemoryDep('primals_47', c1, {c0: 128, c1: 262144})]
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
    buf72.users = [
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=True, is_weak=False),
    ]
]
op72.group.device = cpu
op72.group.iteration = ((128, 512, 512), ())
op72.sizes = ([128, 512, 512], [])
primals_47_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 512, 512], stride=[262144, 262144, 512, 1])
buf70_layout = FixedLayout('cpu', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf71_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
buf72_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
class op72_loop_body:
    var_ranges = {p0: 128, p1: 512, p2: 512}
    index0 = 512*p1 + p2
    index1 = 262144*p0 + 512*p1 + p2
    index2 = 512*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_47', get_index)
        to_dtype = ops.to_dtype(load, torch.int64, src_dtype = torch.bool)
        constant = ops.constant(0, torch.int64)
        eq = ops.eq(to_dtype, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf70', get_index_1)
        constant_1 = ops.constant(0.17677669529663687, torch.float32)
        mul = ops.mul(load_1, constant_1)
        constant_2 = ops.constant(-inf, torch.float32)
        where = ops.where(eq, constant_2, mul)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf71', get_index_2)
        sub = ops.sub(where, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf72', get_index_3, exp, None)
        return store


op73_op74: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode)
op73_op74.writes = [MemoryDep('buf73', c0, {c0: 65536}), MemoryDep('buf74', c0, {c0: 33554432})]
op73_op74.unmet_dependencies = [MemoryDep('buf72', c0, {c0: 33554432})]
op73_op74.met_dependencies = []
op73_op74.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
    buf73.users = [NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
    buf74.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op73_op74.snodes[0] =
op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 65536})]
op73.unmet_dependencies = [MemoryDep('buf72', c0, {c0: 33554432})]
op73.met_dependencies = []
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
    buf73.users = [NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op73.group.device = cpu
op73.group.iteration = ((65536,), (512,))
op73.sizes = ([65536], [512])
buf72_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
buf73_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
class op73_loop_body:
    var_ranges = {p0: 65536, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf73', get_index_1, reduction)
        return store_reduction
op73_op74.snodes[1] =
op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 33554432})]
op74.unmet_dependencies = [MemoryDep('buf72', c0, {c0: 33554432}), MemoryDep('buf73', c0, {c0: 65536})]
op74.met_dependencies = []
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
    buf74.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op74.group.device = cpu
op74.group.iteration = ((65536, 512), ())
op74.sizes = ([65536, 512], [])
buf72_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
buf73_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
buf74_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
class op74_loop_body:
    var_ranges = {p0: 65536, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf73', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf74', get_index_2, truediv, None)
        return store


op75: ExternKernelSchedulerNode(ExternKernelOut)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf62', mode=None), StarDep(name='buf74', mode=None)]
op75.met_dependencies = []
op75.outputs = [
    buf75: ExternKernelOut
    buf75.layout = FixedLayout('cpu', torch.float32, size=[128, 512, 32], stride=[16384, 32, 1])
    buf75.users = [NodeUser(node=SchedulerNode(name='op76'), can_inplace=True, is_weak=False)]
]
op75.node.kernel = extern_kernels.bmm


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 2097152})]
op76.unmet_dependencies = [MemoryDep('buf56', c0, {c0: 2097152}), MemoryDep('buf75', c0, {c0: 2097152})]
op76.met_dependencies = []
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf76.users = [
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op76.group.device = cpu
op76.group.iteration = ((2097152,), ())
op76.sizes = ([2097152], [])
buf75_layout = FixedLayout('cpu', torch.float32, size=[128, 512, 32], stride=[16384, 32, 1])
buf56_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf76_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op76_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf56', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf76', get_index_2, add, None)
        return store


op77_op78_op79: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op77_op78_op79.writes = 
    [   MemoryDep('buf77', c0, {c0: 8192}),
        MemoryDep('buf78', c0, {c0: 8192}),
        MemoryDep('buf79', c0, {c0: 2097152})]
op77_op78_op79.unmet_dependencies = [MemoryDep('buf76', c0, {c0: 2097152})]
op77_op78_op79.met_dependencies = [MemoryDep('primals_48', c1, {c0: 8192, c1: 256})]
op77_op78_op79.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf77.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False)]
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
    buf78.users = [
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf79.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op77_op78_op79.snodes[0] =
op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 8192})]
op77.unmet_dependencies = [MemoryDep('buf76', c0, {c0: 2097152})]
op77.met_dependencies = []
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf77.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False)]
]
op77.group.device = cpu
op77.group.iteration = ((8192,), (256,))
op77.sizes = ([8192], [256])
buf76_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf77_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op77_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf76', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf77', get_index_1, reduction)
        return store_reduction
op77_op78_op79.snodes[1] =
op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 8192})]
op78.unmet_dependencies = [MemoryDep('buf77', c0, {c0: 8192})]
op78.met_dependencies = []
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
    buf78.users = [
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op78.group.device = cpu
op78.group.iteration = ((8192,), ())
op78.sizes = ([8192], [])
buf77_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf78_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
class op78_loop_body:
    var_ranges = {p0: 8192}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.1920928955078125e-07, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf78', get_index_1, rsqrt, None)
        return store
op77_op78_op79.snodes[2] =
op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 2097152})]
op79.unmet_dependencies = [MemoryDep('buf76', c0, {c0: 2097152}), MemoryDep('buf78', c0, {c0: 8192})]
op79.met_dependencies = [MemoryDep('primals_48', c1, {c0: 8192, c1: 256})]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf79.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op79.group.device = cpu
op79.group.iteration = ((8192, 256), ())
op79.sizes = ([8192, 256], [])
buf76_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf78_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
primals_48_layout = FixedLayout('cpu', torch.float32, size=[256], stride=[1])
buf79_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op79_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf76', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf78', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_48', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf79', get_index_3, mul_1, None)
        return store


op80: ExternKernelSchedulerNode(ExternKernelOut)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf79', mode=None)]
op80.met_dependencies = [StarDep(name='primals_49', mode=None), StarDep(name='primals_50', mode=None)]
op80.outputs = [
    buf80: ExternKernelOut
    buf80.layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
    buf80.users = [
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op80.node.kernel = extern_kernels.addmm


op81: ExternKernelSchedulerNode(ExternKernelOut)
op81.writes = [StarDep(name='buf81', mode=None)]
op81.unmet_dependencies = [StarDep(name='buf79', mode=None)]
op81.met_dependencies = [StarDep(name='primals_51', mode=None), StarDep(name='primals_52', mode=None)]
op81.outputs = [
    buf81: ExternKernelOut
    buf81.layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
    buf81.users = [
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op81.node.kernel = extern_kernels.addmm


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 5586944})]
op82.unmet_dependencies = [MemoryDep('buf80', c0, {c0: 5586944}), MemoryDep('buf81', c0, {c0: 5586944})]
op82.met_dependencies = []
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 682], stride=[349184, 682, 1])
    buf82.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op82.group.device = cpu
op82.group.iteration = ((5586944,), ())
op82.sizes = ([5586944], [])
buf80_layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
buf81_layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
buf82_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 682], stride=[349184, 682, 1])
class op82_loop_body:
    var_ranges = {p0: 5586944}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf80', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf81', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf82', get_index_3, mul_1, None)
        return store


op83: ExternKernelSchedulerNode(ExternKernelOut)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf82', mode=None)]
op83.met_dependencies = [StarDep(name='primals_53', mode=None), StarDep(name='primals_54', mode=None)]
op83.outputs = [
    buf83: ExternKernelOut
    buf83.layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False)]
]
op83.node.kernel = extern_kernels.addmm


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 2097152})]
op84.unmet_dependencies = [MemoryDep('buf79', c0, {c0: 2097152}), MemoryDep('buf83', c0, {c0: 2097152})]
op84.met_dependencies = []
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf84.users = [
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op84.group.device = cpu
op84.group.iteration = ((2097152,), ())
op84.sizes = ([2097152], [])
buf83_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
buf79_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf84_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op84_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf79', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf84', get_index_2, add, None)
        return store


op85_op86_op87: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op85_op86_op87.writes = 
    [   MemoryDep('buf85', c0, {c0: 8192}),
        MemoryDep('buf86', c0, {c0: 8192}),
        MemoryDep('buf87', c0, {c0: 2097152})]
op85_op86_op87.unmet_dependencies = [MemoryDep('buf84', c0, {c0: 2097152})]
op85_op86_op87.met_dependencies = [MemoryDep('primals_55', c1, {c0: 8192, c1: 256})]
op85_op86_op87.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf85.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=True, is_weak=False)]
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
    buf86.users = [
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf87.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op85_op86_op87.snodes[0] =
op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 8192})]
op85.unmet_dependencies = [MemoryDep('buf84', c0, {c0: 2097152})]
op85.met_dependencies = []
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf85.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=True, is_weak=False)]
]
op85.group.device = cpu
op85.group.iteration = ((8192,), (256,))
op85.sizes = ([8192], [256])
buf84_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf85_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op85_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf85', get_index_1, reduction)
        return store_reduction
op85_op86_op87.snodes[1] =
op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 8192})]
op86.unmet_dependencies = [MemoryDep('buf85', c0, {c0: 8192})]
op86.met_dependencies = []
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
    buf86.users = [
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op86.group.device = cpu
op86.group.iteration = ((8192,), ())
op86.sizes = ([8192], [])
buf85_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf86_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
class op86_loop_body:
    var_ranges = {p0: 8192}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.1920928955078125e-07, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf86', get_index_1, rsqrt, None)
        return store
op85_op86_op87.snodes[2] =
op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 2097152})]
op87.unmet_dependencies = [MemoryDep('buf84', c0, {c0: 2097152}), MemoryDep('buf86', c0, {c0: 8192})]
op87.met_dependencies = [MemoryDep('primals_55', c1, {c0: 8192, c1: 256})]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf87.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op87.group.device = cpu
op87.group.iteration = ((8192, 256), ())
op87.sizes = ([8192, 256], [])
buf84_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf86_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
primals_55_layout = FixedLayout('cpu', torch.float32, size=[256], stride=[1])
buf87_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op87_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf86', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_55', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf87', get_index_3, mul_1, None)
        return store


op88: ExternKernelSchedulerNode(ExternKernelOut)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = [StarDep(name='buf87', mode=None)]
op88.met_dependencies = [StarDep(name='primals_56', mode=None), StarDep(name='primals_57', mode=None)]
op88.outputs = [
    buf88: ExternKernelOut
    buf88.layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
    buf88.users = [
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
    ]
]
op88.node.kernel = extern_kernels.addmm


op89: ExternKernelSchedulerNode(ExternKernelOut)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf87', mode=None)]
op89.met_dependencies = [StarDep(name='primals_58', mode=None), StarDep(name='primals_59', mode=None)]
op89.outputs = [
    buf89: ExternKernelOut
    buf89.layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
    buf89.users = [
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
    ]
]
op89.node.kernel = extern_kernels.addmm


op90: ExternKernelSchedulerNode(ExternKernelOut)
op90.writes = [StarDep(name='buf90', mode=None)]
op90.unmet_dependencies = [StarDep(name='buf87', mode=None)]
op90.met_dependencies = [StarDep(name='primals_60', mode=None), StarDep(name='primals_61', mode=None)]
op90.outputs = [
    buf90: ExternKernelOut
    buf90.layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
    buf90.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op90.node.kernel = extern_kernels.addmm


op91_op92: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op91_op92.writes = 
    [   MemoryDep('buf91', 2*c0, {c0: 1048576}),
        MemoryDep('buf92', 2*c0, {c0: 1048576})]
op91_op92.unmet_dependencies = 
    [   MemoryDep('buf88', 2*c0 + 1, {c0: 1048576}),
        MemoryDep('buf88', 2*c0, {c0: 1048576})]
op91_op92.met_dependencies = 
    [   MemoryDep('primals_62', 2*c1, {c0: 128, c1: 8192}),
        MemoryDep('primals_63', 2*c1, {c0: 128, c1: 8192})]
op91_op92.outputs = [
    buf91: ComputedBuffer
    buf91.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
    buf91.aliases = ['buf93']
    buf91.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf92: ComputedBuffer
    buf92.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
    buf92.aliases = ['buf93']
    buf92.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op91_op92.snodes[0] =
op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', 2*c0, {c0: 1048576})]
op91.unmet_dependencies = 
    [   MemoryDep('buf88', 2*c0 + 1, {c0: 1048576}),
        MemoryDep('buf88', 2*c0, {c0: 1048576})]
op91.met_dependencies = 
    [   MemoryDep('primals_62', 2*c1, {c0: 128, c1: 8192}),
        MemoryDep('primals_63', 2*c1, {c0: 128, c1: 8192})]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
    buf91.aliases = ['buf93']
    buf91.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op91.group.device = cpu
op91.group.iteration = ((128, 8192), ())
op91.sizes = ([128, 8192], [])
buf88_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_62_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf88_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_63_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf91_layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
class op91_loop_body:
    var_ranges = {p0: 128, p1: 8192}
    index0 = 16384*p0 + 2*p1
    index1 = 2*p1
    index2 = 16384*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_62', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf88', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_63', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        sub = ops.sub(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf91', get_index_4, sub, None)
        return store
op91_op92.snodes[1] =
op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', 2*c0, {c0: 1048576})]
op92.unmet_dependencies = 
    [   MemoryDep('buf88', 2*c0 + 1, {c0: 1048576}),
        MemoryDep('buf88', 2*c0, {c0: 1048576})]
op92.met_dependencies = 
    [   MemoryDep('primals_62', 2*c1, {c0: 128, c1: 8192}),
        MemoryDep('primals_63', 2*c1, {c0: 128, c1: 8192})]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
    buf92.aliases = ['buf93']
    buf92.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op92.group.device = cpu
op92.group.iteration = ((128, 8192), ())
op92.sizes = ([128, 8192], [])
buf88_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_63_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf88_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_62_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf92_layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
class op92_loop_body:
    var_ranges = {p0: 128, p1: 8192}
    index0 = 16384*p0 + 2*p1
    index1 = 2*p1
    index2 = 16384*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_63', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf88', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_62', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf92', get_index_4, add, None)
        return store


op93: NopKernelSchedulerNode(ConcatKernel)
op93.writes = [StarDep(name='buf93', mode=None)]
op93.unmet_dependencies = [StarDep(name='buf91', mode=None), StarDep(name='buf92', mode=None)]
op93.met_dependencies = []
op93.outputs = [
    buf93: ConcatKernel
    buf93.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 16, 2], stride=[131072, 16384, 32, 2, 1])
    buf93.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]


op94_op95: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op94_op95.writes = [MemoryDep('buf94', 2*c0, {c0: 131072}), MemoryDep('buf95', 2*c0, {c0: 131072})]
op94_op95.unmet_dependencies = 
    [   MemoryDep('buf89', 2*c0 + 1, {c0: 131072}),
        MemoryDep('buf89', 2*c0, {c0: 131072})]
op94_op95.met_dependencies = 
    [   MemoryDep('primals_62', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_63', 2*c1, {c0: 16, c1: 8192})]
op94_op95.outputs = [
    buf94: ComputedBuffer
    buf94.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf94.aliases = ['buf96']
    buf94.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
    ]
    buf95: ComputedBuffer
    buf95.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf95.aliases = ['buf96']
    buf95.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
    ]
]
op94_op95.snodes[0] =
op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', 2*c0, {c0: 131072})]
op94.unmet_dependencies = 
    [   MemoryDep('buf89', 2*c0 + 1, {c0: 131072}),
        MemoryDep('buf89', 2*c0, {c0: 131072})]
op94.met_dependencies = 
    [   MemoryDep('primals_62', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_63', 2*c1, {c0: 16, c1: 8192})]
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf94.aliases = ['buf96']
    buf94.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
    ]
]
op94.group.device = cpu
op94.group.iteration = ((16, 8192), ())
op94.sizes = ([16, 8192], [])
buf89_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_62_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf89_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_63_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf94_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
class op94_loop_body:
    var_ranges = {p0: 16, p1: 8192}
    index0 = 16384*p0 + 2*p1
    index1 = 2*p1
    index2 = 16384*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_62', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf89', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_63', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        sub = ops.sub(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf94', get_index_4, sub, None)
        return store
op94_op95.snodes[1] =
op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', 2*c0, {c0: 131072})]
op95.unmet_dependencies = 
    [   MemoryDep('buf89', 2*c0 + 1, {c0: 131072}),
        MemoryDep('buf89', 2*c0, {c0: 131072})]
op95.met_dependencies = 
    [   MemoryDep('primals_62', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_63', 2*c1, {c0: 16, c1: 8192})]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf95.aliases = ['buf96']
    buf95.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
    ]
]
op95.group.device = cpu
op95.group.iteration = ((16, 8192), ())
op95.sizes = ([16, 8192], [])
buf89_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_63_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf89_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_62_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf95_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
class op95_loop_body:
    var_ranges = {p0: 16, p1: 8192}
    index0 = 16384*p0 + 2*p1
    index1 = 2*p1
    index2 = 16384*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_63', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf89', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_62', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf95', get_index_4, add, None)
        return store


op96: NopKernelSchedulerNode(ConcatKernel)
op96.writes = [StarDep(name='buf96', mode=None)]
op96.unmet_dependencies = [StarDep(name='buf94', mode=None), StarDep(name='buf95', mode=None)]
op96.met_dependencies = []
op96.outputs = [
    buf96: ConcatKernel
    buf96.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
    buf96.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
    ]
]


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 2097152})]
op97.unmet_dependencies = [MemoryDep('buf96', 16384*c0 + c2 + 32*c3, {c0: 16, c1: 8, c2: 32, c3: 512})]
op97.met_dependencies = []
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 32, 512], stride=[131072, 16384, 512, 1])
    buf97.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op97.group.device = cpu
op97.group.iteration = ((16, 8, 32, 512), ())
op97.sizes = ([16, 8, 32, 512], [])
buf96_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
buf97_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 32, 512], stride=[131072, 16384, 512, 1])
class op97_loop_body:
    var_ranges = {p0: 16, p1: 8, p2: 32, p3: 512}
    index0 = 16384*p0 + p2 + 32*p3
    index1 = 131072*p0 + 16384*p1 + 512*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf97', get_index_1, load, None)
        return store


op98: ExternKernelSchedulerNode(ExternKernelOut)
op98.writes = [StarDep(name='buf98', mode=None)]
op98.unmet_dependencies = [StarDep(name='buf93', mode=None), StarDep(name='buf97', mode=None)]
op98.met_dependencies = []
op98.outputs = [
    buf98: ExternKernelOut
    buf98.layout = FixedLayout('cpu', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf98.users = [
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=True, is_weak=False),
    ]
]
op98.node.kernel = extern_kernels.bmm


op99_op100: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode)
op99_op100.writes = [MemoryDep('buf100', c0, {c0: 33554432}), MemoryDep('buf99', c0, {c0: 65536})]
op99_op100.unmet_dependencies = [MemoryDep('buf98', c0, {c0: 33554432})]
op99_op100.met_dependencies = [MemoryDep('primals_64', c1, {c0: 128, c1: 262144})]
op99_op100.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
    buf99.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
    buf100.users = [
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False),
    ]
]
op99_op100.snodes[0] =
op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 65536})]
op99.unmet_dependencies = [MemoryDep('buf98', c0, {c0: 33554432})]
op99.met_dependencies = [MemoryDep('primals_64', c1, {c0: 128, c1: 262144})]
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
    buf99.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op99.group.device = cpu
op99.group.iteration = ((128, 512), (512,))
op99.sizes = ([128, 512], [512])
primals_64_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 512, 512], stride=[262144, 262144, 512, 1])
buf98_layout = FixedLayout('cpu', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf99_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
class op99_loop_body:
    var_ranges = {p0: 128, p1: 512, p2: 512}
    index0 = 512*p1 + p2
    index1 = 262144*p0 + 512*p1 + p2
    index2 = 512*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_64', get_index)
        to_dtype = ops.to_dtype(load, torch.int64, src_dtype = torch.bool)
        constant = ops.constant(0, torch.int64)
        eq = ops.eq(to_dtype, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf98', get_index_1)
        constant_1 = ops.constant(0.17677669529663687, torch.float32)
        mul = ops.mul(load_1, constant_1)
        constant_2 = ops.constant(-inf, torch.float32)
        where = ops.where(eq, constant_2, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf99', get_index_2, reduction)
        return store_reduction
op99_op100.snodes[1] =
op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 33554432})]
op100.unmet_dependencies = [MemoryDep('buf98', c0, {c0: 33554432}), MemoryDep('buf99', c0, {c0: 65536})]
op100.met_dependencies = [MemoryDep('primals_64', c1, {c0: 128, c1: 262144})]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
    buf100.users = [
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False),
    ]
]
op100.group.device = cpu
op100.group.iteration = ((128, 512, 512), ())
op100.sizes = ([128, 512, 512], [])
primals_64_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 512, 512], stride=[262144, 262144, 512, 1])
buf98_layout = FixedLayout('cpu', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf99_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
buf100_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
class op100_loop_body:
    var_ranges = {p0: 128, p1: 512, p2: 512}
    index0 = 512*p1 + p2
    index1 = 262144*p0 + 512*p1 + p2
    index2 = 512*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_64', get_index)
        to_dtype = ops.to_dtype(load, torch.int64, src_dtype = torch.bool)
        constant = ops.constant(0, torch.int64)
        eq = ops.eq(to_dtype, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf98', get_index_1)
        constant_1 = ops.constant(0.17677669529663687, torch.float32)
        mul = ops.mul(load_1, constant_1)
        constant_2 = ops.constant(-inf, torch.float32)
        where = ops.where(eq, constant_2, mul)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf99', get_index_2)
        sub = ops.sub(where, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf100', get_index_3, exp, None)
        return store


op101_op102: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode)
op101_op102.writes = [MemoryDep('buf101', c0, {c0: 65536}), MemoryDep('buf102', c0, {c0: 33554432})]
op101_op102.unmet_dependencies = [MemoryDep('buf100', c0, {c0: 33554432})]
op101_op102.met_dependencies = []
op101_op102.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
    buf101.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
    buf102.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op101_op102.snodes[0] =
op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 65536})]
op101.unmet_dependencies = [MemoryDep('buf100', c0, {c0: 33554432})]
op101.met_dependencies = []
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
    buf101.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op101.group.device = cpu
op101.group.iteration = ((65536,), (512,))
op101.sizes = ([65536], [512])
buf100_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
buf101_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
class op101_loop_body:
    var_ranges = {p0: 65536, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf101', get_index_1, reduction)
        return store_reduction
op101_op102.snodes[1] =
op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 33554432})]
op102.unmet_dependencies = [MemoryDep('buf100', c0, {c0: 33554432}), MemoryDep('buf101', c0, {c0: 65536})]
op102.met_dependencies = []
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
    buf102.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op102.group.device = cpu
op102.group.iteration = ((65536, 512), ())
op102.sizes = ([65536, 512], [])
buf100_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
buf101_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
buf102_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
class op102_loop_body:
    var_ranges = {p0: 65536, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf101', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf102', get_index_2, truediv, None)
        return store


op103: ExternKernelSchedulerNode(ExternKernelOut)
op103.writes = [StarDep(name='buf103', mode=None)]
op103.unmet_dependencies = [StarDep(name='buf102', mode=None), StarDep(name='buf90', mode=None)]
op103.met_dependencies = []
op103.outputs = [
    buf103: ExternKernelOut
    buf103.layout = FixedLayout('cpu', torch.float32, size=[128, 512, 32], stride=[16384, 32, 1])
    buf103.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False)]
]
op103.node.kernel = extern_kernels.bmm


op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 2097152})]
op104.unmet_dependencies = [MemoryDep('buf103', c0, {c0: 2097152}), MemoryDep('buf84', c0, {c0: 2097152})]
op104.met_dependencies = []
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf104.users = [
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op104.group.device = cpu
op104.group.iteration = ((2097152,), ())
op104.sizes = ([2097152], [])
buf103_layout = FixedLayout('cpu', torch.float32, size=[128, 512, 32], stride=[16384, 32, 1])
buf84_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf104_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op104_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf84', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf104', get_index_2, add, None)
        return store


op105_op106_op107: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op105_op106_op107.writes = 
    [   MemoryDep('buf105', c0, {c0: 8192}),
        MemoryDep('buf106', c0, {c0: 8192}),
        MemoryDep('buf107', c0, {c0: 2097152})]
op105_op106_op107.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 2097152})]
op105_op106_op107.met_dependencies = [MemoryDep('primals_65', c1, {c0: 8192, c1: 256})]
op105_op106_op107.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf105.users = [NodeUser(node=SchedulerNode(name='op106'), can_inplace=True, is_weak=False)]
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
    buf106.users = [
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf107.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op105_op106_op107.snodes[0] =
op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 8192})]
op105.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 2097152})]
op105.met_dependencies = []
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf105.users = [NodeUser(node=SchedulerNode(name='op106'), can_inplace=True, is_weak=False)]
]
op105.group.device = cpu
op105.group.iteration = ((8192,), (256,))
op105.sizes = ([8192], [256])
buf104_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf105_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op105_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf105', get_index_1, reduction)
        return store_reduction
op105_op106_op107.snodes[1] =
op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 8192})]
op106.unmet_dependencies = [MemoryDep('buf105', c0, {c0: 8192})]
op106.met_dependencies = []
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
    buf106.users = [
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op106.group.device = cpu
op106.group.iteration = ((8192,), ())
op106.sizes = ([8192], [])
buf105_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf106_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
class op106_loop_body:
    var_ranges = {p0: 8192}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.1920928955078125e-07, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf106', get_index_1, rsqrt, None)
        return store
op105_op106_op107.snodes[2] =
op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 2097152})]
op107.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 2097152}), MemoryDep('buf106', c0, {c0: 8192})]
op107.met_dependencies = [MemoryDep('primals_65', c1, {c0: 8192, c1: 256})]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf107.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op107.group.device = cpu
op107.group.iteration = ((8192, 256), ())
op107.sizes = ([8192, 256], [])
buf104_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf106_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
primals_65_layout = FixedLayout('cpu', torch.float32, size=[256], stride=[1])
buf107_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op107_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf106', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_65', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf107', get_index_3, mul_1, None)
        return store


op108: ExternKernelSchedulerNode(ExternKernelOut)
op108.writes = [StarDep(name='buf108', mode=None)]
op108.unmet_dependencies = [StarDep(name='buf107', mode=None)]
op108.met_dependencies = [StarDep(name='primals_66', mode=None), StarDep(name='primals_67', mode=None)]
op108.outputs = [
    buf108: ExternKernelOut
    buf108.layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
    buf108.users = [
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op108.node.kernel = extern_kernels.addmm


op109: ExternKernelSchedulerNode(ExternKernelOut)
op109.writes = [StarDep(name='buf109', mode=None)]
op109.unmet_dependencies = [StarDep(name='buf107', mode=None)]
op109.met_dependencies = [StarDep(name='primals_68', mode=None), StarDep(name='primals_69', mode=None)]
op109.outputs = [
    buf109: ExternKernelOut
    buf109.layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
    buf109.users = [
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op109.node.kernel = extern_kernels.addmm


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 5586944})]
op110.unmet_dependencies = [MemoryDep('buf108', c0, {c0: 5586944}), MemoryDep('buf109', c0, {c0: 5586944})]
op110.met_dependencies = []
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 682], stride=[349184, 682, 1])
    buf110.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op110.group.device = cpu
op110.group.iteration = ((5586944,), ())
op110.sizes = ([5586944], [])
buf108_layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
buf109_layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
buf110_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 682], stride=[349184, 682, 1])
class op110_loop_body:
    var_ranges = {p0: 5586944}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf108', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf109', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf110', get_index_3, mul_1, None)
        return store


op111: ExternKernelSchedulerNode(ExternKernelOut)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf110', mode=None)]
op111.met_dependencies = [StarDep(name='primals_70', mode=None), StarDep(name='primals_71', mode=None)]
op111.outputs = [
    buf111: ExternKernelOut
    buf111.layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
    buf111.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False)]
]
op111.node.kernel = extern_kernels.addmm


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 2097152})]
op112.unmet_dependencies = [MemoryDep('buf107', c0, {c0: 2097152}), MemoryDep('buf111', c0, {c0: 2097152})]
op112.met_dependencies = []
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf112.users = [
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op112.group.device = cpu
op112.group.iteration = ((2097152,), ())
op112.sizes = ([2097152], [])
buf111_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
buf107_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf112_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op112_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf107', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf112', get_index_2, add, None)
        return store


op113_op114_op115: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op113_op114_op115.writes = 
    [   MemoryDep('buf113', c0, {c0: 8192}),
        MemoryDep('buf114', c0, {c0: 8192}),
        MemoryDep('buf115', c0, {c0: 2097152})]
op113_op114_op115.unmet_dependencies = [MemoryDep('buf112', c0, {c0: 2097152})]
op113_op114_op115.met_dependencies = [MemoryDep('primals_72', c1, {c0: 8192, c1: 256})]
op113_op114_op115.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf113.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False)]
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
    buf114.users = [
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf115.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op113_op114_op115.snodes[0] =
op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 8192})]
op113.unmet_dependencies = [MemoryDep('buf112', c0, {c0: 2097152})]
op113.met_dependencies = []
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf113.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False)]
]
op113.group.device = cpu
op113.group.iteration = ((8192,), (256,))
op113.sizes = ([8192], [256])
buf112_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf113_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op113_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf113', get_index_1, reduction)
        return store_reduction
op113_op114_op115.snodes[1] =
op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 8192})]
op114.unmet_dependencies = [MemoryDep('buf113', c0, {c0: 8192})]
op114.met_dependencies = []
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
    buf114.users = [
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op114.group.device = cpu
op114.group.iteration = ((8192,), ())
op114.sizes = ([8192], [])
buf113_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf114_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
class op114_loop_body:
    var_ranges = {p0: 8192}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.1920928955078125e-07, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf114', get_index_1, rsqrt, None)
        return store
op113_op114_op115.snodes[2] =
op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 2097152})]
op115.unmet_dependencies = [MemoryDep('buf112', c0, {c0: 2097152}), MemoryDep('buf114', c0, {c0: 8192})]
op115.met_dependencies = [MemoryDep('primals_72', c1, {c0: 8192, c1: 256})]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf115.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op115.group.device = cpu
op115.group.iteration = ((8192, 256), ())
op115.sizes = ([8192, 256], [])
buf112_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf114_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
primals_72_layout = FixedLayout('cpu', torch.float32, size=[256], stride=[1])
buf115_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op115_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf114', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_72', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf115', get_index_3, mul_1, None)
        return store


op116: ExternKernelSchedulerNode(ExternKernelOut)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf115', mode=None)]
op116.met_dependencies = [StarDep(name='primals_1', mode=None), StarDep(name='primals_73', mode=None)]
op116.outputs = [
    buf116: ExternKernelOut
    buf116.layout = FixedLayout('cpu', torch.float32, size=[8192, 10000], stride=[10000, 1])
    buf116.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op116.node.kernel = extern_kernels.addmm


