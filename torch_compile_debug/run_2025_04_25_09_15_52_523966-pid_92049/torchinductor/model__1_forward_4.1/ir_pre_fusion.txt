op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 2097152})]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('primals_1', c1 + 256*tmp0, {c0: 8192, c1: 256}),
        MemoryDep('primals_2', c0, {c0: 8192})]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf0.users = [
        NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op0.group.device = cpu
op0.group.iteration = ((8192, 256), ())
op0.sizes = ([8192, 256], [])
primals_2_layout = FixedLayout('cpu', torch.int64, size=[16, 512], stride=[512, 1])
primals_1_layout = FixedLayout('cpu', torch.float32, size=[10000, 256], stride=[256, 1])
buf0_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op0_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = p0
    index1 = 256*indirect0 + p1
    index2 = 256*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_2', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1', get_index_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf0', get_index_2, load_1, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 8192})]
op1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 2097152})]
op1.met_dependencies = [MemoryDep('primals_3', c1, {c0: 16, c1: 131072})]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf1.users = [NodeUser(node=SchedulerNode(name='op2'), can_inplace=True, is_weak=False)]
]
op1.group.device = cpu
op1.group.iteration = ((16, 512), (256,))
op1.sizes = ([16, 512], [256])
buf0_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
primals_3_layout = FixedLayout('cpu', torch.float32, size=[1, 512, 256], stride=[131072, 256, 1])
buf1_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op1_loop_body:
    var_ranges = {p0: 16, p1: 512, p2: 256}
    index0 = 131072*p0 + 256*p1 + p2
    index1 = 256*p1 + p2
    index2 = 512*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_3', get_index_1)
        add = ops.add(load, load_1)
        mul = ops.mul(add, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1', get_index_2, reduction)
        return store_reduction


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 8192})]
op2.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 8192})]
op2.met_dependencies = []
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
    buf2.users = [
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2.group.device = cpu
op2.group.iteration = ((8192,), ())
op2.sizes = ([8192], [])
buf1_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf2_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
class op2_loop_body:
    var_ranges = {p0: 8192}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.1920928955078125e-07, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2', get_index_1, rsqrt, None)
        return store


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 2097152})]
op3.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 2097152}), MemoryDep('buf2', c0, {c0: 8192})]
op3.met_dependencies = 
    [   MemoryDep('primals_3', c1, {c0: 16, c1: 131072}),
        MemoryDep('primals_4', c1, {c0: 8192, c1: 256})]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf3.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op3.group.device = cpu
op3.group.iteration = ((16, 512, 256), ())
op3.sizes = ([16, 512, 256], [])
buf0_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
primals_3_layout = FixedLayout('cpu', torch.float32, size=[1, 512, 256], stride=[131072, 256, 1])
buf2_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
primals_4_layout = FixedLayout('cpu', torch.float32, size=[256], stride=[1])
buf3_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op3_loop_body:
    var_ranges = {p0: 16, p1: 512, p2: 256}
    index0 = 131072*p0 + 256*p1 + p2
    index1 = 256*p1 + p2
    index2 = 512*p0 + p1
    index3 = p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_3', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf2', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('primals_4', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf3', get_index_4, mul_1, None)
        return store


op4: ExternKernelSchedulerNode(ExternKernelOut)
op4.writes = [StarDep(name='buf4', mode=None)]
op4.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op4.met_dependencies = [StarDep(name='primals_5', mode=None), StarDep(name='primals_6', mode=None)]
op4.outputs = [
    buf4: ExternKernelOut
    buf4.layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
    buf4.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
    ]
]
op4.node.kernel = extern_kernels.addmm


op5: ExternKernelSchedulerNode(ExternKernelOut)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op5.met_dependencies = [StarDep(name='primals_7', mode=None), StarDep(name='primals_8', mode=None)]
op5.outputs = [
    buf5: ExternKernelOut
    buf5.layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
    buf5.users = [
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
    ]
]
op5.node.kernel = extern_kernels.addmm


op6: ExternKernelSchedulerNode(ExternKernelOut)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op6.met_dependencies = [StarDep(name='primals_10', mode=None), StarDep(name='primals_9', mode=None)]
op6.outputs = [
    buf6: ExternKernelOut
    buf6.layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
    buf6.users = [
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op6.node.kernel = extern_kernels.addmm


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 262144})]
op7.unmet_dependencies = [MemoryDep('buf5', c0, {c0: 262144})]
op7.met_dependencies = []
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cpu', torch.float16, size=[16, 512, 32], stride=[16384, 32, 1])
    buf7.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op7.group.device = cpu
op7.group.iteration = ((262144,), ())
op7.sizes = ([262144], [])
buf5_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
buf7_layout = FixedLayout('cpu', torch.float16, size=[16, 512, 32], stride=[16384, 32, 1])
class op7_loop_body:
    var_ranges = {p0: 262144}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf7', get_index_1, to_dtype, None)
        return store


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 2097152})]
op8.unmet_dependencies = [MemoryDep('buf6', c0, {c0: 2097152})]
op8.met_dependencies = []
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cpu', torch.float16, size=[16, 512, 256], stride=[131072, 256, 1])
    buf8.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op8.group.device = cpu
op8.group.iteration = ((2097152,), ())
op8.sizes = ([2097152], [])
buf6_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
buf8_layout = FixedLayout('cpu', torch.float16, size=[16, 512, 256], stride=[131072, 256, 1])
class op8_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf8', get_index_1, to_dtype, None)
        return store


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', 2*c0, {c0: 1048576})]
op9.unmet_dependencies = 
    [   MemoryDep('buf4', 2*c0 + 1, {c0: 1048576}),
        MemoryDep('buf4', 2*c0, {c0: 1048576})]
op9.met_dependencies = 
    [   MemoryDep('primals_11', 2*c1, {c0: 65536, c1: 16}),
        MemoryDep('primals_12', 2*c1, {c0: 65536, c1: 16})]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
    buf9.aliases = ['buf11']
    buf9.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op9.group.device = cpu
op9.group.iteration = ((65536, 16), ())
op9.sizes = ([65536, 16], [])
buf4_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_11_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf4_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_12_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf9_layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
class op9_loop_body:
    var_ranges = {p0: 65536, p1: 16}
    index0 = 32*p0 + 2*p1
    index1 = 2*p1
    index2 = 32*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_11', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf4', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_12', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        sub = ops.sub(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf9', get_index_4, sub, None)
        return store


op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', 2*c0, {c0: 1048576})]
op10.unmet_dependencies = 
    [   MemoryDep('buf4', 2*c0 + 1, {c0: 1048576}),
        MemoryDep('buf4', 2*c0, {c0: 1048576})]
op10.met_dependencies = 
    [   MemoryDep('primals_11', 2*c1, {c0: 65536, c1: 16}),
        MemoryDep('primals_12', 2*c1, {c0: 65536, c1: 16})]
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
    buf10.aliases = ['buf11']
    buf10.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op10.group.device = cpu
op10.group.iteration = ((65536, 16), ())
op10.sizes = ([65536, 16], [])
buf4_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_12_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf4_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_11_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf10_layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
class op10_loop_body:
    var_ranges = {p0: 65536, p1: 16}
    index0 = 32*p0 + 2*p1
    index1 = 2*p1
    index2 = 32*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_12', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf4', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_11', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf10', get_index_4, add, None)
        return store


op11: NopKernelSchedulerNode(ConcatKernel)
op11.writes = [StarDep(name='buf11', mode=None)]
op11.unmet_dependencies = [StarDep(name='buf10', mode=None), StarDep(name='buf9', mode=None)]
op11.met_dependencies = []
op11.outputs = [
    buf11: ConcatKernel
    buf11.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 16, 2], stride=[131072, 16384, 32, 2, 1])
    buf11.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', 2*c0, {c0: 131072})]
op12.unmet_dependencies = 
    [   MemoryDep('buf5', 2*c0 + 1, {c0: 131072}),
        MemoryDep('buf5', 2*c0, {c0: 131072})]
op12.met_dependencies = 
    [   MemoryDep('primals_11', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_12', 2*c1, {c0: 16, c1: 8192})]
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf12.aliases = ['buf14']
    buf12.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
    ]
]
op12.group.device = cpu
op12.group.iteration = ((16, 8192), ())
op12.sizes = ([16, 8192], [])
buf5_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_11_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf5_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_12_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf12_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
class op12_loop_body:
    var_ranges = {p0: 16, p1: 8192}
    index0 = 16384*p0 + 2*p1
    index1 = 2*p1
    index2 = 16384*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_11', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf5', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_12', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        sub = ops.sub(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf12', get_index_4, sub, None)
        return store


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', 2*c0, {c0: 131072})]
op13.unmet_dependencies = 
    [   MemoryDep('buf5', 2*c0 + 1, {c0: 131072}),
        MemoryDep('buf5', 2*c0, {c0: 131072})]
op13.met_dependencies = 
    [   MemoryDep('primals_11', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_12', 2*c1, {c0: 16, c1: 8192})]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf13.aliases = ['buf14']
    buf13.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
    ]
]
op13.group.device = cpu
op13.group.iteration = ((16, 8192), ())
op13.sizes = ([16, 8192], [])
buf5_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_12_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf5_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_11_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf13_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
class op13_loop_body:
    var_ranges = {p0: 16, p1: 8192}
    index0 = 16384*p0 + 2*p1
    index1 = 2*p1
    index2 = 16384*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_12', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf5', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_11', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf13', get_index_4, add, None)
        return store


op14: NopKernelSchedulerNode(ConcatKernel)
op14.writes = [StarDep(name='buf14', mode=None)]
op14.unmet_dependencies = [StarDep(name='buf12', mode=None), StarDep(name='buf13', mode=None)]
op14.met_dependencies = []
op14.outputs = [
    buf14: ConcatKernel
    buf14.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
    buf14.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
    ]
]


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 2097152})]
op15.unmet_dependencies = [MemoryDep('buf14', 16384*c0 + c2 + 32*c3, {c0: 16, c1: 8, c2: 32, c3: 512})]
op15.met_dependencies = []
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 32, 512], stride=[131072, 16384, 512, 1])
    buf15.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op15.group.device = cpu
op15.group.iteration = ((16, 8, 32, 512), ())
op15.sizes = ([16, 8, 32, 512], [])
buf14_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
buf15_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 32, 512], stride=[131072, 16384, 512, 1])
class op15_loop_body:
    var_ranges = {p0: 16, p1: 8, p2: 32, p3: 512}
    index0 = 16384*p0 + p2 + 32*p3
    index1 = 131072*p0 + 16384*p1 + 512*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf15', get_index_1, load, None)
        return store


op16: ExternKernelSchedulerNode(ExternKernelOut)
op16.writes = [StarDep(name='buf16', mode=None)]
op16.unmet_dependencies = [StarDep(name='buf11', mode=None), StarDep(name='buf15', mode=None)]
op16.met_dependencies = []
op16.outputs = [
    buf16: ExternKernelOut
    buf16.layout = FixedLayout('cpu', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf16.users = [
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False),
    ]
]
op16.node.kernel = extern_kernels.bmm


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 65536})]
op17.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 33554432})]
op17.met_dependencies = [MemoryDep('primals_13', c1, {c0: 128, c1: 262144})]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
    buf17.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op17.group.device = cpu
op17.group.iteration = ((128, 512), (512,))
op17.sizes = ([128, 512], [512])
primals_13_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 512, 512], stride=[262144, 262144, 512, 1])
buf16_layout = FixedLayout('cpu', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf17_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
class op17_loop_body:
    var_ranges = {p0: 128, p1: 512, p2: 512}
    index0 = 512*p1 + p2
    index1 = 262144*p0 + 512*p1 + p2
    index2 = 512*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_13', get_index)
        to_dtype = ops.to_dtype(load, torch.int64, src_dtype = torch.bool)
        constant = ops.constant(0, torch.int64)
        eq = ops.eq(to_dtype, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf16', get_index_1)
        constant_1 = ops.constant(0.17677669529663687, torch.float32)
        mul = ops.mul(load_1, constant_1)
        constant_2 = ops.constant(-inf, torch.float32)
        where = ops.where(eq, constant_2, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf17', get_index_2, reduction)
        return store_reduction


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 33554432})]
op18.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 33554432}), MemoryDep('buf17', c0, {c0: 65536})]
op18.met_dependencies = [MemoryDep('primals_13', c1, {c0: 128, c1: 262144})]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
    buf18.users = [
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False),
    ]
]
op18.group.device = cpu
op18.group.iteration = ((128, 512, 512), ())
op18.sizes = ([128, 512, 512], [])
primals_13_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 512, 512], stride=[262144, 262144, 512, 1])
buf16_layout = FixedLayout('cpu', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf17_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
buf18_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
class op18_loop_body:
    var_ranges = {p0: 128, p1: 512, p2: 512}
    index0 = 512*p1 + p2
    index1 = 262144*p0 + 512*p1 + p2
    index2 = 512*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_13', get_index)
        to_dtype = ops.to_dtype(load, torch.int64, src_dtype = torch.bool)
        constant = ops.constant(0, torch.int64)
        eq = ops.eq(to_dtype, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf16', get_index_1)
        constant_1 = ops.constant(0.17677669529663687, torch.float32)
        mul = ops.mul(load_1, constant_1)
        constant_2 = ops.constant(-inf, torch.float32)
        where = ops.where(eq, constant_2, mul)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf17', get_index_2)
        sub = ops.sub(where, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf18', get_index_3, exp, None)
        return store


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 65536})]
op19.unmet_dependencies = [MemoryDep('buf18', c0, {c0: 33554432})]
op19.met_dependencies = []
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
    buf19.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op19.group.device = cpu
op19.group.iteration = ((65536,), (512,))
op19.sizes = ([65536], [512])
buf18_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
buf19_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
class op19_loop_body:
    var_ranges = {p0: 65536, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf19', get_index_1, reduction)
        return store_reduction


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 33554432})]
op20.unmet_dependencies = [MemoryDep('buf18', c0, {c0: 33554432}), MemoryDep('buf19', c0, {c0: 65536})]
op20.met_dependencies = []
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
    buf20.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op20.group.device = cpu
op20.group.iteration = ((65536, 512), ())
op20.sizes = ([65536, 512], [])
buf18_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
buf19_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
buf20_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
class op20_loop_body:
    var_ranges = {p0: 65536, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf19', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf20', get_index_2, truediv, None)
        return store


op21: ExternKernelSchedulerNode(ExternKernelOut)
op21.writes = [StarDep(name='buf21', mode=None)]
op21.unmet_dependencies = [StarDep(name='buf20', mode=None), StarDep(name='buf6', mode=None)]
op21.met_dependencies = []
op21.outputs = [
    buf21: ExternKernelOut
    buf21.layout = FixedLayout('cpu', torch.float32, size=[128, 512, 32], stride=[16384, 32, 1])
    buf21.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False)]
]
op21.node.kernel = extern_kernels.bmm


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 2097152})]
op22.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 2097152}), MemoryDep('buf21', c0, {c0: 2097152})]
op22.met_dependencies = [MemoryDep('primals_3', c1, {c0: 16, c1: 131072})]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf22.users = [
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op22.group.device = cpu
op22.group.iteration = ((16, 131072), ())
op22.sizes = ([16, 131072], [])
buf21_layout = FixedLayout('cpu', torch.float32, size=[128, 512, 32], stride=[16384, 32, 1])
buf0_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
primals_3_layout = FixedLayout('cpu', torch.float32, size=[1, 512, 256], stride=[131072, 256, 1])
buf22_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op22_loop_body:
    var_ranges = {p0: 16, p1: 131072}
    index0 = 131072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf0', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_3', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf22', get_index_3, add_1, None)
        return store


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 8192})]
op23.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 2097152})]
op23.met_dependencies = []
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf23.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=True, is_weak=False)]
]
op23.group.device = cpu
op23.group.iteration = ((8192,), (256,))
op23.sizes = ([8192], [256])
buf22_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf23_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op23_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf23', get_index_1, reduction)
        return store_reduction


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 8192})]
op24.unmet_dependencies = [MemoryDep('buf23', c0, {c0: 8192})]
op24.met_dependencies = []
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
    buf24.users = [
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op24.group.device = cpu
op24.group.iteration = ((8192,), ())
op24.sizes = ([8192], [])
buf23_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf24_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
class op24_loop_body:
    var_ranges = {p0: 8192}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.1920928955078125e-07, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf24', get_index_1, rsqrt, None)
        return store


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 2097152})]
op25.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 2097152}), MemoryDep('buf24', c0, {c0: 8192})]
op25.met_dependencies = [MemoryDep('primals_14', c1, {c0: 8192, c1: 256})]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf25.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op25.group.device = cpu
op25.group.iteration = ((8192, 256), ())
op25.sizes = ([8192, 256], [])
buf22_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf24_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
primals_14_layout = FixedLayout('cpu', torch.float32, size=[256], stride=[1])
buf25_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op25_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf24', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_14', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf25', get_index_3, mul_1, None)
        return store


op26: ExternKernelSchedulerNode(ExternKernelOut)
op26.writes = [StarDep(name='buf26', mode=None)]
op26.unmet_dependencies = [StarDep(name='buf25', mode=None)]
op26.met_dependencies = [StarDep(name='primals_15', mode=None), StarDep(name='primals_16', mode=None)]
op26.outputs = [
    buf26: ExternKernelOut
    buf26.layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
    buf26.users = [
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op26.node.kernel = extern_kernels.addmm


op27: ExternKernelSchedulerNode(ExternKernelOut)
op27.writes = [StarDep(name='buf27', mode=None)]
op27.unmet_dependencies = [StarDep(name='buf25', mode=None)]
op27.met_dependencies = [StarDep(name='primals_17', mode=None), StarDep(name='primals_18', mode=None)]
op27.outputs = [
    buf27: ExternKernelOut
    buf27.layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
    buf27.users = [
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op27.node.kernel = extern_kernels.addmm


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 5586944})]
op28.unmet_dependencies = [MemoryDep('buf26', c0, {c0: 5586944}), MemoryDep('buf27', c0, {c0: 5586944})]
op28.met_dependencies = []
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 682], stride=[349184, 682, 1])
    buf28.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op28.group.device = cpu
op28.group.iteration = ((5586944,), ())
op28.sizes = ([5586944], [])
buf26_layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
buf27_layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
buf28_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 682], stride=[349184, 682, 1])
class op28_loop_body:
    var_ranges = {p0: 5586944}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf26', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf27', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf28', get_index_3, mul_1, None)
        return store


op29: ExternKernelSchedulerNode(ExternKernelOut)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op29.met_dependencies = [StarDep(name='primals_19', mode=None), StarDep(name='primals_20', mode=None)]
op29.outputs = [
    buf29: ExternKernelOut
    buf29.layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
    buf29.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=True, is_weak=False)]
]
op29.node.kernel = extern_kernels.addmm


op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 2097152})]
op30.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 2097152}), MemoryDep('buf29', c0, {c0: 2097152})]
op30.met_dependencies = []
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf30.users = [
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op30.group.device = cpu
op30.group.iteration = ((2097152,), ())
op30.sizes = ([2097152], [])
buf29_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
buf25_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf30_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op30_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf25', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf30', get_index_2, add, None)
        return store


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 8192})]
op31.unmet_dependencies = [MemoryDep('buf30', c0, {c0: 2097152})]
op31.met_dependencies = []
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf31.users = [NodeUser(node=SchedulerNode(name='op32'), can_inplace=True, is_weak=False)]
]
op31.group.device = cpu
op31.group.iteration = ((8192,), (256,))
op31.sizes = ([8192], [256])
buf30_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf31_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op31_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf31', get_index_1, reduction)
        return store_reduction


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 8192})]
op32.unmet_dependencies = [MemoryDep('buf31', c0, {c0: 8192})]
op32.met_dependencies = []
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
    buf32.users = [
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op32.group.device = cpu
op32.group.iteration = ((8192,), ())
op32.sizes = ([8192], [])
buf31_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf32_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
class op32_loop_body:
    var_ranges = {p0: 8192}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.1920928955078125e-07, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf32', get_index_1, rsqrt, None)
        return store


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 2097152})]
op33.unmet_dependencies = [MemoryDep('buf30', c0, {c0: 2097152}), MemoryDep('buf32', c0, {c0: 8192})]
op33.met_dependencies = [MemoryDep('primals_21', c1, {c0: 8192, c1: 256})]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf33.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op33.group.device = cpu
op33.group.iteration = ((8192, 256), ())
op33.sizes = ([8192, 256], [])
buf30_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf32_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
primals_21_layout = FixedLayout('cpu', torch.float32, size=[256], stride=[1])
buf33_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op33_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf32', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_21', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf33', get_index_3, mul_1, None)
        return store


op34: ExternKernelSchedulerNode(ExternKernelOut)
op34.writes = [StarDep(name='buf34', mode=None)]
op34.unmet_dependencies = [StarDep(name='buf33', mode=None)]
op34.met_dependencies = [StarDep(name='primals_22', mode=None), StarDep(name='primals_23', mode=None)]
op34.outputs = [
    buf34: ExternKernelOut
    buf34.layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
    buf34.users = [
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
    ]
]
op34.node.kernel = extern_kernels.addmm


op35: ExternKernelSchedulerNode(ExternKernelOut)
op35.writes = [StarDep(name='buf35', mode=None)]
op35.unmet_dependencies = [StarDep(name='buf33', mode=None)]
op35.met_dependencies = [StarDep(name='primals_24', mode=None), StarDep(name='primals_25', mode=None)]
op35.outputs = [
    buf35: ExternKernelOut
    buf35.layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
    buf35.users = [
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
    ]
]
op35.node.kernel = extern_kernels.addmm


op36: ExternKernelSchedulerNode(ExternKernelOut)
op36.writes = [StarDep(name='buf36', mode=None)]
op36.unmet_dependencies = [StarDep(name='buf33', mode=None)]
op36.met_dependencies = [StarDep(name='primals_26', mode=None), StarDep(name='primals_27', mode=None)]
op36.outputs = [
    buf36: ExternKernelOut
    buf36.layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
    buf36.users = [
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op36.node.kernel = extern_kernels.addmm


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 262144})]
op37.unmet_dependencies = [MemoryDep('buf35', c0, {c0: 262144})]
op37.met_dependencies = []
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cpu', torch.float16, size=[16, 512, 32], stride=[16384, 32, 1])
    buf37.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op37.group.device = cpu
op37.group.iteration = ((262144,), ())
op37.sizes = ([262144], [])
buf35_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
buf37_layout = FixedLayout('cpu', torch.float16, size=[16, 512, 32], stride=[16384, 32, 1])
class op37_loop_body:
    var_ranges = {p0: 262144}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf37', get_index_1, to_dtype, None)
        return store


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 2097152})]
op38.unmet_dependencies = [MemoryDep('buf36', c0, {c0: 2097152})]
op38.met_dependencies = []
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cpu', torch.float16, size=[16, 512, 256], stride=[131072, 256, 1])
    buf38.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op38.group.device = cpu
op38.group.iteration = ((2097152,), ())
op38.sizes = ([2097152], [])
buf36_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
buf38_layout = FixedLayout('cpu', torch.float16, size=[16, 512, 256], stride=[131072, 256, 1])
class op38_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf38', get_index_1, to_dtype, None)
        return store


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', 2*c0, {c0: 1048576})]
op39.unmet_dependencies = 
    [   MemoryDep('buf34', 2*c0 + 1, {c0: 1048576}),
        MemoryDep('buf34', 2*c0, {c0: 1048576})]
op39.met_dependencies = 
    [   MemoryDep('primals_28', 2*c1, {c0: 65536, c1: 16}),
        MemoryDep('primals_29', 2*c1, {c0: 65536, c1: 16})]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
    buf39.aliases = ['buf41']
    buf39.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op39.group.device = cpu
op39.group.iteration = ((65536, 16), ())
op39.sizes = ([65536, 16], [])
buf34_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_28_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf34_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_29_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf39_layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
class op39_loop_body:
    var_ranges = {p0: 65536, p1: 16}
    index0 = 32*p0 + 2*p1
    index1 = 2*p1
    index2 = 32*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_28', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf34', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_29', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        sub = ops.sub(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf39', get_index_4, sub, None)
        return store


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', 2*c0, {c0: 1048576})]
op40.unmet_dependencies = 
    [   MemoryDep('buf34', 2*c0 + 1, {c0: 1048576}),
        MemoryDep('buf34', 2*c0, {c0: 1048576})]
op40.met_dependencies = 
    [   MemoryDep('primals_28', 2*c1, {c0: 65536, c1: 16}),
        MemoryDep('primals_29', 2*c1, {c0: 65536, c1: 16})]
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
    buf40.aliases = ['buf41']
    buf40.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op40.group.device = cpu
op40.group.iteration = ((65536, 16), ())
op40.sizes = ([65536, 16], [])
buf34_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_29_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf34_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_28_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf40_layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
class op40_loop_body:
    var_ranges = {p0: 65536, p1: 16}
    index0 = 32*p0 + 2*p1
    index1 = 2*p1
    index2 = 32*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_29', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf34', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_28', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf40', get_index_4, add, None)
        return store


op41: NopKernelSchedulerNode(ConcatKernel)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf39', mode=None), StarDep(name='buf40', mode=None)]
op41.met_dependencies = []
op41.outputs = [
    buf41: ConcatKernel
    buf41.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 16, 2], stride=[131072, 16384, 32, 2, 1])
    buf41.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', 2*c0, {c0: 131072})]
op42.unmet_dependencies = 
    [   MemoryDep('buf35', 2*c0 + 1, {c0: 131072}),
        MemoryDep('buf35', 2*c0, {c0: 131072})]
op42.met_dependencies = 
    [   MemoryDep('primals_28', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_29', 2*c1, {c0: 16, c1: 8192})]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf42.aliases = ['buf44']
    buf42.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
    ]
]
op42.group.device = cpu
op42.group.iteration = ((16, 8192), ())
op42.sizes = ([16, 8192], [])
buf35_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_28_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf35_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_29_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf42_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
class op42_loop_body:
    var_ranges = {p0: 16, p1: 8192}
    index0 = 16384*p0 + 2*p1
    index1 = 2*p1
    index2 = 16384*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_28', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf35', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_29', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        sub = ops.sub(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf42', get_index_4, sub, None)
        return store


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', 2*c0, {c0: 131072})]
op43.unmet_dependencies = 
    [   MemoryDep('buf35', 2*c0 + 1, {c0: 131072}),
        MemoryDep('buf35', 2*c0, {c0: 131072})]
op43.met_dependencies = 
    [   MemoryDep('primals_28', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_29', 2*c1, {c0: 16, c1: 8192})]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf43.aliases = ['buf44']
    buf43.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
    ]
]
op43.group.device = cpu
op43.group.iteration = ((16, 8192), ())
op43.sizes = ([16, 8192], [])
buf35_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_29_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf35_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_28_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf43_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
class op43_loop_body:
    var_ranges = {p0: 16, p1: 8192}
    index0 = 16384*p0 + 2*p1
    index1 = 2*p1
    index2 = 16384*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_29', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf35', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_28', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf43', get_index_4, add, None)
        return store


op44: NopKernelSchedulerNode(ConcatKernel)
op44.writes = [StarDep(name='buf44', mode=None)]
op44.unmet_dependencies = [StarDep(name='buf42', mode=None), StarDep(name='buf43', mode=None)]
op44.met_dependencies = []
op44.outputs = [
    buf44: ConcatKernel
    buf44.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
    buf44.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
    ]
]


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 2097152})]
op45.unmet_dependencies = [MemoryDep('buf44', 16384*c0 + c2 + 32*c3, {c0: 16, c1: 8, c2: 32, c3: 512})]
op45.met_dependencies = []
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 32, 512], stride=[131072, 16384, 512, 1])
    buf45.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op45.group.device = cpu
op45.group.iteration = ((16, 8, 32, 512), ())
op45.sizes = ([16, 8, 32, 512], [])
buf44_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
buf45_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 32, 512], stride=[131072, 16384, 512, 1])
class op45_loop_body:
    var_ranges = {p0: 16, p1: 8, p2: 32, p3: 512}
    index0 = 16384*p0 + p2 + 32*p3
    index1 = 131072*p0 + 16384*p1 + 512*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf45', get_index_1, load, None)
        return store


op46: ExternKernelSchedulerNode(ExternKernelOut)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf41', mode=None), StarDep(name='buf45', mode=None)]
op46.met_dependencies = []
op46.outputs = [
    buf46: ExternKernelOut
    buf46.layout = FixedLayout('cpu', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf46.users = [
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False),
    ]
]
op46.node.kernel = extern_kernels.bmm


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 65536})]
op47.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 33554432})]
op47.met_dependencies = [MemoryDep('primals_30', c1, {c0: 128, c1: 262144})]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False)]
]
op47.group.device = cpu
op47.group.iteration = ((128, 512), (512,))
op47.sizes = ([128, 512], [512])
primals_30_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 512, 512], stride=[262144, 262144, 512, 1])
buf46_layout = FixedLayout('cpu', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf47_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
class op47_loop_body:
    var_ranges = {p0: 128, p1: 512, p2: 512}
    index0 = 512*p1 + p2
    index1 = 262144*p0 + 512*p1 + p2
    index2 = 512*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_30', get_index)
        to_dtype = ops.to_dtype(load, torch.int64, src_dtype = torch.bool)
        constant = ops.constant(0, torch.int64)
        eq = ops.eq(to_dtype, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf46', get_index_1)
        constant_1 = ops.constant(0.17677669529663687, torch.float32)
        mul = ops.mul(load_1, constant_1)
        constant_2 = ops.constant(-inf, torch.float32)
        where = ops.where(eq, constant_2, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf47', get_index_2, reduction)
        return store_reduction


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 33554432})]
op48.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 33554432}), MemoryDep('buf47', c0, {c0: 65536})]
op48.met_dependencies = [MemoryDep('primals_30', c1, {c0: 128, c1: 262144})]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
    buf48.users = [
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False),
    ]
]
op48.group.device = cpu
op48.group.iteration = ((128, 512, 512), ())
op48.sizes = ([128, 512, 512], [])
primals_30_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 512, 512], stride=[262144, 262144, 512, 1])
buf46_layout = FixedLayout('cpu', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf47_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
buf48_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
class op48_loop_body:
    var_ranges = {p0: 128, p1: 512, p2: 512}
    index0 = 512*p1 + p2
    index1 = 262144*p0 + 512*p1 + p2
    index2 = 512*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_30', get_index)
        to_dtype = ops.to_dtype(load, torch.int64, src_dtype = torch.bool)
        constant = ops.constant(0, torch.int64)
        eq = ops.eq(to_dtype, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf46', get_index_1)
        constant_1 = ops.constant(0.17677669529663687, torch.float32)
        mul = ops.mul(load_1, constant_1)
        constant_2 = ops.constant(-inf, torch.float32)
        where = ops.where(eq, constant_2, mul)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf47', get_index_2)
        sub = ops.sub(where, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf48', get_index_3, exp, None)
        return store


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 65536})]
op49.unmet_dependencies = [MemoryDep('buf48', c0, {c0: 33554432})]
op49.met_dependencies = []
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
    buf49.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op49.group.device = cpu
op49.group.iteration = ((65536,), (512,))
op49.sizes = ([65536], [512])
buf48_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
buf49_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
class op49_loop_body:
    var_ranges = {p0: 65536, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf48', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf49', get_index_1, reduction)
        return store_reduction


op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 33554432})]
op50.unmet_dependencies = [MemoryDep('buf48', c0, {c0: 33554432}), MemoryDep('buf49', c0, {c0: 65536})]
op50.met_dependencies = []
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
    buf50.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op50.group.device = cpu
op50.group.iteration = ((65536, 512), ())
op50.sizes = ([65536, 512], [])
buf48_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
buf49_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
buf50_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
class op50_loop_body:
    var_ranges = {p0: 65536, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf48', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf49', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf50', get_index_2, truediv, None)
        return store


op51: ExternKernelSchedulerNode(ExternKernelOut)
op51.writes = [StarDep(name='buf51', mode=None)]
op51.unmet_dependencies = [StarDep(name='buf36', mode=None), StarDep(name='buf50', mode=None)]
op51.met_dependencies = []
op51.outputs = [
    buf51: ExternKernelOut
    buf51.layout = FixedLayout('cpu', torch.float32, size=[128, 512, 32], stride=[16384, 32, 1])
    buf51.users = [NodeUser(node=SchedulerNode(name='op52'), can_inplace=True, is_weak=False)]
]
op51.node.kernel = extern_kernels.bmm


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 2097152})]
op52.unmet_dependencies = [MemoryDep('buf30', c0, {c0: 2097152}), MemoryDep('buf51', c0, {c0: 2097152})]
op52.met_dependencies = []
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf52.users = [
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op52.group.device = cpu
op52.group.iteration = ((2097152,), ())
op52.sizes = ([2097152], [])
buf51_layout = FixedLayout('cpu', torch.float32, size=[128, 512, 32], stride=[16384, 32, 1])
buf30_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf52_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op52_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf30', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf52', get_index_2, add, None)
        return store


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 8192})]
op53.unmet_dependencies = [MemoryDep('buf52', c0, {c0: 2097152})]
op53.met_dependencies = []
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf53.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False)]
]
op53.group.device = cpu
op53.group.iteration = ((8192,), (256,))
op53.sizes = ([8192], [256])
buf52_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf53_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op53_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf53', get_index_1, reduction)
        return store_reduction


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 8192})]
op54.unmet_dependencies = [MemoryDep('buf53', c0, {c0: 8192})]
op54.met_dependencies = []
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
    buf54.users = [
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op54.group.device = cpu
op54.group.iteration = ((8192,), ())
op54.sizes = ([8192], [])
buf53_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf54_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
class op54_loop_body:
    var_ranges = {p0: 8192}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.1920928955078125e-07, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf54', get_index_1, rsqrt, None)
        return store


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 2097152})]
op55.unmet_dependencies = [MemoryDep('buf52', c0, {c0: 2097152}), MemoryDep('buf54', c0, {c0: 8192})]
op55.met_dependencies = [MemoryDep('primals_31', c1, {c0: 8192, c1: 256})]
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf55.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op55.group.device = cpu
op55.group.iteration = ((8192, 256), ())
op55.sizes = ([8192, 256], [])
buf52_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf54_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
primals_31_layout = FixedLayout('cpu', torch.float32, size=[256], stride=[1])
buf55_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op55_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf54', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_31', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf55', get_index_3, mul_1, None)
        return store


op56: ExternKernelSchedulerNode(ExternKernelOut)
op56.writes = [StarDep(name='buf56', mode=None)]
op56.unmet_dependencies = [StarDep(name='buf55', mode=None)]
op56.met_dependencies = [StarDep(name='primals_32', mode=None), StarDep(name='primals_33', mode=None)]
op56.outputs = [
    buf56: ExternKernelOut
    buf56.layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
    buf56.users = [
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op56.node.kernel = extern_kernels.addmm


op57: ExternKernelSchedulerNode(ExternKernelOut)
op57.writes = [StarDep(name='buf57', mode=None)]
op57.unmet_dependencies = [StarDep(name='buf55', mode=None)]
op57.met_dependencies = [StarDep(name='primals_34', mode=None), StarDep(name='primals_35', mode=None)]
op57.outputs = [
    buf57: ExternKernelOut
    buf57.layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
    buf57.users = [
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op57.node.kernel = extern_kernels.addmm


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 5586944})]
op58.unmet_dependencies = [MemoryDep('buf56', c0, {c0: 5586944}), MemoryDep('buf57', c0, {c0: 5586944})]
op58.met_dependencies = []
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 682], stride=[349184, 682, 1])
    buf58.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op58.group.device = cpu
op58.group.iteration = ((5586944,), ())
op58.sizes = ([5586944], [])
buf56_layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
buf57_layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
buf58_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 682], stride=[349184, 682, 1])
class op58_loop_body:
    var_ranges = {p0: 5586944}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf56', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf57', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf58', get_index_3, mul_1, None)
        return store


op59: ExternKernelSchedulerNode(ExternKernelOut)
op59.writes = [StarDep(name='buf59', mode=None)]
op59.unmet_dependencies = [StarDep(name='buf58', mode=None)]
op59.met_dependencies = [StarDep(name='primals_36', mode=None), StarDep(name='primals_37', mode=None)]
op59.outputs = [
    buf59: ExternKernelOut
    buf59.layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
    buf59.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False)]
]
op59.node.kernel = extern_kernels.addmm


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 2097152})]
op60.unmet_dependencies = [MemoryDep('buf55', c0, {c0: 2097152}), MemoryDep('buf59', c0, {c0: 2097152})]
op60.met_dependencies = []
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf60.users = [
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op60.group.device = cpu
op60.group.iteration = ((2097152,), ())
op60.sizes = ([2097152], [])
buf59_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
buf55_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf60_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op60_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf55', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf60', get_index_2, add, None)
        return store


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 8192})]
op61.unmet_dependencies = [MemoryDep('buf60', c0, {c0: 2097152})]
op61.met_dependencies = []
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf61.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False)]
]
op61.group.device = cpu
op61.group.iteration = ((8192,), (256,))
op61.sizes = ([8192], [256])
buf60_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf61_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op61_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf61', get_index_1, reduction)
        return store_reduction


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 8192})]
op62.unmet_dependencies = [MemoryDep('buf61', c0, {c0: 8192})]
op62.met_dependencies = []
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
    buf62.users = [
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op62.group.device = cpu
op62.group.iteration = ((8192,), ())
op62.sizes = ([8192], [])
buf61_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf62_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
class op62_loop_body:
    var_ranges = {p0: 8192}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.1920928955078125e-07, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf62', get_index_1, rsqrt, None)
        return store


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 2097152})]
op63.unmet_dependencies = [MemoryDep('buf60', c0, {c0: 2097152}), MemoryDep('buf62', c0, {c0: 8192})]
op63.met_dependencies = [MemoryDep('primals_38', c1, {c0: 8192, c1: 256})]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf63.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op63.group.device = cpu
op63.group.iteration = ((8192, 256), ())
op63.sizes = ([8192, 256], [])
buf60_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf62_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
primals_38_layout = FixedLayout('cpu', torch.float32, size=[256], stride=[1])
buf63_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op63_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf62', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_38', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf63', get_index_3, mul_1, None)
        return store


op64: ExternKernelSchedulerNode(ExternKernelOut)
op64.writes = [StarDep(name='buf64', mode=None)]
op64.unmet_dependencies = [StarDep(name='buf63', mode=None)]
op64.met_dependencies = [StarDep(name='primals_39', mode=None), StarDep(name='primals_40', mode=None)]
op64.outputs = [
    buf64: ExternKernelOut
    buf64.layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
    buf64.users = [
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
    ]
]
op64.node.kernel = extern_kernels.addmm


op65: ExternKernelSchedulerNode(ExternKernelOut)
op65.writes = [StarDep(name='buf65', mode=None)]
op65.unmet_dependencies = [StarDep(name='buf63', mode=None)]
op65.met_dependencies = [StarDep(name='primals_41', mode=None), StarDep(name='primals_42', mode=None)]
op65.outputs = [
    buf65: ExternKernelOut
    buf65.layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
    buf65.users = [
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
    ]
]
op65.node.kernel = extern_kernels.addmm


op66: ExternKernelSchedulerNode(ExternKernelOut)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf63', mode=None)]
op66.met_dependencies = [StarDep(name='primals_43', mode=None), StarDep(name='primals_44', mode=None)]
op66.outputs = [
    buf66: ExternKernelOut
    buf66.layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
    buf66.users = [
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op66.node.kernel = extern_kernels.addmm


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 262144})]
op67.unmet_dependencies = [MemoryDep('buf65', c0, {c0: 262144})]
op67.met_dependencies = []
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cpu', torch.float16, size=[16, 512, 32], stride=[16384, 32, 1])
    buf67.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op67.group.device = cpu
op67.group.iteration = ((262144,), ())
op67.sizes = ([262144], [])
buf65_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
buf67_layout = FixedLayout('cpu', torch.float16, size=[16, 512, 32], stride=[16384, 32, 1])
class op67_loop_body:
    var_ranges = {p0: 262144}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf67', get_index_1, to_dtype, None)
        return store


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 2097152})]
op68.unmet_dependencies = [MemoryDep('buf66', c0, {c0: 2097152})]
op68.met_dependencies = []
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cpu', torch.float16, size=[16, 512, 256], stride=[131072, 256, 1])
    buf68.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op68.group.device = cpu
op68.group.iteration = ((2097152,), ())
op68.sizes = ([2097152], [])
buf66_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
buf68_layout = FixedLayout('cpu', torch.float16, size=[16, 512, 256], stride=[131072, 256, 1])
class op68_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf68', get_index_1, to_dtype, None)
        return store


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', 2*c0, {c0: 1048576})]
op69.unmet_dependencies = 
    [   MemoryDep('buf64', 2*c0 + 1, {c0: 1048576}),
        MemoryDep('buf64', 2*c0, {c0: 1048576})]
op69.met_dependencies = 
    [   MemoryDep('primals_45', 2*c1, {c0: 65536, c1: 16}),
        MemoryDep('primals_46', 2*c1, {c0: 65536, c1: 16})]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
    buf69.aliases = ['buf71']
    buf69.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op69.group.device = cpu
op69.group.iteration = ((65536, 16), ())
op69.sizes = ([65536, 16], [])
buf64_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_45_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf64_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_46_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf69_layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
class op69_loop_body:
    var_ranges = {p0: 65536, p1: 16}
    index0 = 32*p0 + 2*p1
    index1 = 2*p1
    index2 = 32*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_45', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf64', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_46', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        sub = ops.sub(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf69', get_index_4, sub, None)
        return store


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', 2*c0, {c0: 1048576})]
op70.unmet_dependencies = 
    [   MemoryDep('buf64', 2*c0 + 1, {c0: 1048576}),
        MemoryDep('buf64', 2*c0, {c0: 1048576})]
op70.met_dependencies = 
    [   MemoryDep('primals_45', 2*c1, {c0: 65536, c1: 16}),
        MemoryDep('primals_46', 2*c1, {c0: 65536, c1: 16})]
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
    buf70.aliases = ['buf71']
    buf70.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op70.group.device = cpu
op70.group.iteration = ((65536, 16), ())
op70.sizes = ([65536, 16], [])
buf64_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_46_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf64_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_45_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf70_layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
class op70_loop_body:
    var_ranges = {p0: 65536, p1: 16}
    index0 = 32*p0 + 2*p1
    index1 = 2*p1
    index2 = 32*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_46', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf64', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_45', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf70', get_index_4, add, None)
        return store


op71: NopKernelSchedulerNode(ConcatKernel)
op71.writes = [StarDep(name='buf71', mode=None)]
op71.unmet_dependencies = [StarDep(name='buf69', mode=None), StarDep(name='buf70', mode=None)]
op71.met_dependencies = []
op71.outputs = [
    buf71: ConcatKernel
    buf71.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 16, 2], stride=[131072, 16384, 32, 2, 1])
    buf71.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', 2*c0, {c0: 131072})]
op72.unmet_dependencies = 
    [   MemoryDep('buf65', 2*c0 + 1, {c0: 131072}),
        MemoryDep('buf65', 2*c0, {c0: 131072})]
op72.met_dependencies = 
    [   MemoryDep('primals_45', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_46', 2*c1, {c0: 16, c1: 8192})]
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf72.aliases = ['buf74']
    buf72.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
    ]
]
op72.group.device = cpu
op72.group.iteration = ((16, 8192), ())
op72.sizes = ([16, 8192], [])
buf65_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_45_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf65_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_46_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf72_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
class op72_loop_body:
    var_ranges = {p0: 16, p1: 8192}
    index0 = 16384*p0 + 2*p1
    index1 = 2*p1
    index2 = 16384*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_45', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf65', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_46', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        sub = ops.sub(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf72', get_index_4, sub, None)
        return store


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', 2*c0, {c0: 131072})]
op73.unmet_dependencies = 
    [   MemoryDep('buf65', 2*c0 + 1, {c0: 131072}),
        MemoryDep('buf65', 2*c0, {c0: 131072})]
op73.met_dependencies = 
    [   MemoryDep('primals_45', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_46', 2*c1, {c0: 16, c1: 8192})]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf73.aliases = ['buf74']
    buf73.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
    ]
]
op73.group.device = cpu
op73.group.iteration = ((16, 8192), ())
op73.sizes = ([16, 8192], [])
buf65_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_46_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf65_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_45_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf73_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
class op73_loop_body:
    var_ranges = {p0: 16, p1: 8192}
    index0 = 16384*p0 + 2*p1
    index1 = 2*p1
    index2 = 16384*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_46', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf65', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_45', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf73', get_index_4, add, None)
        return store


op74: NopKernelSchedulerNode(ConcatKernel)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = [StarDep(name='buf72', mode=None), StarDep(name='buf73', mode=None)]
op74.met_dependencies = []
op74.outputs = [
    buf74: ConcatKernel
    buf74.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
    buf74.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
    ]
]


op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 2097152})]
op75.unmet_dependencies = [MemoryDep('buf74', 16384*c0 + c2 + 32*c3, {c0: 16, c1: 8, c2: 32, c3: 512})]
op75.met_dependencies = []
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 32, 512], stride=[131072, 16384, 512, 1])
    buf75.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op75.group.device = cpu
op75.group.iteration = ((16, 8, 32, 512), ())
op75.sizes = ([16, 8, 32, 512], [])
buf74_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 32, 512], stride=[131072, 16384, 512, 1])
class op75_loop_body:
    var_ranges = {p0: 16, p1: 8, p2: 32, p3: 512}
    index0 = 16384*p0 + p2 + 32*p3
    index1 = 131072*p0 + 16384*p1 + 512*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf75', get_index_1, load, None)
        return store


op76: ExternKernelSchedulerNode(ExternKernelOut)
op76.writes = [StarDep(name='buf76', mode=None)]
op76.unmet_dependencies = [StarDep(name='buf71', mode=None), StarDep(name='buf75', mode=None)]
op76.met_dependencies = []
op76.outputs = [
    buf76: ExternKernelOut
    buf76.layout = FixedLayout('cpu', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf76.users = [
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False),
    ]
]
op76.node.kernel = extern_kernels.bmm


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 65536})]
op77.unmet_dependencies = [MemoryDep('buf76', c0, {c0: 33554432})]
op77.met_dependencies = [MemoryDep('primals_47', c1, {c0: 128, c1: 262144})]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
    buf77.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op77.group.device = cpu
op77.group.iteration = ((128, 512), (512,))
op77.sizes = ([128, 512], [512])
primals_47_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 512, 512], stride=[262144, 262144, 512, 1])
buf76_layout = FixedLayout('cpu', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf77_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
class op77_loop_body:
    var_ranges = {p0: 128, p1: 512, p2: 512}
    index0 = 512*p1 + p2
    index1 = 262144*p0 + 512*p1 + p2
    index2 = 512*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_47', get_index)
        to_dtype = ops.to_dtype(load, torch.int64, src_dtype = torch.bool)
        constant = ops.constant(0, torch.int64)
        eq = ops.eq(to_dtype, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf76', get_index_1)
        constant_1 = ops.constant(0.17677669529663687, torch.float32)
        mul = ops.mul(load_1, constant_1)
        constant_2 = ops.constant(-inf, torch.float32)
        where = ops.where(eq, constant_2, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf77', get_index_2, reduction)
        return store_reduction


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 33554432})]
op78.unmet_dependencies = [MemoryDep('buf76', c0, {c0: 33554432}), MemoryDep('buf77', c0, {c0: 65536})]
op78.met_dependencies = [MemoryDep('primals_47', c1, {c0: 128, c1: 262144})]
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
    buf78.users = [
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=True, is_weak=False),
    ]
]
op78.group.device = cpu
op78.group.iteration = ((128, 512, 512), ())
op78.sizes = ([128, 512, 512], [])
primals_47_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 512, 512], stride=[262144, 262144, 512, 1])
buf76_layout = FixedLayout('cpu', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf77_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
buf78_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
class op78_loop_body:
    var_ranges = {p0: 128, p1: 512, p2: 512}
    index0 = 512*p1 + p2
    index1 = 262144*p0 + 512*p1 + p2
    index2 = 512*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_47', get_index)
        to_dtype = ops.to_dtype(load, torch.int64, src_dtype = torch.bool)
        constant = ops.constant(0, torch.int64)
        eq = ops.eq(to_dtype, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf76', get_index_1)
        constant_1 = ops.constant(0.17677669529663687, torch.float32)
        mul = ops.mul(load_1, constant_1)
        constant_2 = ops.constant(-inf, torch.float32)
        where = ops.where(eq, constant_2, mul)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf77', get_index_2)
        sub = ops.sub(where, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf78', get_index_3, exp, None)
        return store


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 65536})]
op79.unmet_dependencies = [MemoryDep('buf78', c0, {c0: 33554432})]
op79.met_dependencies = []
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
    buf79.users = [NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op79.group.device = cpu
op79.group.iteration = ((65536,), (512,))
op79.sizes = ([65536], [512])
buf78_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
buf79_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
class op79_loop_body:
    var_ranges = {p0: 65536, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf79', get_index_1, reduction)
        return store_reduction


op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 33554432})]
op80.unmet_dependencies = [MemoryDep('buf78', c0, {c0: 33554432}), MemoryDep('buf79', c0, {c0: 65536})]
op80.met_dependencies = []
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
    buf80.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op80.group.device = cpu
op80.group.iteration = ((65536, 512), ())
op80.sizes = ([65536, 512], [])
buf78_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
buf79_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
buf80_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
class op80_loop_body:
    var_ranges = {p0: 65536, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf79', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf80', get_index_2, truediv, None)
        return store


op81: ExternKernelSchedulerNode(ExternKernelOut)
op81.writes = [StarDep(name='buf81', mode=None)]
op81.unmet_dependencies = [StarDep(name='buf66', mode=None), StarDep(name='buf80', mode=None)]
op81.met_dependencies = []
op81.outputs = [
    buf81: ExternKernelOut
    buf81.layout = FixedLayout('cpu', torch.float32, size=[128, 512, 32], stride=[16384, 32, 1])
    buf81.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False)]
]
op81.node.kernel = extern_kernels.bmm


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 2097152})]
op82.unmet_dependencies = [MemoryDep('buf60', c0, {c0: 2097152}), MemoryDep('buf81', c0, {c0: 2097152})]
op82.met_dependencies = []
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf82.users = [
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op82.group.device = cpu
op82.group.iteration = ((2097152,), ())
op82.sizes = ([2097152], [])
buf81_layout = FixedLayout('cpu', torch.float32, size=[128, 512, 32], stride=[16384, 32, 1])
buf60_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf82_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op82_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf60', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf82', get_index_2, add, None)
        return store


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 8192})]
op83.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 2097152})]
op83.met_dependencies = []
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False)]
]
op83.group.device = cpu
op83.group.iteration = ((8192,), (256,))
op83.sizes = ([8192], [256])
buf82_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf83_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op83_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf83', get_index_1, reduction)
        return store_reduction


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 8192})]
op84.unmet_dependencies = [MemoryDep('buf83', c0, {c0: 8192})]
op84.met_dependencies = []
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
    buf84.users = [
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op84.group.device = cpu
op84.group.iteration = ((8192,), ())
op84.sizes = ([8192], [])
buf83_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf84_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
class op84_loop_body:
    var_ranges = {p0: 8192}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.1920928955078125e-07, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf84', get_index_1, rsqrt, None)
        return store


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 2097152})]
op85.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 2097152}), MemoryDep('buf84', c0, {c0: 8192})]
op85.met_dependencies = [MemoryDep('primals_48', c1, {c0: 8192, c1: 256})]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf85.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op85.group.device = cpu
op85.group.iteration = ((8192, 256), ())
op85.sizes = ([8192, 256], [])
buf82_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf84_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
primals_48_layout = FixedLayout('cpu', torch.float32, size=[256], stride=[1])
buf85_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op85_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf84', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_48', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf85', get_index_3, mul_1, None)
        return store


op86: ExternKernelSchedulerNode(ExternKernelOut)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf85', mode=None)]
op86.met_dependencies = [StarDep(name='primals_49', mode=None), StarDep(name='primals_50', mode=None)]
op86.outputs = [
    buf86: ExternKernelOut
    buf86.layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
    buf86.users = [
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op86.node.kernel = extern_kernels.addmm


op87: ExternKernelSchedulerNode(ExternKernelOut)
op87.writes = [StarDep(name='buf87', mode=None)]
op87.unmet_dependencies = [StarDep(name='buf85', mode=None)]
op87.met_dependencies = [StarDep(name='primals_51', mode=None), StarDep(name='primals_52', mode=None)]
op87.outputs = [
    buf87: ExternKernelOut
    buf87.layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
    buf87.users = [
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op87.node.kernel = extern_kernels.addmm


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 5586944})]
op88.unmet_dependencies = [MemoryDep('buf86', c0, {c0: 5586944}), MemoryDep('buf87', c0, {c0: 5586944})]
op88.met_dependencies = []
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 682], stride=[349184, 682, 1])
    buf88.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op88.group.device = cpu
op88.group.iteration = ((5586944,), ())
op88.sizes = ([5586944], [])
buf86_layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
buf87_layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
buf88_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 682], stride=[349184, 682, 1])
class op88_loop_body:
    var_ranges = {p0: 5586944}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf86', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf87', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf88', get_index_3, mul_1, None)
        return store


op89: ExternKernelSchedulerNode(ExternKernelOut)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf88', mode=None)]
op89.met_dependencies = [StarDep(name='primals_53', mode=None), StarDep(name='primals_54', mode=None)]
op89.outputs = [
    buf89: ExternKernelOut
    buf89.layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
    buf89.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=True, is_weak=False)]
]
op89.node.kernel = extern_kernels.addmm


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 2097152})]
op90.unmet_dependencies = [MemoryDep('buf85', c0, {c0: 2097152}), MemoryDep('buf89', c0, {c0: 2097152})]
op90.met_dependencies = []
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf90.users = [
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op90.group.device = cpu
op90.group.iteration = ((2097152,), ())
op90.sizes = ([2097152], [])
buf89_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
buf85_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf90_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op90_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf85', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf90', get_index_2, add, None)
        return store


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 8192})]
op91.unmet_dependencies = [MemoryDep('buf90', c0, {c0: 2097152})]
op91.met_dependencies = []
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf91.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False)]
]
op91.group.device = cpu
op91.group.iteration = ((8192,), (256,))
op91.sizes = ([8192], [256])
buf90_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf91_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op91_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf91', get_index_1, reduction)
        return store_reduction


op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 8192})]
op92.unmet_dependencies = [MemoryDep('buf91', c0, {c0: 8192})]
op92.met_dependencies = []
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op92.group.device = cpu
op92.group.iteration = ((8192,), ())
op92.sizes = ([8192], [])
buf91_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf92_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
class op92_loop_body:
    var_ranges = {p0: 8192}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.1920928955078125e-07, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf92', get_index_1, rsqrt, None)
        return store


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 2097152})]
op93.unmet_dependencies = [MemoryDep('buf90', c0, {c0: 2097152}), MemoryDep('buf92', c0, {c0: 8192})]
op93.met_dependencies = [MemoryDep('primals_55', c1, {c0: 8192, c1: 256})]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf93.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op93.group.device = cpu
op93.group.iteration = ((8192, 256), ())
op93.sizes = ([8192, 256], [])
buf90_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf92_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
primals_55_layout = FixedLayout('cpu', torch.float32, size=[256], stride=[1])
buf93_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op93_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf92', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_55', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf93', get_index_3, mul_1, None)
        return store


op94: ExternKernelSchedulerNode(ExternKernelOut)
op94.writes = [StarDep(name='buf94', mode=None)]
op94.unmet_dependencies = [StarDep(name='buf93', mode=None)]
op94.met_dependencies = [StarDep(name='primals_56', mode=None), StarDep(name='primals_57', mode=None)]
op94.outputs = [
    buf94: ExternKernelOut
    buf94.layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
    buf94.users = [
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
    ]
]
op94.node.kernel = extern_kernels.addmm


op95: ExternKernelSchedulerNode(ExternKernelOut)
op95.writes = [StarDep(name='buf95', mode=None)]
op95.unmet_dependencies = [StarDep(name='buf93', mode=None)]
op95.met_dependencies = [StarDep(name='primals_58', mode=None), StarDep(name='primals_59', mode=None)]
op95.outputs = [
    buf95: ExternKernelOut
    buf95.layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
    buf95.users = [
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
    ]
]
op95.node.kernel = extern_kernels.addmm


op96: ExternKernelSchedulerNode(ExternKernelOut)
op96.writes = [StarDep(name='buf96', mode=None)]
op96.unmet_dependencies = [StarDep(name='buf93', mode=None)]
op96.met_dependencies = [StarDep(name='primals_60', mode=None), StarDep(name='primals_61', mode=None)]
op96.outputs = [
    buf96: ExternKernelOut
    buf96.layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
    buf96.users = [
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op96.node.kernel = extern_kernels.addmm


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 262144})]
op97.unmet_dependencies = [MemoryDep('buf95', c0, {c0: 262144})]
op97.met_dependencies = []
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cpu', torch.float16, size=[16, 512, 32], stride=[16384, 32, 1])
    buf97.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op97.group.device = cpu
op97.group.iteration = ((262144,), ())
op97.sizes = ([262144], [])
buf95_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
buf97_layout = FixedLayout('cpu', torch.float16, size=[16, 512, 32], stride=[16384, 32, 1])
class op97_loop_body:
    var_ranges = {p0: 262144}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf97', get_index_1, to_dtype, None)
        return store


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 2097152})]
op98.unmet_dependencies = [MemoryDep('buf96', c0, {c0: 2097152})]
op98.met_dependencies = []
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cpu', torch.float16, size=[16, 512, 256], stride=[131072, 256, 1])
    buf98.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op98.group.device = cpu
op98.group.iteration = ((2097152,), ())
op98.sizes = ([2097152], [])
buf96_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
buf98_layout = FixedLayout('cpu', torch.float16, size=[16, 512, 256], stride=[131072, 256, 1])
class op98_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf98', get_index_1, to_dtype, None)
        return store


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', 2*c0, {c0: 1048576})]
op99.unmet_dependencies = 
    [   MemoryDep('buf94', 2*c0 + 1, {c0: 1048576}),
        MemoryDep('buf94', 2*c0, {c0: 1048576})]
op99.met_dependencies = 
    [   MemoryDep('primals_62', 2*c1, {c0: 65536, c1: 16}),
        MemoryDep('primals_63', 2*c1, {c0: 65536, c1: 16})]
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
    buf99.aliases = ['buf101']
    buf99.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op99.group.device = cpu
op99.group.iteration = ((65536, 16), ())
op99.sizes = ([65536, 16], [])
buf94_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_62_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf94_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_63_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf99_layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
class op99_loop_body:
    var_ranges = {p0: 65536, p1: 16}
    index0 = 32*p0 + 2*p1
    index1 = 2*p1
    index2 = 32*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_62', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf94', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_63', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        sub = ops.sub(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf99', get_index_4, sub, None)
        return store


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', 2*c0, {c0: 1048576})]
op100.unmet_dependencies = 
    [   MemoryDep('buf94', 2*c0 + 1, {c0: 1048576}),
        MemoryDep('buf94', 2*c0, {c0: 1048576})]
op100.met_dependencies = 
    [   MemoryDep('primals_62', 2*c1, {c0: 65536, c1: 16}),
        MemoryDep('primals_63', 2*c1, {c0: 65536, c1: 16})]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
    buf100.aliases = ['buf101']
    buf100.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op100.group.device = cpu
op100.group.iteration = ((65536, 16), ())
op100.sizes = ([65536, 16], [])
buf94_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_63_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf94_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
primals_62_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf100_layout = NonOwningLayout('cpu', torch.float32, size=[16, 8, 512, 16, 1], stride=[131072, 16384, 32, 2, 1])
class op100_loop_body:
    var_ranges = {p0: 65536, p1: 16}
    index0 = 32*p0 + 2*p1
    index1 = 2*p1
    index2 = 32*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_63', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf94', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_62', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf100', get_index_4, add, None)
        return store


op101: NopKernelSchedulerNode(ConcatKernel)
op101.writes = [StarDep(name='buf101', mode=None)]
op101.unmet_dependencies = [StarDep(name='buf100', mode=None), StarDep(name='buf99', mode=None)]
op101.met_dependencies = []
op101.outputs = [
    buf101: ConcatKernel
    buf101.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 16, 2], stride=[131072, 16384, 32, 2, 1])
    buf101.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]


op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', 2*c0, {c0: 131072})]
op102.unmet_dependencies = 
    [   MemoryDep('buf95', 2*c0 + 1, {c0: 131072}),
        MemoryDep('buf95', 2*c0, {c0: 131072})]
op102.met_dependencies = 
    [   MemoryDep('primals_62', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_63', 2*c1, {c0: 16, c1: 8192})]
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf102.aliases = ['buf104']
    buf102.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
    ]
]
op102.group.device = cpu
op102.group.iteration = ((16, 8192), ())
op102.sizes = ([16, 8192], [])
buf95_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_62_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf95_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_63_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf102_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
class op102_loop_body:
    var_ranges = {p0: 16, p1: 8192}
    index0 = 16384*p0 + 2*p1
    index1 = 2*p1
    index2 = 16384*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_62', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf95', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_63', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        sub = ops.sub(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf102', get_index_4, sub, None)
        return store


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', 2*c0, {c0: 131072})]
op103.unmet_dependencies = 
    [   MemoryDep('buf95', 2*c0 + 1, {c0: 131072}),
        MemoryDep('buf95', 2*c0, {c0: 131072})]
op103.met_dependencies = 
    [   MemoryDep('primals_62', 2*c1, {c0: 16, c1: 8192}),
        MemoryDep('primals_63', 2*c1, {c0: 16, c1: 8192})]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
    buf103.aliases = ['buf104']
    buf103.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
    ]
]
op103.group.device = cpu
op103.group.iteration = ((16, 8192), ())
op103.sizes = ([16, 8192], [])
buf95_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_63_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf95_layout = FixedLayout('cpu', torch.float32, size=[8192, 32], stride=[32, 1])
primals_62_layout = FixedLayout('cpu', torch.float16, size=[512, 32], stride=[32, 1])
buf103_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1, 512, 16, 1], stride=[16384, 1, 32, 2, 1])
class op103_loop_body:
    var_ranges = {p0: 16, p1: 8192}
    index0 = 16384*p0 + 2*p1
    index1 = 2*p1
    index2 = 16384*p0 + 2*p1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_63', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.float16)
        mul = ops.mul(load, to_dtype)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf95', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_62', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        mul_1 = ops.mul(load_2, to_dtype_1)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf103', get_index_4, add, None)
        return store


op104: NopKernelSchedulerNode(ConcatKernel)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf102', mode=None), StarDep(name='buf103', mode=None)]
op104.met_dependencies = []
op104.outputs = [
    buf104: ConcatKernel
    buf104.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
    buf104.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
    ]
]


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 2097152})]
op105.unmet_dependencies = [MemoryDep('buf104', 16384*c0 + c2 + 32*c3, {c0: 16, c1: 8, c2: 32, c3: 512})]
op105.met_dependencies = []
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 32, 512], stride=[131072, 16384, 512, 1])
    buf105.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op105.group.device = cpu
op105.group.iteration = ((16, 8, 32, 512), ())
op105.sizes = ([16, 8, 32, 512], [])
buf104_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 512, 16, 2], stride=(16384, 1, 32, 2, 1))
buf105_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 32, 512], stride=[131072, 16384, 512, 1])
class op105_loop_body:
    var_ranges = {p0: 16, p1: 8, p2: 32, p3: 512}
    index0 = 16384*p0 + p2 + 32*p3
    index1 = 131072*p0 + 16384*p1 + 512*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf105', get_index_1, load, None)
        return store


op106: ExternKernelSchedulerNode(ExternKernelOut)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf101', mode=None), StarDep(name='buf105', mode=None)]
op106.met_dependencies = []
op106.outputs = [
    buf106: ExternKernelOut
    buf106.layout = FixedLayout('cpu', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf106.users = [
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=True, is_weak=False),
    ]
]
op106.node.kernel = extern_kernels.bmm


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 65536})]
op107.unmet_dependencies = [MemoryDep('buf106', c0, {c0: 33554432})]
op107.met_dependencies = [MemoryDep('primals_64', c1, {c0: 128, c1: 262144})]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
    buf107.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op107.group.device = cpu
op107.group.iteration = ((128, 512), (512,))
op107.sizes = ([128, 512], [512])
primals_64_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 512, 512], stride=[262144, 262144, 512, 1])
buf106_layout = FixedLayout('cpu', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf107_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
class op107_loop_body:
    var_ranges = {p0: 128, p1: 512, p2: 512}
    index0 = 512*p1 + p2
    index1 = 262144*p0 + 512*p1 + p2
    index2 = 512*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_64', get_index)
        to_dtype = ops.to_dtype(load, torch.int64, src_dtype = torch.bool)
        constant = ops.constant(0, torch.int64)
        eq = ops.eq(to_dtype, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf106', get_index_1)
        constant_1 = ops.constant(0.17677669529663687, torch.float32)
        mul = ops.mul(load_1, constant_1)
        constant_2 = ops.constant(-inf, torch.float32)
        where = ops.where(eq, constant_2, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', where)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf107', get_index_2, reduction)
        return store_reduction


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 33554432})]
op108.unmet_dependencies = [MemoryDep('buf106', c0, {c0: 33554432}), MemoryDep('buf107', c0, {c0: 65536})]
op108.met_dependencies = [MemoryDep('primals_64', c1, {c0: 128, c1: 262144})]
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
    buf108.users = [
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False),
    ]
]
op108.group.device = cpu
op108.group.iteration = ((128, 512, 512), ())
op108.sizes = ([128, 512, 512], [])
primals_64_layout = FixedLayout('cpu', torch.bool, size=[1, 1, 512, 512], stride=[262144, 262144, 512, 1])
buf106_layout = FixedLayout('cpu', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf107_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
buf108_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
class op108_loop_body:
    var_ranges = {p0: 128, p1: 512, p2: 512}
    index0 = 512*p1 + p2
    index1 = 262144*p0 + 512*p1 + p2
    index2 = 512*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_64', get_index)
        to_dtype = ops.to_dtype(load, torch.int64, src_dtype = torch.bool)
        constant = ops.constant(0, torch.int64)
        eq = ops.eq(to_dtype, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf106', get_index_1)
        constant_1 = ops.constant(0.17677669529663687, torch.float32)
        mul = ops.mul(load_1, constant_1)
        constant_2 = ops.constant(-inf, torch.float32)
        where = ops.where(eq, constant_2, mul)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf107', get_index_2)
        sub = ops.sub(where, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf108', get_index_3, exp, None)
        return store


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 65536})]
op109.unmet_dependencies = [MemoryDep('buf108', c0, {c0: 33554432})]
op109.met_dependencies = []
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
    buf109.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op109.group.device = cpu
op109.group.iteration = ((65536,), (512,))
op109.sizes = ([65536], [512])
buf108_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
buf109_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
class op109_loop_body:
    var_ranges = {p0: 65536, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf109', get_index_1, reduction)
        return store_reduction


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 33554432})]
op110.unmet_dependencies = [MemoryDep('buf108', c0, {c0: 33554432}), MemoryDep('buf109', c0, {c0: 65536})]
op110.met_dependencies = []
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
    buf110.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op110.group.device = cpu
op110.group.iteration = ((65536, 512), ())
op110.sizes = ([65536, 512], [])
buf108_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
buf109_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 1], stride=[4096, 512, 1, 65536])
buf110_layout = FixedLayout('cpu', torch.float32, size=[16, 8, 512, 512], stride=[2097152, 262144, 512, 1])
class op110_loop_body:
    var_ranges = {p0: 65536, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf109', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf110', get_index_2, truediv, None)
        return store


op111: ExternKernelSchedulerNode(ExternKernelOut)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf110', mode=None), StarDep(name='buf96', mode=None)]
op111.met_dependencies = []
op111.outputs = [
    buf111: ExternKernelOut
    buf111.layout = FixedLayout('cpu', torch.float32, size=[128, 512, 32], stride=[16384, 32, 1])
    buf111.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False)]
]
op111.node.kernel = extern_kernels.bmm


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 2097152})]
op112.unmet_dependencies = [MemoryDep('buf111', c0, {c0: 2097152}), MemoryDep('buf90', c0, {c0: 2097152})]
op112.met_dependencies = []
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf112.users = [
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op112.group.device = cpu
op112.group.iteration = ((2097152,), ())
op112.sizes = ([2097152], [])
buf111_layout = FixedLayout('cpu', torch.float32, size=[128, 512, 32], stride=[16384, 32, 1])
buf90_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf112_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op112_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf90', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf112', get_index_2, add, None)
        return store


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 8192})]
op113.unmet_dependencies = [MemoryDep('buf112', c0, {c0: 2097152})]
op113.met_dependencies = []
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf113.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False)]
]
op113.group.device = cpu
op113.group.iteration = ((8192,), (256,))
op113.sizes = ([8192], [256])
buf112_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf113_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op113_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf113', get_index_1, reduction)
        return store_reduction


op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 8192})]
op114.unmet_dependencies = [MemoryDep('buf113', c0, {c0: 8192})]
op114.met_dependencies = []
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
    buf114.users = [
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op114.group.device = cpu
op114.group.iteration = ((8192,), ())
op114.sizes = ([8192], [])
buf113_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf114_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
class op114_loop_body:
    var_ranges = {p0: 8192}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.1920928955078125e-07, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf114', get_index_1, rsqrt, None)
        return store


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 2097152})]
op115.unmet_dependencies = [MemoryDep('buf112', c0, {c0: 2097152}), MemoryDep('buf114', c0, {c0: 8192})]
op115.met_dependencies = [MemoryDep('primals_65', c1, {c0: 8192, c1: 256})]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf115.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op115.group.device = cpu
op115.group.iteration = ((8192, 256), ())
op115.sizes = ([8192, 256], [])
buf112_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf114_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
primals_65_layout = FixedLayout('cpu', torch.float32, size=[256], stride=[1])
buf115_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op115_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf114', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_65', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf115', get_index_3, mul_1, None)
        return store


op116: ExternKernelSchedulerNode(ExternKernelOut)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf115', mode=None)]
op116.met_dependencies = [StarDep(name='primals_66', mode=None), StarDep(name='primals_67', mode=None)]
op116.outputs = [
    buf116: ExternKernelOut
    buf116.layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
    buf116.users = [
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op116.node.kernel = extern_kernels.addmm


op117: ExternKernelSchedulerNode(ExternKernelOut)
op117.writes = [StarDep(name='buf117', mode=None)]
op117.unmet_dependencies = [StarDep(name='buf115', mode=None)]
op117.met_dependencies = [StarDep(name='primals_68', mode=None), StarDep(name='primals_69', mode=None)]
op117.outputs = [
    buf117: ExternKernelOut
    buf117.layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op117.node.kernel = extern_kernels.addmm


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 5586944})]
op118.unmet_dependencies = [MemoryDep('buf116', c0, {c0: 5586944}), MemoryDep('buf117', c0, {c0: 5586944})]
op118.met_dependencies = []
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 682], stride=[349184, 682, 1])
    buf118.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op118.group.device = cpu
op118.group.iteration = ((5586944,), ())
op118.sizes = ([5586944], [])
buf116_layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
buf117_layout = FixedLayout('cpu', torch.float32, size=[8192, 682], stride=[682, 1])
buf118_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 682], stride=[349184, 682, 1])
class op118_loop_body:
    var_ranges = {p0: 5586944}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf116', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf117', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf118', get_index_3, mul_1, None)
        return store


op119: ExternKernelSchedulerNode(ExternKernelOut)
op119.writes = [StarDep(name='buf119', mode=None)]
op119.unmet_dependencies = [StarDep(name='buf118', mode=None)]
op119.met_dependencies = [StarDep(name='primals_70', mode=None), StarDep(name='primals_71', mode=None)]
op119.outputs = [
    buf119: ExternKernelOut
    buf119.layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
    buf119.users = [NodeUser(node=SchedulerNode(name='op120'), can_inplace=True, is_weak=False)]
]
op119.node.kernel = extern_kernels.addmm


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 2097152})]
op120.unmet_dependencies = [MemoryDep('buf115', c0, {c0: 2097152}), MemoryDep('buf119', c0, {c0: 2097152})]
op120.met_dependencies = []
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf120.users = [
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op120.group.device = cpu
op120.group.iteration = ((2097152,), ())
op120.sizes = ([2097152], [])
buf119_layout = FixedLayout('cpu', torch.float32, size=[8192, 256], stride=[256, 1])
buf115_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf120_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op120_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf115', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf120', get_index_2, add, None)
        return store


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 8192})]
op121.unmet_dependencies = [MemoryDep('buf120', c0, {c0: 2097152})]
op121.met_dependencies = []
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf121.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False)]
]
op121.group.device = cpu
op121.group.iteration = ((8192,), (256,))
op121.sizes = ([8192], [256])
buf120_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf121_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op121_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf121', get_index_1, reduction)
        return store_reduction


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 8192})]
op122.unmet_dependencies = [MemoryDep('buf121', c0, {c0: 8192})]
op122.met_dependencies = []
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
    buf122.users = [
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op122.group.device = cpu
op122.group.iteration = ((8192,), ())
op122.sizes = ([8192], [])
buf121_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf122_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
class op122_loop_body:
    var_ranges = {p0: 8192}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.1920928955078125e-07, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf122', get_index_1, rsqrt, None)
        return store


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 2097152})]
op123.unmet_dependencies = [MemoryDep('buf120', c0, {c0: 2097152}), MemoryDep('buf122', c0, {c0: 8192})]
op123.met_dependencies = [MemoryDep('primals_72', c1, {c0: 8192, c1: 256})]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
    buf123.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op123.group.device = cpu
op123.group.iteration = ((8192, 256), ())
op123.sizes = ([8192, 256], [])
buf120_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
buf122_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 1], stride=[512, 1, 1])
primals_72_layout = FixedLayout('cpu', torch.float32, size=[256], stride=[1])
buf123_layout = FixedLayout('cpu', torch.float32, size=[16, 512, 256], stride=[131072, 256, 1])
class op123_loop_body:
    var_ranges = {p0: 8192, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf122', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_72', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf123', get_index_3, mul_1, None)
        return store


op124: ExternKernelSchedulerNode(ExternKernelOut)
op124.writes = [StarDep(name='buf124', mode=None)]
op124.unmet_dependencies = [StarDep(name='buf123', mode=None)]
op124.met_dependencies = [StarDep(name='primals_1', mode=None), StarDep(name='primals_73', mode=None)]
op124.outputs = [
    buf124: ExternKernelOut
    buf124.layout = FixedLayout('cpu', torch.float32, size=[8192, 10000], stride=[10000, 1])
    buf124.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op124.node.kernel = extern_kernels.addmm


